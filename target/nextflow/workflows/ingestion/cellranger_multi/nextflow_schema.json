{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cellranger_multi",
"description": "A pipeline for running Cell Ranger multi.",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the sample",
                "help_text": "Type: `string`, required, example: `foo`. ID of the sample."
            
            }
    

        ,
                "input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `sample_S1_L001_R1_001.fastq.gz;sample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The fastq",
                "help_text": "Type: List of `file`, example: `sample_S1_L001_R1_001.fastq.gz;sample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The fastq.gz files to align. Can also be a single directory containing fastq.gz files."
            
            }
    

        ,
                "gex_reference": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `reference_genome.tar.gz`. Genome refence index built by Cell Ranger mkref",
                "help_text": "Type: `file`, required, example: `reference_genome.tar.gz`. Genome refence index built by Cell Ranger mkref."
            
            }
    

        ,
                "vdj_reference": {
                "type":
                "string",
                "description": "Type: `file`, example: `reference_vdj.tar.gz`. VDJ refence index built by Cell Ranger mkref",
                "help_text": "Type: `file`, example: `reference_vdj.tar.gz`. VDJ refence index built by Cell Ranger mkref."
            
            }
    

        ,
                "feature_reference": {
                "type":
                "string",
                "description": "Type: `file`, example: `feature_reference.csv`. Path to the Feature reference CSV file, declaring Feature Barcode\nconstructs and associated barcodes",
                "help_text": "Type: `file`, example: `feature_reference.csv`. Path to the Feature reference CSV file, declaring Feature Barcode\nconstructs and associated barcodes. Required only for Antibody Capture \nor CRISPR Guide Capture libraries. See \nhttps://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref \nfor more information.\n"
            
            }
    

        ,
                "vdj_inner_enrichment_primers": {
                "type":
                "string",
                "description": "Type: `file`, example: `enrichment_primers.txt`. V(D)J Immune Profiling libraries: if inner enrichment primers other than those provided \nin the 10x Genomics kits are used, they need to be specified here as a\ntext file with one primer per line",
                "help_text": "Type: `file`, example: `enrichment_primers.txt`. V(D)J Immune Profiling libraries: if inner enrichment primers other than those provided \nin the 10x Genomics kits are used, they need to be specified here as a\ntext file with one primer per line.\n"
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output_raw": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_raw.output_raw`, example: `output_dir`. The raw output folder",
                "help_text": "Type: `file`, required, default: `$id.$key.output_raw.output_raw`, example: `output_dir`. The raw output folder."
            ,
                "default": "$id.$key.output_raw.output_raw"
            }
    

        ,
                "output_h5mu": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_h5mu.h5mu`, example: `output.h5mu`. The converted h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output_h5mu.h5mu`, example: `output.h5mu`. The converted h5mu file."
            ,
                "default": "$id.$key.output_h5mu.h5mu"
            }
    

        ,
                "uns_metrics": {
                "type":
                "string",
                "description": "Type: `string`, default: `metrics_cellranger`. Name of the ",
                "help_text": "Type: `string`, default: `metrics_cellranger`. Name of the .uns slot under which to QC metrics (if any)."
            ,
                "default": "metrics_cellranger"
            }
    

}
},
    
    
    "feature type-specific input files" : {
    "title": "Feature type-specific input files",
    "type": "object",
    "description": "Helper functionality to allow feature type-specific input files, without the need to specify library_type or library_id. The library_id will be inferred from the input paths.",
    "properties": {
    
        
                "gex_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Gene Expression",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Gene Expression. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "abc_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Antibody Capture",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Antibody Capture. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "cgc_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for CRISPR Guide Capture",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for CRISPR Guide Capture. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "mux_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Multiplexing Capture",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Multiplexing Capture. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "vdj_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "vdj_t_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-T",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-T. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "vdj_t_gd_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-T-GD",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-T-GD. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "vdj_b_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-B",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for VDJ-B. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

        ,
                "agc_input": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Antigen Capture",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. The FASTQ files to be analyzed for Antigen Capture. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n"
            
            }
    

}
},
    
    
    "cell multiplexing parameters" : {
    "title": "Cell multiplexing parameters",
    "type": "object",
    "description": "Arguments related to cell multiplexing.",
    "properties": {
    
        
                "cell_multiplex_sample_id": {
                "type":
                "string",
                "description": "Type: `string`. A name to identify a multiplexed sample",
                "help_text": "Type: `string`. A name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, \nand less than 64 characters. Required for Cell Multiplexing libraries.\n"
            
            }
    

        ,
                "cell_multiplex_oligo_ids": {
                "type":
                "string",
                "description": "Type: `string`. The Cell Multiplexing oligo IDs used to multiplex this sample",
                "help_text": "Type: `string`. The Cell Multiplexing oligo IDs used to multiplex this sample.\nIf multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302).\nRequired for Cell Multiplexing libraries.\n"
            
            }
    

        ,
                "cell_multiplex_description": {
                "type":
                "string",
                "description": "Type: `string`. A description for the sample",
                "help_text": "Type: `string`. A description for the sample."
            
            }
    

}
},
    
    
    "gene expression arguments" : {
    "title": "Gene expression arguments",
    "type": "object",
    "description": "Arguments relevant to the analysis of gene expression data.",
    "properties": {
    
        
                "gex_expect_cells": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `3000`. Expected number of recovered cells, used as input to cell calling algorithm",
                "help_text": "Type: `integer`, example: `3000`. Expected number of recovered cells, used as input to cell calling algorithm."
            
            }
    

        ,
                "gex_chemistry": {
                "type":
                "string",
                "description": "Type: `string`, default: `auto`, choices: ``auto`, `threeprime`, `fiveprime`, `SC3Pv1`, `SC3Pv2`, `SC3Pv3`, `SC3Pv3LT`, `SC3Pv3HT`, `SC5P-PE`, `SC5P-R2`, `SC-FB``. Assay configuration",
                "help_text": "Type: `string`, default: `auto`, choices: ``auto`, `threeprime`, `fiveprime`, `SC3Pv1`, `SC3Pv2`, `SC3Pv3`, `SC3Pv3LT`, `SC3Pv3HT`, `SC5P-PE`, `SC5P-R2`, `SC-FB``. Assay configuration.\n- auto: autodetect mode\n- threeprime: Single Cell 3\u0027\n- fiveprime: Single Cell 5\u0027\n- SC3Pv1: Single Cell 3\u0027 v1\n- SC3Pv2: Single Cell 3\u0027 v2\n- SC3Pv3: Single Cell 3\u0027 v3\n- SC3Pv3LT: Single Cell 3\u0027 v3 LT\n- SC3Pv3HT: Single Cell 3\u0027 v3 HT\n- SC5P-PE: Single Cell 5\u0027 paired-end\n- SC5P-R2: Single Cell 5\u0027 R2-only\n- SC-FB: Single Cell Antibody-only 3\u0027 v2 or 5\u0027\nSee https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\n",
                "enum": ["auto", "threeprime", "fiveprime", "SC3Pv1", "SC3Pv2", "SC3Pv3", "SC3Pv3LT", "SC3Pv3HT", "SC5P-PE", "SC5P-R2", "SC-FB"]
            
            ,
                "default": "auto"
            }
    

        ,
                "gex_secondary_analysis": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `false`. Whether or not to run the secondary analysis e",
                "help_text": "Type: `boolean`, default: `false`. Whether or not to run the secondary analysis e.g. clustering."
            ,
                "default": "False"
            }
    

        ,
                "gex_generate_bam": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to generate a BAM file",
                "help_text": "Type: `boolean`, default: `true`. Whether to generate a BAM file."
            ,
                "default": "True"
            }
    

        ,
                "gex_include_introns": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)",
                "help_text": "Type: `boolean`, default: `true`. Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)"
            ,
                "default": "True"
            }
    

}
},
    
    
    "library arguments" : {
    "title": "Library arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "library_id": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `mysample1`, multiple_sep: `\";\"`. The Illumina sample name to analyze",
                "help_text": "Type: List of `string`, example: `mysample1`, multiple_sep: `\";\"`. The Illumina sample name to analyze. This must exactly match the \u0027Sample Name\u0027 part\nof the FASTQ files specified in the `--input` argument.\n"
            
            }
    

        ,
                "library_type": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `Gene Expression`, multiple_sep: `\";\"`. The underlying feature type of the library",
                "help_text": "Type: List of `string`, example: `Gene Expression`, multiple_sep: `\";\"`. The underlying feature type of the library.\nPossible values: \"Gene Expression\", \"VDJ\", \"VDJ-T\", \"VDJ-B\", \"Antibody Capture\", \"CRISPR Guide Capture\", \"Multiplexing Capture\"\n"
            
            }
    

        ,
                "library_subsample": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `0.5`, multiple_sep: `\";\"`. Optional",
                "help_text": "Type: List of `string`, example: `0.5`, multiple_sep: `\";\"`. Optional. The rate at which reads from the provided FASTQ files are sampled.\nMust be strictly greater than 0 and less than or equal to 1.\n"
            
            }
    

        ,
                "library_lanes": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `1-4`, multiple_sep: `\";\"`. Lanes associated with this sample",
                "help_text": "Type: List of `string`, example: `1-4`, multiple_sep: `\";\"`. Lanes associated with this sample. Defaults to using all lanes."
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/feature type-specific input files"
    },

    {
    "$ref": "#/definitions/cell multiplexing parameters"
    },

    {
    "$ref": "#/definitions/gene expression arguments"
    },

    {
    "$ref": "#/definitions/library arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
