{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "make_reference",
"description": "Build a transcriptomics reference into one of many formats.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the reference",
                "help_text": "Type: `string`, required, example: `foo`. ID of the reference."
            
            }
    

        ,
                "genome_fasta": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta",
                "help_text": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta."
            
            }
    

        ,
                "transcriptome_gtf": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation",
                "help_text": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation."
            
            }
    

        ,
                "ercc": {
                "type":
                "string",
                "description": "Type: `file`, example: `https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file",
                "help_text": "Type: `file`, example: `https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file."
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "target": {
                "type":
                "string",
                "description": "Type: List of `string`, default: `star`, multiple_sep: `\";\"`, choices: ``cellranger`, `bd_rhapsody`, `star``. Which reference indices to generate",
                "help_text": "Type: List of `string`, default: `star`, multiple_sep: `\";\"`, choices: ``cellranger`, `bd_rhapsody`, `star``. Which reference indices to generate.",
                "enum": ["cellranger", "bd_rhapsody", "star"]
            
            ,
                "default": "star"
            }
    

        ,
                "output_fasta": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta",
                "help_text": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta."
            ,
                "default": "$id.$key.output_fasta.gz"
            }
    

        ,
                "output_gtf": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf",
                "help_text": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf."
            ,
                "default": "$id.$key.output_gtf.gz"
            }
    

        ,
                "output_cellranger": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_cellranger.gz"
            }
    

        ,
                "output_bd_rhapsody": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_bd_rhapsody.gz"
            }
    

        ,
                "output_star": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_star.gz"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "subset_regex": {
                "type":
                "string",
                "description": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex",
                "help_text": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex."
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
