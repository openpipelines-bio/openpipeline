{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "make_reference",
"description": "Build a transcriptomics reference into one of many formats.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the reference",
                "help_text": "Type: `string`, required, example: `foo`. ID of the reference."
            
            }
    

        ,
                "genome_fasta": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta",
                "help_text": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta."
            
            }
    

        ,
                "transcriptome_gtf": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation",
                "help_text": "Type: `file`, required, example: `https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation."
            
            }
    

        ,
                "ercc": {
                "type":
                "string",
                "description": "Type: `file`, example: `https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file",
                "help_text": "Type: `file`, example: `https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file."
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "target": {
                "type":
                "string",
                "description": "Type: List of `string`, default: `star`, multiple_sep: `\";\"`, choices: ``cellranger`, `cellranger_arc`, `bd_rhapsody`, `star``. Which reference indices to generate",
                "help_text": "Type: List of `string`, default: `star`, multiple_sep: `\";\"`, choices: ``cellranger`, `cellranger_arc`, `bd_rhapsody`, `star``. Which reference indices to generate."
            ,
                "default":"star"
            }
    

        ,
                "output_fasta": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta",
                "help_text": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta."
            ,
                "default":"$id.$key.output_fasta.gz"
            }
    

        ,
                "output_gtf": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf",
                "help_text": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf."
            ,
                "default":"$id.$key.output_gtf.gz"
            }
    

        ,
                "output_cellranger": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index"
            ,
                "default":"$id.$key.output_cellranger.gz"
            }
    

        ,
                "output_cellranger_arc": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_cellranger_arc.gz`, example: `cellranger_index_arc.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_cellranger_arc.gz`, example: `cellranger_index_arc.tar.gz`. Output index"
            ,
                "default":"$id.$key.output_cellranger_arc.gz"
            }
    

        ,
                "output_bd_rhapsody": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index"
            ,
                "default":"$id.$key.output_bd_rhapsody.gz"
            }
    

        ,
                "output_star": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index"
            ,
                "default":"$id.$key.output_star.gz"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "subset_regex": {
                "type":
                "string",
                "description": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex",
                "help_text": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex."
            
            }
    

}
},
    
    
    "star settings" : {
    "title": "STAR Settings",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "star_genome_sa_index_nbases": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `14`. Length (bases) of the SA pre-indexing string",
                "help_text": "Type: `integer`, default: `14`. Length (bases) of the SA pre-indexing string. Typically between 10 and 15.\nLonger strings will use much more memory, but allow faster searches. For small\ngenomes, the parameter {genomeSAindexNbases must be scaled down to\nmin(14, log2(GenomeLength)/2 - 1).\n"
            ,
                "default":14
            }
    

}
},
    
    
    "bd rhapsody settings" : {
    "title": "BD Rhapsody Settings",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "bdrhap_mitochondrial_contigs": {
                "type":
                "string",
                "description": "Type: List of `string`, default: `chrM;chrMT;M;MT`, multiple_sep: `\";\"`. Names of the Mitochondrial contigs in the provided Reference Genome",
                "help_text": "Type: List of `string`, default: `chrM;chrMT;M;MT`, multiple_sep: `\";\"`. Names of the Mitochondrial contigs in the provided Reference Genome. Fragments originating from contigs other than these are\nidentified as \u0027nuclear fragments\u0027 in the ATACseq analysis pipeline.\n"
            ,
                "default":"chrM;chrMT;M;MT"
            }
    

        ,
                "bdrhap_filtering_off": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. By default the input Transcript Annotation files are filtered based on the gene_type/gene_biotype attribute",
                "help_text": "Type: `boolean_true`, default: `false`. By default the input Transcript Annotation files are filtered based on the gene_type/gene_biotype attribute. Only features \nhaving the following attribute values are kept:\n\n  - protein_coding\n  - lncRNA \n  - IG_LV_gene\n  - IG_V_gene\n  - IG_V_pseudogene\n  - IG_D_gene\n  - IG_J_gene\n  - IG_J_pseudogene\n  - IG_C_gene\n  - IG_C_pseudogene\n  - TR_V_gene\n  - TR_V_pseudogene\n  - TR_D_gene\n  - TR_J_gene\n  - TR_J_pseudogene\n  - TR_C_gene\n\n  If you have already pre-filtered the input Annotation files and/or wish to turn-off the filtering, please set this option to True.\n"
            ,
                "default":false
            }
    

        ,
                "bdrhap_wta_only_index": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Build a WTA only index, otherwise builds a WTA + ATAC index",
                "help_text": "Type: `boolean_true`, default: `false`. Build a WTA only index, otherwise builds a WTA + ATAC index."
            ,
                "default":false
            }
    

        ,
                "bdrhap_extra_star_params": {
                "type":
                "string",
                "description": "Type: `string`, example: `--limitGenomeGenerateRAM 48000 --genomeSAindexNbases 11`. Additional parameters to pass to STAR when building the genome index",
                "help_text": "Type: `string`, example: `--limitGenomeGenerateRAM 48000 --genomeSAindexNbases 11`. Additional parameters to pass to STAR when building the genome index. Specify exactly like how you would on the command line."
            
            }
    

}
},
    
    
    "cellranger arc options" : {
    "title": "Cellranger ARC options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "motifs_file": {
                "type":
                "string",
                "description": "Type: `file`. Path to file containing transcription factor motifs in JASPAR format",
                "help_text": "Type: `file`. Path to file containing transcription factor motifs in JASPAR format."
            
            }
    

        ,
                "non_nuclear_contigs": {
                "type":
                "string",
                "description": "Type: List of `string`, multiple_sep: `\";\"`. Name(s) of contig(s) that do not have any chromatin structure, for example, \nmitochondria or plastids",
                "help_text": "Type: List of `string`, multiple_sep: `\";\"`. Name(s) of contig(s) that do not have any chromatin structure, for example, \nmitochondria or plastids. These contigs are excluded from peak calling since\nthe entire contig will be \"open\" due to a lack of chromatin structure.\nLeave empty if there are no such contigs.\n"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/star settings"
    },

    {
    "$ref": "#/definitions/bd rhapsody settings"
    },

    {
    "$ref": "#/definitions/cellranger arc options"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
