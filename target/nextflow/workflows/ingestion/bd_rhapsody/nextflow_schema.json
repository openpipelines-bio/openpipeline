{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "bd_rhapsody",
"description": "BD Rhapsody Sequence Analysis CWL pipeline v2.2.1\n\nThis pipeline performs analysis of single-cell multiomic sequence read (FASTQ) data. The supported\nsequencing libraries are those generated by the BD Rhapsody assay kits, including: Whole Transcriptome\nmRNA, Targeted mRNA, AbSeq Antibody-Oligonucleotides, Single-Cell Multiplexing, TCR/BCR, and\nATAC-Seq\n\nThe CWL pipeline file is obtained by cloning \u0027https://bitbucket.org/CRSwDev/cwl\u0027 and removing all objects with class \u0027DockerRequirement\u0027 from the YAML.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "reads": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `WTALibrary_S1_L001_R1_001.fastq.gz;WTALibrary_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. Reads (optional) - Path to your FASTQ",
                "help_text": "Type: List of `file`, example: `WTALibrary_S1_L001_R1_001.fastq.gz;WTALibrary_S1_L001_R2_001.fastq.gz`, multiple_sep: `\";\"`. Reads (optional) - Path to your FASTQ.GZ formatted read files from libraries that may include:\n  \n- WTA mRNA\n- Targeted mRNA\n- AbSeq\n- Sample Multiplexing\n- VDJ\n  \nYou may specify as many R1/R2 read pairs as you want.\n"
            
            }
    

        ,
                "reads_atac": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `ATACLibrary_S2_L001_R1_001.fastq.gz;ATACLibrary_S2_L001_R2_001.fastq.gz;ATACLibrary_S2_L001_I2_001.fastq.gz`, multiple_sep: `\";\"`. Path to your FASTQ",
                "help_text": "Type: List of `file`, example: `ATACLibrary_S2_L001_R1_001.fastq.gz;ATACLibrary_S2_L001_R2_001.fastq.gz;ATACLibrary_S2_L001_I2_001.fastq.gz`, multiple_sep: `\";\"`. Path to your FASTQ.GZ formatted read files from ATAC-Seq libraries.\nYou may specify as many R1/R2/I2 files as you want.\n"
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "Outputs",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The processed output file in h5mu format",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The processed output file in h5mu format."
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_raw": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_raw.output_raw`, example: `output_dir`. The unprocessed output directory containing all the outputs from the pipeline",
                "help_text": "Type: `file`, required, default: `$id.$key.output_raw.output_raw`, example: `output_dir`. The unprocessed output directory containing all the outputs from the pipeline."
            ,
                "default":"$id.$key.output_raw.output_raw"
            }
    

}
},
    
    
    "references" : {
    "title": "References",
    "type": "object",
    "description": "Assay type will be inferred from the provided reference(s).\nDo not provide both reference_archive and targeted_reference at the same time.\n  \nValid reference input combinations:\n  - reference_archive: WTA only\n  - reference_archive \u0026 abseq_reference: WTA + AbSeq\n  - reference_archive \u0026 supplemental_reference: WTA + extra transgenes\n  - reference_archive \u0026 abseq_reference \u0026 supplemental_reference: WTA + AbSeq + extra transgenes\n  - reference_archive: WTA + ATAC or ATAC only\n  - reference_archive \u0026 supplemental_reference: WTA + ATAC + extra transgenes\n  - targeted_reference: Targeted only\n  - targeted_reference \u0026 abseq_reference: Targeted + AbSeq\n  - abseq_reference: AbSeq only\n\nThe reference_archive can be generated with the `reference/build_bdrhap_reference` component.\nAlternatively, BD also provides standard references which can be downloaded from these locations:\n\n  - Human: https://bd-rhapsody-public.s3.amazonaws.com/Rhapsody-WTA/Pipeline-version2.x_WTA_references/RhapRef_Human_WTA_2023-02.tar.gz\n  - Mouse: https://bd-rhapsody-public.s3.amazonaws.com/Rhapsody-WTA/Pipeline-version2.x_WTA_references/RhapRef_Mouse_WTA_2023-02.tar.gz\n",
    "properties": {
    
        
                "reference_archive": {
                "type":
                "string",
                "description": "Type: `file`, example: `RhapRef_Human_WTA_2023-02.tar.gz`. Path to Rhapsody WTA Reference in the tar",
                "help_text": "Type: `file`, example: `RhapRef_Human_WTA_2023-02.tar.gz`. Path to Rhapsody WTA Reference in the tar.gz format.\n\nStructure of the reference archive:\n  \n- `BD_Rhapsody_Reference_Files/`: top level folder\n  - `star_index/`: sub-folder containing STAR index, that is files created with `STAR --runMode genomeGenerate`\n  - GTF for gene-transcript-annotation e.g. \"gencode.v43.primary_assembly.annotation.gtf\"\n"
            
            }
    

        ,
                "targeted_reference": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `BD_Rhapsody_Immune_Response_Panel_Hs.fasta`, multiple_sep: `\";\"`. Path to the targeted reference file in FASTA format",
                "help_text": "Type: List of `file`, example: `BD_Rhapsody_Immune_Response_Panel_Hs.fasta`, multiple_sep: `\";\"`. Path to the targeted reference file in FASTA format.\n"
            
            }
    

        ,
                "abseq_reference": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `AbSeq_reference.fasta`, multiple_sep: `\";\"`. Path to the AbSeq reference file in FASTA format",
                "help_text": "Type: List of `file`, example: `AbSeq_reference.fasta`, multiple_sep: `\";\"`. Path to the AbSeq reference file in FASTA format.  Only needed if BD AbSeq Ab-Oligos are used."
            
            }
    

        ,
                "supplemental_reference": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `supplemental_reference.fasta`, multiple_sep: `\";\"`. Path to the supplemental reference file in FASTA format",
                "help_text": "Type: List of `file`, example: `supplemental_reference.fasta`, multiple_sep: `\";\"`. Path to the supplemental reference file in FASTA format.  Only needed if there are additional transgene sequences to be aligned against in a WTA assay experiment."
            
            }
    

}
},
    
    
    "putative cell calling settings" : {
    "title": "Putative Cell Calling Settings",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "cell_calling_data": {
                "type":
                "string",
                "description": "Type: `string`, example: `mRNA`, choices: ``mRNA`, `AbSeq`, `ATAC`, `mRNA_and_ATAC``. Specify the dataset to be used for putative cell calling: mRNA, AbSeq, ATAC, mRNA_and_ATAC\n  \nFor putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above",
                "help_text": "Type: `string`, example: `mRNA`, choices: ``mRNA`, `AbSeq`, `ATAC`, `mRNA_and_ATAC``. Specify the dataset to be used for putative cell calling: mRNA, AbSeq, ATAC, mRNA_and_ATAC\n  \nFor putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\n  \nFor putative cell calling using an ATAC dataset, please provide a WTA+ATAC-Seq Reference_Archive file above.\n  \nThe default data for putative cell calling, will be determined the following way:\n  \n- If mRNA Reads and ATAC Reads exist: mRNA_and_ATAC\n- If only ATAC Reads exist: ATAC\n- Otherwise: mRNA\n",
                "enum": ["mRNA", "AbSeq", "ATAC", "mRNA_and_ATAC"]
            
            
            }
    

        ,
                "cell_calling_bioproduct_algorithm": {
                "type":
                "string",
                "description": "Type: `string`, example: `Basic`, choices: ``Basic`, `Refined``. Specify the bioproduct algorithm to be used for putative cell calling: Basic or Refined\n  \nBy default, the Basic algorithm will be used for putative cell calling",
                "help_text": "Type: `string`, example: `Basic`, choices: ``Basic`, `Refined``. Specify the bioproduct algorithm to be used for putative cell calling: Basic or Refined\n  \nBy default, the Basic algorithm will be used for putative cell calling.\n",
                "enum": ["Basic", "Refined"]
            
            
            }
    

        ,
                "cell_calling_atac_algorithm": {
                "type":
                "string",
                "description": "Type: `string`, example: `Basic`, choices: ``Basic`, `Refined``. Specify the ATAC-seq algorithm to be used for putative cell calling: Basic or Refined\n  \nBy default, the Basic algorithm will be used for putative cell calling",
                "help_text": "Type: `string`, example: `Basic`, choices: ``Basic`, `Refined``. Specify the ATAC-seq algorithm to be used for putative cell calling: Basic or Refined\n  \nBy default, the Basic algorithm will be used for putative cell calling.\n",
                "enum": ["Basic", "Refined"]
            
            
            }
    

        ,
                "exact_cell_count": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `10000`. Set a specific number of cells as putative, based on those with the highest error-corrected read count\n",
                "help_text": "Type: `integer`, example: `10000`. Set a specific number of cells as putative, based on those with the highest error-corrected read count\n"
            
            }
    

        ,
                "expected_cell_count": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `20000`. Guide the basic putative cell calling algorithm by providing an estimate of the number of cells expected",
                "help_text": "Type: `integer`, example: `20000`. Guide the basic putative cell calling algorithm by providing an estimate of the number of cells expected.  Usually this can be the number of cells loaded into the Rhapsody cartridge.  If there are multiple inflection points on the second derivative cumulative curve, this will ensure the one selected is near the expected. \n"
            
            }
    

}
},
    
    
    "intronic reads settings" : {
    "title": "Intronic Reads Settings",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "exclude_intronic_reads": {
                "type":
                "boolean",
                "description": "Type: `boolean`, example: `false`. By default, the flag is false, and reads aligned to exons and introns are considered and represented in molecule counts",
                "help_text": "Type: `boolean`, example: `false`. By default, the flag is false, and reads aligned to exons and introns are considered and represented in molecule counts. When the flag is set to true, intronic reads will be excluded.\nThe value can be true or false.\n"
            
            }
    

}
},
    
    
    "multiplex settings" : {
    "title": "Multiplex Settings",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "sample_tags_version": {
                "type":
                "string",
                "description": "Type: `string`, example: `human`, choices: ``human`, `mouse`, `flex`, `nuclei_includes_mrna`, `nuclei_atac_only``. Specify the version of the Sample Tags used in the run:\n\n* If Sample Tag Multiplexing was done, specify the appropriate version: human, mouse, flex, nuclei_includes_mrna, nuclei_atac_only\n* If this is an SMK + Nuclei mRNA run or an SMK + Multiomic ATAC-Seq (WTA+ATAC-Seq) run (and not an SMK + ATAC-Seq only run), choose the \"nuclei_includes_mrna\" option",
                "help_text": "Type: `string`, example: `human`, choices: ``human`, `mouse`, `flex`, `nuclei_includes_mrna`, `nuclei_atac_only``. Specify the version of the Sample Tags used in the run:\n\n* If Sample Tag Multiplexing was done, specify the appropriate version: human, mouse, flex, nuclei_includes_mrna, nuclei_atac_only\n* If this is an SMK + Nuclei mRNA run or an SMK + Multiomic ATAC-Seq (WTA+ATAC-Seq) run (and not an SMK + ATAC-Seq only run), choose the \"nuclei_includes_mrna\" option.\n* If this is an SMK + ATAC-Seq only run (and not SMK + Multiomic ATAC-Seq (WTA+ATAC-Seq)), choose the \"nuclei_atac_only\" option.\n",
                "enum": ["human", "mouse", "flex", "nuclei_includes_mrna", "nuclei_atac_only"]
            
            
            }
    

        ,
                "tag_names": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `4-mySample;9-myOtherSample;6-alsoThisSample`, multiple_sep: `\";\"`. Specify the tag number followed by \u0027-\u0027 and the desired sample name to appear in Sample_Tag_Metrics",
                "help_text": "Type: List of `string`, example: `4-mySample;9-myOtherSample;6-alsoThisSample`, multiple_sep: `\";\"`. Specify the tag number followed by \u0027-\u0027 and the desired sample name to appear in Sample_Tag_Metrics.csv\nDo not use the special characters.\n"
            
            }
    

}
},
    
    
    "vdj arguments" : {
    "title": "VDJ arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "vdj_version": {
                "type":
                "string",
                "description": "Type: `string`, example: `human`, choices: ``human`, `mouse`, `humanBCR`, `humanTCR`, `mouseBCR`, `mouseTCR``. If VDJ was done, specify the appropriate option: human, mouse, humanBCR, humanTCR, mouseBCR, mouseTCR\n",
                "help_text": "Type: `string`, example: `human`, choices: ``human`, `mouse`, `humanBCR`, `humanTCR`, `mouseBCR`, `mouseTCR``. If VDJ was done, specify the appropriate option: human, mouse, humanBCR, humanTCR, mouseBCR, mouseTCR\n",
                "enum": ["human", "mouse", "humanBCR", "humanTCR", "mouseBCR", "mouseTCR"]
            
            
            }
    

}
},
    
    
    "atac options" : {
    "title": "ATAC options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "predefined_atac_peaks": {
                "type":
                "string",
                "description": "Type: `file`, example: `predefined_peaks.bed`. An optional BED file containing pre-established chromatin accessibility peak regions for generating the ATAC cell-by-peak matrix",
                "help_text": "Type: `file`, example: `predefined_peaks.bed`. An optional BED file containing pre-established chromatin accessibility peak regions for generating the ATAC cell-by-peak matrix."
            
            }
    

}
},
    
    
    "additional options" : {
    "title": "Additional options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "run_name": {
                "type":
                "string",
                "description": "Type: `string`, default: `sample`. Specify a run name to use as the output file base name",
                "help_text": "Type: `string`, default: `sample`. Specify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\n"
            ,
                "default":"sample"
            }
    

        ,
                "generate_bam": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `false`. Specify whether to create the BAM file output\n",
                "help_text": "Type: `boolean`, default: `false`. Specify whether to create the BAM file output\n"
            ,
                "default":false
            }
    

        ,
                "long_reads": {
                "type":
                "boolean",
                "description": "Type: `boolean`. Use STARlong (default: undefined - i",
                "help_text": "Type: `boolean`. Use STARlong (default: undefined - i.e. autodetects based on read lengths) - Specify if the STARlong aligner should be used instead of STAR. Set to true if the reads are longer than 650bp.\n"
            
            }
    

}
},
    
    
    "advanced options" : {
    "title": "Advanced options",
    "type": "object",
    "description": "NOTE: Only change these if you are really sure about what you are doing\n",
    "properties": {
    
        
                "custom_star_params": {
                "type":
                "string",
                "description": "Type: `string`, example: `--alignIntronMax 6000 --outFilterScoreMinOverLread 0.1 --limitOutSJcollapsed 2000000`. Modify STAR alignment parameters - Set this parameter to fully override default STAR mapping parameters used in the pipeline",
                "help_text": "Type: `string`, example: `--alignIntronMax 6000 --outFilterScoreMinOverLread 0.1 --limitOutSJcollapsed 2000000`. Modify STAR alignment parameters - Set this parameter to fully override default STAR mapping parameters used in the pipeline.\nFor reference this is the default that is used:\n\n  Short Reads: `--outFilterScoreMinOverLread 0 --outFilterMatchNminOverLread 0 --outFilterMultimapScoreRange 0 --clip3pAdapterSeq AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --seedSearchStartLmax 50 --outFilterMatchNmin 25 --limitOutSJcollapsed 2000000`\n  Long Reads: Same as Short Reads + `--seedPerReadNmax 10000`\n\nThis applies to fastqs provided in the Reads user input \nDo NOT set any non-mapping related params like `--genomeDir`, `--outSAMtype`, `--outSAMunmapped`, `--readFilesIn`, `--runThreadN`, etc.\nWe use STAR version 2.7.10b\n"
            
            }
    

        ,
                "custom_bwa_mem2_params": {
                "type":
                "string",
                "description": "Type: `string`, example: `-k 16 -w 200 -r`. Modify bwa-mem2 alignment parameters - Set this parameter to fully override bwa-mem2 mapping parameters used in the pipeline\nThe pipeline does not specify any custom mapping params to bwa-mem2 so program default values are used\nThis applies to fastqs provided in the Reads_ATAC user input \nDo NOT set any non-mapping related params like `-C`, `-t`, etc",
                "help_text": "Type: `string`, example: `-k 16 -w 200 -r`. Modify bwa-mem2 alignment parameters - Set this parameter to fully override bwa-mem2 mapping parameters used in the pipeline\nThe pipeline does not specify any custom mapping params to bwa-mem2 so program default values are used\nThis applies to fastqs provided in the Reads_ATAC user input \nDo NOT set any non-mapping related params like `-C`, `-t`, etc.\nWe use bwa-mem2 version 2.2.1\n"
            
            }
    

}
},
    
    
    "cwl-runner arguments" : {
    "title": "CWL-runner arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "parallel": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Run jobs in parallel",
                "help_text": "Type: `boolean`, default: `true`. Run jobs in parallel."
            ,
                "default":true
            }
    

        ,
                "timestamps": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Add timestamps to the errors, warnings, and notifications",
                "help_text": "Type: `boolean_true`, default: `false`. Add timestamps to the errors, warnings, and notifications."
            ,
                "default":false
            }
    

}
},
    
    
    "undocumented arguments" : {
    "title": "Undocumented arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "abseq_umi": {
                "type":
                "integer",
                "description": "Type: `integer`. ",
                "help_text": "Type: `integer`. "
            
            }
    

        ,
                "target_analysis": {
                "type":
                "boolean",
                "description": "Type: `boolean`. ",
                "help_text": "Type: `boolean`. "
            
            }
    

        ,
                "vdj_jgene_evalue": {
                "type":
                "number",
                "description": "Type: `double`. e-value threshold for J gene",
                "help_text": "Type: `double`. e-value threshold for J gene. The e-value threshold for J gene call by IgBlast/PyIR, default is set as 0.001\n"
            
            }
    

        ,
                "vdj_vgene_evalue": {
                "type":
                "number",
                "description": "Type: `double`. e-value threshold for V gene",
                "help_text": "Type: `double`. e-value threshold for V gene. The e-value threshold for V gene call by IgBlast/PyIR, default is set as 0.001\n"
            
            }
    

        ,
                "write_filtered_reads": {
                "type":
                "boolean",
                "description": "Type: `boolean`. ",
                "help_text": "Type: `boolean`. "
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/references"
    },

    {
    "$ref": "#/definitions/putative cell calling settings"
    },

    {
    "$ref": "#/definitions/intronic reads settings"
    },

    {
    "$ref": "#/definitions/multiplex settings"
    },

    {
    "$ref": "#/definitions/vdj arguments"
    },

    {
    "$ref": "#/definitions/atac options"
    },

    {
    "$ref": "#/definitions/additional options"
    },

    {
    "$ref": "#/definitions/advanced options"
    },

    {
    "$ref": "#/definitions/cwl-runner arguments"
    },

    {
    "$ref": "#/definitions/undocumented arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
