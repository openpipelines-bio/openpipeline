{
"$schema": "https://json-schema.org/draft/2020-12/schema",
"title": "scgpt_annotation",
"description": "Cell type annotation workflow using scGPT. \nThe workflow takes a pre-processed h5mu file as query input, and performs\n  - subsetting for HVG\n  - cross-checking of genes with the model vocabulary\n  - binning of gene counts\n  - padding and tokenizing of genes\n  - transformer-based cell type prediction\nNote that cell-type prediction using scGPT is only possible using a fine-tuned scGPT model.\n",
"type": "object",
"$defs": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "oneOf": [
                    {"format": "file-path", "mimetype": "text/csv", "pattern": "^\\S+\\.csv$"},
                    {"type": "string"},
                    {"items": { "type": "object" }, "type": "array"}
                ]
            }
        }
    },

    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":"string",
                "format": "path",
                    "description": "Output file path",
                "help_text": "Type: `file`, multiple: `False`, required, default: `$id.$key.output.h5mu`, direction: `output`, example: `output.h5mu`. "
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":"string",
                "description": "The compression algorithm to use for the output h5mu file",
                "help_text": "Type: `string`, multiple: `False`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "output_obs_predictions": {
                "type":"string",
                "description": "The name of the adata",
                "help_text": "Type: `string`, multiple: `False`, default: `scgpt_pred`. "
            ,
                "default": "scgpt_pred"
            }
    

        ,
                "output_obs_probability": {
                "type":"string",
                "description": "The name of the adata",
                "help_text": "Type: `string`, multiple: `False`, default: `scgpt_probability`. "
            ,
                "default": "scgpt_probability"
            }
    

}
},
    
    
    "query input" : {
    "title": "Query input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":"string",
                "description": "ID of the sample",
                "help_text": "Type: `string`, multiple: `False`, required, example: `foo`. "
            
            }
    

        ,
                "input": {
                "type":"string",
                "format": "path",
                    "exists": true,"description": "Path to the input file",
                "help_text": "Type: `file`, multiple: `False`, required, direction: `input`, example: `input.h5mu`. "
            
            }
    

        ,
                "modality": {
                "type":"string",
                "description": "",
                "help_text": "Type: `string`, multiple: `False`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "input_layer": {
                "type":"string",
                "description": "The layer of the input dataset to process if ",
                "help_text": "Type: `string`, multiple: `False`. "
            
            }
    

        ,
                "input_var_gene_names": {
                "type":"string",
                "description": "The ",
                "help_text": "Type: `string`, multiple: `False`. "
            
            }
    

        ,
                "input_obs_batch_label": {
                "type":"string",
                "description": "The ",
                "help_text": "Type: `string`, multiple: `False`, required. "
            
            }
    

}
},
    
    
    "model input" : {
    "title": "Model input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "model": {
                "type":"string",
                "format": "path",
                    "exists": true,"description": "The scGPT model file",
                "help_text": "Type: `file`, multiple: `False`, required, direction: `input`, example: `best_model.pt`. "
            
            }
    

        ,
                "model_config": {
                "type":"string",
                "format": "path",
                    "exists": true,"description": "The scGPT model configuration file",
                "help_text": "Type: `file`, multiple: `False`, required, direction: `input`, example: `args.json`. "
            
            }
    

        ,
                "model_vocab": {
                "type":"string",
                "format": "path",
                    "exists": true,"description": "The scGPT model vocabulary file",
                "help_text": "Type: `file`, multiple: `False`, required, direction: `input`, example: `vocab.json`. "
            
            }
    

        ,
                "finetuned_checkpoints_key": {
                "type":"string",
                "description": "Key in the model file containing the pre-trained checkpoints",
                "help_text": "Type: `string`, multiple: `False`, default: `model_state_dict`. "
            ,
                "default": "model_state_dict"
            }
    

        ,
                "label_mapper_key": {
                "type":"string",
                "description": "Key in the model file containing the cell type class to label mapper dictionary",
                "help_text": "Type: `string`, multiple: `False`, default: `id_to_class`. "
            ,
                "default": "id_to_class"
            }
    

}
},
    
    
    "padding arguments" : {
    "title": "Padding arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":"string",
                "description": "Token used for padding",
                "help_text": "Type: `string`, multiple: `False`, default: `\u003cpad\u003e`. "
            ,
                "default": "\u003cpad\u003e"
            }
    

        ,
                "pad_value": {
                "type":"integer",
                "description": "The value of the padding token",
                "help_text": "Type: `integer`, multiple: `False`, default: `-2`. "
            ,
                "default": -2
            }
    

}
},
    
    
    "hvg subset arguments" : {
    "title": "HVG subset arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "n_hvg": {
                "type":"integer",
                "description": "Number of highly variable genes to subset for",
                "help_text": "Type: `integer`, multiple: `False`, default: `1200`. "
            ,
                "default": 1200
            }
    

        ,
                "hvg_flavor": {
                "type":"string",
                "description": "Method to be used for identifying highly variable genes",
                "help_text": "Type: `string`, multiple: `False`, default: `cell_ranger`, choices: ``cell_ranger`, `seurat``. ",
                "enum": ["cell_ranger", "seurat"]
            
            ,
                "default": "cell_ranger"
            }
    

}
},
    
    
    "tokenization arguments" : {
    "title": "Tokenization arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "max_seq_len": {
                "type":"integer",
                "description": "The maximum sequence length of the tokenized data",
                "help_text": "Type: `integer`, multiple: `False`. "
            
            }
    

}
},
    
    
    "embedding arguments" : {
    "title": "Embedding arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "dsbn": {
                "type":"boolean",
                "description": "Apply domain-specific batch normalization\n",
                "help_text": "Type: `boolean`, multiple: `False`, default: `true`. "
            ,
                "default": true
            }
    

        ,
                "batch_size": {
                "type":"integer",
                "description": "The batch size to be used for embedding inference",
                "help_text": "Type: `integer`, multiple: `False`, default: `64`. "
            ,
                "default": 64
            }
    

}
},
    
    
    "binning arguments" : {
    "title": "Binning arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "n_input_bins": {
                "type":"integer",
                "description": "The number of bins to discretize the data into; When no value is provided, data won\u0027t be binned",
                "help_text": "Type: `integer`, multiple: `False`, default: `51`. "
            ,
                "default": 51
            }
    

        ,
                "seed": {
                "type":"integer",
                "description": "Seed for random number generation used for binning",
                "help_text": "Type: `integer`, multiple: `False`. "
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":"string",
                "description": "Path to an output directory",
                "help_text": "Type: `string`, multiple: `False`, required, example: `output/`. "
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/$defs/outputs"
    },

    {
    "$ref": "#/$defs/query input"
    },

    {
    "$ref": "#/$defs/model input"
    },

    {
    "$ref": "#/$defs/padding arguments"
    },

    {
    "$ref": "#/$defs/hvg subset arguments"
    },

    {
    "$ref": "#/$defs/tokenization arguments"
    },

    {
    "$ref": "#/$defs/embedding arguments"
    },

    {
    "$ref": "#/$defs/binning arguments"
    },

    {
    "$ref": "#/$defs/nextflow input-output arguments"
    }
]
}
