{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cellxgene_census",
"description": "Query cells from a CellxGene Census or custom TileDBSoma object.\nAside from fetching the cells\u0027 RNA counts (`.X`), cell metadata\n(`.obs`) and gene metadata (`.var`), this component also fetches\nthe dataset metadata and joins it into the cell metadata.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "Output arguments.",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "output_modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to store the output in",
                "help_text": "Type: `string`, default: `rna`. Which modality to store the output in."
            ,
                "default": "rna"
            }
    

}
},
    
    
    "input database" : {
    "title": "Input database",
    "type": "object",
    "description": "Open CellxGene Census by version or URI.",
    "properties": {
    
        
                "input_uri": {
                "type":
                "string",
                "description": "Type: `string`, example: `s3://bucket/path`. If specified, a URI containing the Census SOMA objects",
                "help_text": "Type: `string`, example: `s3://bucket/path`. If specified, a URI containing the Census SOMA objects. If specified, will take precedence over the `--census_version` argument."
            
            }
    

        ,
                "census_version": {
                "type":
                "string",
                "description": "Type: `string`, example: `stable`. Which release of CellxGene census to use",
                "help_text": "Type: `string`, example: `stable`. Which release of CellxGene census to use. Possible values are \"latest\", \"stable\", or the date of one of the releases (e.g. \"2023-07-25\"). For more information, check the documentation on [Census data releases](https://chanzuckerberg.github.io/cellxgene-census/cellxgene_census_docsite_data_release_info.html)."
            
            }
    

        ,
                "add_dataset_metadata": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. If true, the experiment metadata will be added to the cell metadata",
                "help_text": "Type: `boolean_true`, default: `false`. If true, the experiment metadata will be added to the cell metadata. More specifically: `collection_id`, `collection_name`, `collection_doi`, `dataset_title`."
            ,
                "default": "False"
            }
    

}
},
    
    
    "cell query" : {
    "title": "Cell query",
    "type": "object",
    "description": "Arguments related to the query.",
    "properties": {
    
        
                "species": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `homo_sapiens`. The organism to query, usually one of `Homo sapiens` or `Mus musculus`",
                "help_text": "Type: `string`, required, example: `homo_sapiens`. The organism to query, usually one of `Homo sapiens` or `Mus musculus`."
            
            }
    

        ,
                "obs_value_filter": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `is_primary_data == True and cell_type_ontology_term_id in [\u0027CL:0000136\u0027, \u0027CL:1000311\u0027, \u0027CL:0002616\u0027] and suspension_type == \u0027cell\u0027`. Filter for selecting the `obs` metadata (i",
                "help_text": "Type: `string`, required, example: `is_primary_data == True and cell_type_ontology_term_id in [\u0027CL:0000136\u0027, \u0027CL:1000311\u0027, \u0027CL:0002616\u0027] and suspension_type == \u0027cell\u0027`. Filter for selecting the `obs` metadata (i.e. cells). Value is a filter query written in the SOMA `value_filter` syntax."
            
            }
    

}
},
    
    
    "filter cells by grouping" : {
    "title": "Filter cells by grouping",
    "type": "object",
    "description": "Filter groups with fewer than X number of cells.",
    "properties": {
    
        
                "cell_filter_grouping": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `dataset_id;tissue;assay;disease;cell_type`, multiple_sep: `\";\"`. A subset of \u0027obs\u0027 columns by which to group the cells for filtering",
                "help_text": "Type: List of `string`, example: `dataset_id;tissue;assay;disease;cell_type`, multiple_sep: `\";\"`. A subset of \u0027obs\u0027 columns by which to group the cells for filtering.\nOnly groups surpassing or equal to the `--cell_filter_minimum_count`\nthreshold will be retained. Take care not to introduce a selection\nbias against cells with more fine-grained ontology annotations.\n"
            
            }
    

        ,
                "cell_filter_minimum_count": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `100`. A minimum number of cells per group to retain",
                "help_text": "Type: `integer`, example: `100`. A minimum number of cells per group to retain. If `--cell_filter_grouping`\nis defined, this parameter should also be provided and vice versa.\n"
            
            }
    

}
},
    
    
    "count filtering" : {
    "title": "Count filtering",
    "type": "object",
    "description": "Arguments related to filtering cells and genes by counts.",
    "properties": {
    
        
                "cell_filter_min_genes": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `50`. Remove cells with less than this number of genes",
                "help_text": "Type: `integer`, default: `50`. Remove cells with less than this number of genes."
            ,
                "default": "50"
            }
    

        ,
                "cell_filter_min_counts": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Remove cells with less than this number of counts",
                "help_text": "Type: `integer`, default: `0`. Remove cells with less than this number of counts."
            ,
                "default": "0"
            }
    

        ,
                "gene_filter_min_cells": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `5`. Remove genes expressed in less than this number of cells",
                "help_text": "Type: `integer`, default: `5`. Remove genes expressed in less than this number of cells."
            ,
                "default": "5"
            }
    

        ,
                "gene_filter_min_counts": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Remove genes with less than this number of counts",
                "help_text": "Type: `integer`, default: `0`. Remove genes with less than this number of counts."
            ,
                "default": "0"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/input database"
    },

    {
    "$ref": "#/definitions/cell query"
    },

    {
    "$ref": "#/definitions/filter cells by grouping"
    },

    {
    "$ref": "#/definitions/count filtering"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
