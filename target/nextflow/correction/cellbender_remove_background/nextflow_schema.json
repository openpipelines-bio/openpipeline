{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cellbender_remove_background",
"description": "Eliminating technical artifacts from high-throughput single-cell RNA sequencing data.\n\nThis module removes counts due to ambient RNA molecules and random barcode swapping from (raw) UMI-based scRNA-seq count matrices. \nAt the moment, only the count matrices produced by the CellRanger count pipeline is supported. Support for additional tools and protocols \nwill be added in the future. A quick start tutorial can be found here.\n\nFleming et al. 2022, bioRxiv.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file. Data file on which to run tool. Data must be un-filtered: it should include empty droplets."
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. List of modalities to process",
                "help_text": "Type: `string`, default: `rna`. List of modalities to process."
            ,
                "default":"rna"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Full count matrix as an h5mu file, with background RNA removed",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Full count matrix as an h5mu file, with background RNA removed. This file contains all the original droplet barcodes."
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "layer_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_corrected`. Output layer",
                "help_text": "Type: `string`, default: `cellbender_corrected`. Output layer"
            ,
                "default":"cellbender_corrected"
            }
    

        ,
                "obs_background_fraction": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_background_fraction`. ",
                "help_text": "Type: `string`, default: `cellbender_background_fraction`. "
            ,
                "default":"cellbender_background_fraction"
            }
    

        ,
                "obs_cell_probability": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_cell_probability`. ",
                "help_text": "Type: `string`, default: `cellbender_cell_probability`. "
            ,
                "default":"cellbender_cell_probability"
            }
    

        ,
                "obs_cell_size": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_cell_size`. ",
                "help_text": "Type: `string`, default: `cellbender_cell_size`. "
            ,
                "default":"cellbender_cell_size"
            }
    

        ,
                "obs_droplet_efficiency": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_droplet_efficiency`. ",
                "help_text": "Type: `string`, default: `cellbender_droplet_efficiency`. "
            ,
                "default":"cellbender_droplet_efficiency"
            }
    

        ,
                "obs_latent_scale": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_latent_scale`. ",
                "help_text": "Type: `string`, default: `cellbender_latent_scale`. "
            ,
                "default":"cellbender_latent_scale"
            }
    

        ,
                "var_ambient_expression": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_ambient_expression`. ",
                "help_text": "Type: `string`, default: `cellbender_ambient_expression`. "
            ,
                "default":"cellbender_ambient_expression"
            }
    

        ,
                "obsm_gene_expression_encoding": {
                "type":
                "string",
                "description": "Type: `string`, default: `cellbender_gene_expression_encoding`. ",
                "help_text": "Type: `string`, default: `cellbender_gene_expression_encoding`. "
            ,
                "default":"cellbender_gene_expression_encoding"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "expected_cells_from_qc": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `false`. Will use the Cell Ranger QC to determine the estimated number of cells",
                "help_text": "Type: `boolean`, default: `false`. Will use the Cell Ranger QC to determine the estimated number of cells"
            ,
                "default":false
            }
    

        ,
                "expected_cells": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `1000`. Number of cells expected in the dataset (a rough estimate within a factor of 2 is sufficient)",
                "help_text": "Type: `integer`, example: `1000`. Number of cells expected in the dataset (a rough estimate within a factor of 2 is sufficient)."
            
            }
    

        ,
                "total_droplets_included": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `25000`. The number of droplets from the rank-ordered UMI plot\nthat will have their cell probabilities inferred as an\noutput",
                "help_text": "Type: `integer`, example: `25000`. The number of droplets from the rank-ordered UMI plot\nthat will have their cell probabilities inferred as an\noutput. Include the droplets which might contain cells.\nDroplets beyond TOTAL_DROPLETS_INCLUDED should be\n\u0027surely empty\u0027 droplets.\n"
            
            }
    

        ,
                "force_cell_umi_prior": {
                "type":
                "integer",
                "description": "Type: `integer`. Ignore CellBender\u0027s heuristic prior estimation, and use this prior for UMI counts in cells",
                "help_text": "Type: `integer`. Ignore CellBender\u0027s heuristic prior estimation, and use this prior for UMI counts in cells."
            
            }
    

        ,
                "force_empty_umi_prior": {
                "type":
                "integer",
                "description": "Type: `integer`. Ignore CellBender\u0027s heuristic prior estimation, and use this prior for UMI counts in empty droplets",
                "help_text": "Type: `integer`. Ignore CellBender\u0027s heuristic prior estimation, and use this prior for UMI counts in empty droplets."
            
            }
    

        ,
                "model": {
                "type":
                "string",
                "description": "Type: `string`, default: `full`, choices: ``naive`, `simple`, `ambient`, `swapping`, `full``. Which model is being used for count data",
                "help_text": "Type: `string`, default: `full`, choices: ``naive`, `simple`, `ambient`, `swapping`, `full``. Which model is being used for count data.\n\n* \u0027naive\u0027 subtracts the estimated ambient profile.\n* \u0027simple\u0027 does not model either ambient RNA or random barcode swapping (for debugging purposes -- not recommended).\n* \u0027ambient\u0027 assumes background RNA is incorporated into droplets.\n* \u0027swapping\u0027 assumes background RNA comes from random barcode swapping (via PCR chimeras).\n* \u0027full\u0027 uses a combined ambient and swapping model.\n",
                "enum": ["naive", "simple", "ambient", "swapping", "full"]
            
            ,
                "default":"full"
            }
    

        ,
                "epochs": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `150`. Number of epochs to train",
                "help_text": "Type: `integer`, default: `150`. Number of epochs to train."
            ,
                "default":150
            }
    

        ,
                "low_count_threshold": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `5`. Droplets with UMI counts below this number are completely \nexcluded from the analysis",
                "help_text": "Type: `integer`, default: `5`. Droplets with UMI counts below this number are completely \nexcluded from the analysis. This can help identify the correct \nprior for empty droplet counts in the rare case where empty \ncounts are extremely high (over 200).\n"
            ,
                "default":5
            }
    

        ,
                "z_dim": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `64`. Dimension of latent variable z",
                "help_text": "Type: `integer`, default: `64`. Dimension of latent variable z.\n"
            ,
                "default":64
            }
    

        ,
                "z_layers": {
                "type":
                "string",
                "description": "Type: List of `integer`, default: `512`, multiple_sep: `\";\"`. Dimension of hidden layers in the encoder for z",
                "help_text": "Type: List of `integer`, default: `512`, multiple_sep: `\";\"`. Dimension of hidden layers in the encoder for z.\n"
            ,
                "default":"512"
            }
    

        ,
                "training_fraction": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.9`. Training detail: the fraction of the data used for training",
                "help_text": "Type: `double`, default: `0.9`. Training detail: the fraction of the data used for training.\nThe rest is never seen by the inference algorithm. Speeds up learning.\n"
            ,
                "default":0.9
            }
    

        ,
                "empty_drop_training_fraction": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.2`. Training detail: the fraction of the training data each epoch that \nis drawn (randomly sampled) from surely empty droplets",
                "help_text": "Type: `double`, default: `0.2`. Training detail: the fraction of the training data each epoch that \nis drawn (randomly sampled) from surely empty droplets.\n"
            ,
                "default":0.2
            }
    

        ,
                "ignore_features": {
                "type":
                "string",
                "description": "Type: List of `integer`, multiple_sep: `\";\"`. Integer indices of features to ignore entirely",
                "help_text": "Type: List of `integer`, multiple_sep: `\";\"`. Integer indices of features to ignore entirely. In the output\ncount matrix, the counts for these features will be unchanged.\n"
            
            }
    

        ,
                "fpr": {
                "type":
                "string",
                "description": "Type: List of `double`, default: `0.01`, multiple_sep: `\";\"`. Target \u0027delta\u0027 false positive rate in [0, 1)",
                "help_text": "Type: List of `double`, default: `0.01`, multiple_sep: `\";\"`. Target \u0027delta\u0027 false positive rate in [0, 1). Use 0 for a cohort\nof samples which will be jointly analyzed for differential expression.\nA false positive is a true signal count that is erroneously removed.\nMore background removal is accompanied by more signal removal at\nhigh values of FPR. You can specify multiple values, which will\ncreate multiple output files.\n"
            ,
                "default":"0.01"
            }
    

        ,
                "exclude_feature_types": {
                "type":
                "string",
                "description": "Type: List of `string`, multiple_sep: `\";\"`. Feature types to ignore during the analysis",
                "help_text": "Type: List of `string`, multiple_sep: `\";\"`. Feature types to ignore during the analysis. These features will\nbe left unchanged in the output file.\n"
            
            }
    

        ,
                "projected_ambient_count_threshold": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.1`. Controls how many features are included in the analysis, which\ncan lead to a large speedup",
                "help_text": "Type: `double`, default: `0.1`. Controls how many features are included in the analysis, which\ncan lead to a large speedup. If a feature is expected to have less\nthan PROJECTED_AMBIENT_COUNT_THRESHOLD counts total in all cells\n(summed), then that gene is excluded, and it will be unchanged\nin the output count matrix. For example, \nPROJECTED_AMBIENT_COUNT_THRESHOLD = 0 will include all features\nwhich have even a single count in any empty droplet.\n"
            ,
                "default":0.1
            }
    

        ,
                "learning_rate": {
                "type":
                "number",
                "description": "Type: `double`, default: `1.0E-4`. Training detail: lower learning rate for inference",
                "help_text": "Type: `double`, default: `1.0E-4`. Training detail: lower learning rate for inference.\nA OneCycle learning rate schedule is used, where the\nupper learning rate is ten times this value. (For this\nvalue, probably do not exceed 1e-3).\n"
            ,
                "default":0.0001
            }
    

        ,
                "final_elbo_fail_fraction": {
                "type":
                "number",
                "description": "Type: `double`. Training is considered to have failed if \n(best_test_ELBO - final_test_ELBO)/(best_test_ELBO - initial_test_ELBO) \u003e FINAL_ELBO_FAIL_FRACTION",
                "help_text": "Type: `double`. Training is considered to have failed if \n(best_test_ELBO - final_test_ELBO)/(best_test_ELBO - initial_test_ELBO) \u003e FINAL_ELBO_FAIL_FRACTION.\nTraining will automatically re-run if --num-training-tries \u003e 1.\nBy default, will not fail training based on final_training_ELBO.\n"
            
            }
    

        ,
                "epoch_elbo_fail_fraction": {
                "type":
                "number",
                "description": "Type: `double`. Training is considered to have failed if \n(previous_epoch_test_ELBO - current_epoch_test_ELBO)/(previous_epoch_test_ELBO - initial_train_ELBO) \u003e EPOCH_ELBO_FAIL_FRACTION",
                "help_text": "Type: `double`. Training is considered to have failed if \n(previous_epoch_test_ELBO - current_epoch_test_ELBO)/(previous_epoch_test_ELBO - initial_train_ELBO) \u003e EPOCH_ELBO_FAIL_FRACTION.\nTraining will automatically re-run if --num-training-tries \u003e 1.\nBy default, will not fail training based on epoch_training_ELBO.\n"
            
            }
    

        ,
                "num_training_tries": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1`. Number of times to attempt to train the model",
                "help_text": "Type: `integer`, default: `1`. Number of times to attempt to train the model. At each subsequent attempt,\nthe learning rate is multiplied by LEARNING_RATE_RETRY_MULT.\n"
            ,
                "default":1
            }
    

        ,
                "learning_rate_retry_mult": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.2`. Learning rate is multiplied by this amount each time a new training\nattempt is made",
                "help_text": "Type: `double`, default: `0.2`. Learning rate is multiplied by this amount each time a new training\nattempt is made. (This parameter is only used if training fails based\non EPOCH_ELBO_FAIL_FRACTION or FINAL_ELBO_FAIL_FRACTION and\nNUM_TRAINING_TRIES is \u003e 1.) \n"
            ,
                "default":0.2
            }
    

        ,
                "posterior_batch_size": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `128`. Training detail: size of batches when creating the posterior",
                "help_text": "Type: `integer`, default: `128`. Training detail: size of batches when creating the posterior.\nReduce this to avoid running out of GPU memory creating the posterior\n(will be slower).\n"
            ,
                "default":128
            }
    

        ,
                "posterior_regulation": {
                "type":
                "string",
                "description": "Type: `string`, choices: ``PRq`, `PRmu`, `PRmu_gene``. Posterior regularization method",
                "help_text": "Type: `string`, choices: ``PRq`, `PRmu`, `PRmu_gene``. Posterior regularization method. (For experts: not required for normal usage,\nsee documentation). \n\n* PRq is approximate quantile-targeting.\n* PRmu is approximate mean-targeting aggregated over genes (behavior of v0.2.0).\n* PRmu_gene is approximate mean-targeting per gene.\n",
                "enum": ["PRq", "PRmu", "PRmu_gene"]
            
            
            }
    

        ,
                "alpha": {
                "type":
                "number",
                "description": "Type: `double`. Tunable parameter alpha for the PRq posterior regularization method\n(not normally used: see documentation)",
                "help_text": "Type: `double`. Tunable parameter alpha for the PRq posterior regularization method\n(not normally used: see documentation).\n"
            
            }
    

        ,
                "q": {
                "type":
                "number",
                "description": "Type: `double`. Tunable parameter q for the CDF threshold estimation method (not\nnormally used: see documentation)",
                "help_text": "Type: `double`. Tunable parameter q for the CDF threshold estimation method (not\nnormally used: see documentation).\n"
            
            }
    

        ,
                "estimator": {
                "type":
                "string",
                "description": "Type: `string`, default: `mckp`, choices: ``map`, `mean`, `cdf`, `sample`, `mckp``. Output denoised count estimation method",
                "help_text": "Type: `string`, default: `mckp`, choices: ``map`, `mean`, `cdf`, `sample`, `mckp``. Output denoised count estimation method. (For experts: not required\nfor normal usage, see documentation).\n",
                "enum": ["map", "mean", "cdf", "sample", "mckp"]
            
            ,
                "default":"mckp"
            }
    

        ,
                "estimator_multiple_cpu": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Including the flag --estimator-multiple-cpu will use more than one\nCPU to compute the MCKP output count estimator in parallel (does nothing\nfor other estimators)",
                "help_text": "Type: `boolean_true`, default: `false`. Including the flag --estimator-multiple-cpu will use more than one\nCPU to compute the MCKP output count estimator in parallel (does nothing\nfor other estimators).\n"
            ,
                "default":false
            }
    

        ,
                "constant_learning_rate": {
                "type":
                "boolean",
                "description": "Type: `boolean`. Including the flag --constant-learning-rate will use the ClippedAdam\noptimizer instead of the OneCycleLR learning rate schedule, which is\nthe default",
                "help_text": "Type: `boolean`. Including the flag --constant-learning-rate will use the ClippedAdam\noptimizer instead of the OneCycleLR learning rate schedule, which is\nthe default. Learning is faster with the OneCycleLR schedule.\nHowever, training can easily be continued from a checkpoint for more\nepochs than the initial command specified when using ClippedAdam. On\nthe other hand, if using the OneCycleLR schedule with 150 epochs\nspecified, it is not possible to pick up from that final checkpoint\nand continue training until 250 epochs.\n"
            
            }
    

        ,
                "debug": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Including the flag --debug will log extra messages useful for debugging",
                "help_text": "Type: `boolean_true`, default: `false`. Including the flag --debug will log extra messages useful for debugging.\n"
            ,
                "default":false
            }
    

        ,
                "cuda": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Including the flag --cuda will run the inference on a\nGPU",
                "help_text": "Type: `boolean_true`, default: `false`. Including the flag --cuda will run the inference on a\nGPU.\n"
            ,
                "default":false
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
