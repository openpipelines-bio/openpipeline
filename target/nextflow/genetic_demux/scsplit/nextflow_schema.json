{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "scsplit",
"description": "scsplit is a genotype-free demultiplexing methode of pooled single-cell RNA-seq, using a hidden state model for identifying genetically distinct samples within a mixed population.",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "vcf": {
                "type":
                "string",
                "description": "Type: `file`. VCF from mixed BAM",
                "help_text": "Type: `file`. VCF from mixed BAM"
            
            }
    

        ,
                "bam": {
                "type":
                "string",
                "description": "Type: `file`. mixed sample BAM",
                "help_text": "Type: `file`. mixed sample BAM"
            
            }
    

        ,
                "bar": {
                "type":
                "string",
                "description": "Type: `file`. barcodes whitelist",
                "help_text": "Type: `file`. barcodes whitelist"
            
            }
    

        ,
                "tag": {
                "type":
                "string",
                "description": "Type: `string`, default: `CB`. tag for barcode",
                "help_text": "Type: `string`, default: `CB`. tag for barcode"
            ,
                "default": "CB"
            }
    

        ,
                "com": {
                "type":
                "string",
                "description": "Type: `file`. common SNVs",
                "help_text": "Type: `file`. common SNVs"
            
            }
    

        ,
                "num": {
                "type":
                "integer",
                "description": "Type: `integer`. expected number of mixed samples",
                "help_text": "Type: `integer`. expected number of mixed samples"
            
            }
    

        ,
                "sub": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `10`. maximum number of subpopulations in autodetect mode",
                "help_text": "Type: `integer`, default: `10`. maximum number of subpopulations in autodetect mode"
            ,
                "default": "10"
            }
    

        ,
                "ems": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `30`. number of EM repeats to avoid local maximum",
                "help_text": "Type: `integer`, default: `30`. number of EM repeats to avoid local maximum"
            ,
                "default": "30"
            }
    

        ,
                "dbl": {
                "type":
                "number",
                "description": "Type: `double`. correction for doublets",
                "help_text": "Type: `double`. correction for doublets. There will be no refinement on the results if this optional parameter is not specified or specified percentage is less than doublet rates detected during the run."
            
            }
    

        ,
                "vcf_known": {
                "type":
                "string",
                "description": "Type: `file`. known individual genotypes to limit distinguishing variants to available variants, so that users do not need to redo genotyping on selected variants, otherwise any variants could be selected as distinguishing variants",
                "help_text": "Type: `file`. known individual genotypes to limit distinguishing variants to available variants, so that users do not need to redo genotyping on selected variants, otherwise any variants could be selected as distinguishing variants."
            
            }
    

        ,
                "geno": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. generate sample genotypes based on the split result",
                "help_text": "Type: `boolean_true`, default: `false`. generate sample genotypes based on the split result."
            ,
                "default": "False"
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `scSplit_out`. Output directory",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `scSplit_out`. Output directory"
            ,
                "default": "$id.$key.output.output"
            }
    

        ,
                "ref": {
                "type":
                "string",
                "description": "Type: `string`. output Ref count matrix",
                "help_text": "Type: `string`. output Ref count matrix"
            
            }
    

        ,
                "alt": {
                "type":
                "string",
                "description": "Type: `string`. output Alt count matrix",
                "help_text": "Type: `string`. output Alt count matrix"
            
            }
    

        ,
                "psc": {
                "type":
                "string",
                "description": "Type: `string`. generated P(S|C)",
                "help_text": "Type: `string`. generated P(S|C)"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
