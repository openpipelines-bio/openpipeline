{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "dsc_pileup",
"description": "Dsc-pileup is a software tool to pileup reads and corresponding base quality \nfor each overlapping SNPs and each barcode. By using pileup files,\nit would allow us to run demuxlet/freemuxlet pretty fast multiple times\nwithout going over the BAM file again.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "sam": {
                "type":
                "string",
                "description": "Type: `file`. Input SAM/BAM/CRAM file",
                "help_text": "Type: `file`. Input SAM/BAM/CRAM file. Must be sorted by coordinates and indexed."
            
            }
    

        ,
                "tag_group": {
                "type":
                "string",
                "description": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups",
                "help_text": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups. For 10x genomics, use CB."
            ,
                "default":"CB"
            }
    

        ,
                "tag_umi": {
                "type":
                "string",
                "description": "Type: `string`, default: `UB`. Tag representing UMIs",
                "help_text": "Type: `string`, default: `UB`. Tag representing UMIs. For 10x genomiucs, use UB."
            ,
                "default":"UB"
            }
    

        ,
                "exclude_flag": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1796`. SAM/BAM FLAGs to be excluded",
                "help_text": "Type: `integer`, default: `1796`. SAM/BAM FLAGs to be excluded."
            ,
                "default":1796
            }
    

        ,
                "vcf": {
                "type":
                "string",
                "description": "Type: `file`. Input VCF/BCF file for dsc-pileup, containing the AC and AN field",
                "help_text": "Type: `file`. Input VCF/BCF file for dsc-pileup, containing the AC and AN field."
            
            }
    

        ,
                "sm": {
                "type":
                "string",
                "description": "Type: `string`. List of sample IDs to compare to (default: use all)",
                "help_text": "Type: `string`. List of sample IDs to compare to (default: use all)."
            
            }
    

        ,
                "sm_list": {
                "type":
                "string",
                "description": "Type: `string`. File containing the list of sample IDs to compare",
                "help_text": "Type: `string`. File containing the list of sample IDs to compare."
            
            }
    

        ,
                "sam_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM",
                "help_text": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM."
            ,
                "default":1000000
            }
    

        ,
                "vcf_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF",
                "help_text": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF."
            ,
                "default":1000
            }
    

        ,
                "skip_umi": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Do not generate [prefix]",
                "help_text": "Type: `boolean_true`, default: `false`. Do not generate [prefix].umi.gz file, which stores the regions covered by each barcode/UMI pair."
            ,
                "default":false
            }
    

        ,
                "cap_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `40`. Maximum base quality (higher BQ will be capped)",
                "help_text": "Type: `integer`, default: `40`. Maximum base quality (higher BQ will be capped)."
            ,
                "default":40
            }
    

        ,
                "min_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)",
                "help_text": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)."
            ,
                "default":13
            }
    

        ,
                "min_mq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)",
                "help_text": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)."
            ,
                "default":20
            }
    

        ,
                "min_td": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)",
                "help_text": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)."
            ,
                "default":0
            }
    

        ,
                "excl_flag": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded for SNP overlapping Read filtering Options",
                "help_text": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded for SNP overlapping Read filtering Options."
            ,
                "default":3844
            }
    

        ,
                "group_list": {
                "type":
                "string",
                "description": "Type: `string`. List of tag readgroup/cell barcode to consider in this run",
                "help_text": "Type: `string`. List of tag readgroup/cell barcode to consider in this run. All other barcodes will be ignored. This is useful for parallelized run."
            
            }
    

        ,
                "min_total": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered."
            ,
                "default":0
            }
    

        ,
                "min_uniq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of unique reads (determined by UMI/SNP pair) for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of unique reads (determined by UMI/SNP pair) for a droplet/cell to be considered."
            ,
                "default":0
            }
    

        ,
                "min_snp": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered."
            ,
                "default":0
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `demux`. Output directory",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `demux`. Output directory"
            ,
                "default":"$id.$key.output.output"
            }
    

        ,
                "out": {
                "type":
                "string",
                "description": "Type: `string`, example: `demuxlet_dsc`. dsc-pileup output file prefix",
                "help_text": "Type: `string`, example: `demuxlet_dsc`. dsc-pileup output file prefix"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
