{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "demuxlet",
"description": "Demuxlet is a software tool to deconvolute sample identity and identify multiplets when\nmultiple samples are pooled by barcoded single cell sequencing. If external genotyping data\nfor each sample is available (e.g. from SNP arrays), demuxlet would be recommended. Be careful\nthat the parameters on the github is not in line with the newest help version.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "sam": {
                "type":
                "string",
                "description": "Type: `file`. Input SAM/BAM/CRAM file",
                "help_text": "Type: `file`. Input SAM/BAM/CRAM file. Must be sorted by coordinates and indexed."
            
            }
    

        ,
                "tag_group": {
                "type":
                "string",
                "description": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups",
                "help_text": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups. For 10x genomics, use CB."
            ,
                "default":"CB"
            }
    

        ,
                "tag_umi": {
                "type":
                "string",
                "description": "Type: `string`, default: `UB`. Tag representing UMIs",
                "help_text": "Type: `string`, default: `UB`. Tag representing UMIs. For 10x genomiucs, use UB."
            ,
                "default":"UB"
            }
    

        ,
                "plp": {
                "type":
                "string",
                "description": "Type: `string`. Input pileup format",
                "help_text": "Type: `string`. Input pileup format. If the value is a string, it will be considered as the path of the plp file. If the value is boolean true, it will perform dscpileup."
            
            }
    

        ,
                "vcf": {
                "type":
                "string",
                "description": "Type: `file`. Input VCF/BCF file, containing the individual genotypes (GT), posterior probability (GP), or genotype likelihood (PL)",
                "help_text": "Type: `file`. Input VCF/BCF file, containing the individual genotypes (GT), posterior probability (GP), or genotype likelihood (PL)."
            
            }
    

        ,
                "field": {
                "type":
                "string",
                "description": "Type: `string`, default: `GT`. FORMAT field to extract the genotype, likelihood, or posterior from",
                "help_text": "Type: `string`, default: `GT`. FORMAT field to extract the genotype, likelihood, or posterior from"
            ,
                "default":"GT"
            }
    

        ,
                "geno_error_offset": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.1`. Offset of genotype error rate",
                "help_text": "Type: `double`, default: `0.1`. Offset of genotype error rate. [error] = [offset] + [1-offset]*[coeff]*[1-r2]"
            ,
                "default":0.1
            }
    

        ,
                "geno_error_coeff": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.0`. Slope of genotype error rate",
                "help_text": "Type: `double`, default: `0.0`. Slope of genotype error rate. [error] = [offset] + [1-offset]*[coeff]*[1-r2]"
            ,
                "default":0.0
            }
    

        ,
                "r2_info": {
                "type":
                "string",
                "description": "Type: `string`, default: `R2`. INFO field name representing R2 value",
                "help_text": "Type: `string`, default: `R2`. INFO field name representing R2 value. Used for representing imputation quality."
            ,
                "default":"R2"
            }
    

        ,
                "min_mac": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1`. Minimum minor allele frequency",
                "help_text": "Type: `integer`, default: `1`. Minimum minor allele frequency."
            ,
                "default":1
            }
    

        ,
                "min_call_rate": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Minimum call rate",
                "help_text": "Type: `double`, default: `0.5`. Minimum call rate."
            ,
                "default":0.5
            }
    

        ,
                "alpha": {
                "type":
                "string",
                "description": "Type: `string`, default: `0.5`. Grid of alpha to search for (default is 0",
                "help_text": "Type: `string`, default: `0.5`. Grid of alpha to search for (default is 0.1, 0.2, 0.3, 0.4, 0.5)"
            ,
                "default":"0.5"
            }
    

        ,
                "doublet_prior": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Prior of doublet",
                "help_text": "Type: `double`, default: `0.5`. Prior of doublet"
            ,
                "default":0.5
            }
    

        ,
                "sm": {
                "type":
                "string",
                "description": "Type: `string`. List of sample IDs to compare to (default: use all)",
                "help_text": "Type: `string`. List of sample IDs to compare to (default: use all)."
            
            }
    

        ,
                "sm_list": {
                "type":
                "string",
                "description": "Type: `string`. File containing the list of sample IDs to compare",
                "help_text": "Type: `string`. File containing the list of sample IDs to compare."
            
            }
    

        ,
                "sam_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM",
                "help_text": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM."
            ,
                "default":1000000
            }
    

        ,
                "vcf_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF",
                "help_text": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF."
            ,
                "default":1000
            }
    

        ,
                "cap_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)",
                "help_text": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)."
            ,
                "default":20
            }
    

        ,
                "min_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)",
                "help_text": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)."
            ,
                "default":13
            }
    

        ,
                "min_mq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)",
                "help_text": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)."
            ,
                "default":20
            }
    

        ,
                "min_td": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)",
                "help_text": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)."
            ,
                "default":0
            }
    

        ,
                "excl_flag": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded",
                "help_text": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded."
            ,
                "default":3844
            }
    

        ,
                "group_list": {
                "type":
                "string",
                "description": "Type: `string`. List of tag readgroup/cell barcode to consider in this run",
                "help_text": "Type: `string`. List of tag readgroup/cell barcode to consider in this run. All other barcodes will be ignored. This is useful for parallelized run."
            
            }
    

        ,
                "min_total": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered."
            ,
                "default":0
            }
    

        ,
                "min_snp": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered."
            ,
                "default":0
            }
    

        ,
                "min_umi": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered."
            ,
                "default":0
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `demux`. Output directory",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `demux`. Output directory"
            ,
                "default":"$id.$key.output.output"
            }
    

        ,
                "out": {
                "type":
                "string",
                "description": "Type: `string`, example: `demuxlet`. demuxlet output file prefix",
                "help_text": "Type: `string`, example: `demuxlet`. demuxlet output file prefix"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
