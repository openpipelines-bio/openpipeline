{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cross_check_genes",
"description": "Cross-check genes with pre-trained scGPT model.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. The input h5mu file containing of pre-processed data",
                "help_text": "Type: `file`, required, example: `input.h5mu`. The input h5mu file containing of pre-processed data.\n"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. The modality key of the MuData object containing the RNA AnnData object",
                "help_text": "Type: `string`, default: `rna`. The modality key of the MuData object containing the RNA AnnData object.\n"
            ,
                "default":"rna"
            }
    

        ,
                "vocab_file": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `resources_test/scgpt/vocab.json`. Model vocabulary file path",
                "help_text": "Type: `file`, required, example: `resources_test/scgpt/vocab.json`. Model vocabulary file path.\n"
            
            }
    

        ,
                "input_var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`, example: `gene_name`. The name of the adata",
                "help_text": "Type: `string`, example: `gene_name`. The name of the adata.var column containing gene names. By default the .var index will be used.\n"
            
            }
    

        ,
                "var_input": {
                "type":
                "string",
                "description": "Type: `string`. ",
                "help_text": "Type: `string`. .var column containing highly variable genes. If provided, will only cross-check HVG filtered genes with model vocabulary."
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output cross-checked anndata file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output cross-checked anndata file.\n"
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "output_var_filter": {
                "type":
                "string",
                "description": "Type: `string`, default: `id_in_vocab`. In which ",
                "help_text": "Type: `string`, default: `id_in_vocab`. In which .var slot to store a boolean array corresponding to which observations should be filtered out based on HVG and model vocabulary."
            ,
                "default":"id_in_vocab"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. The padding token used in the model",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. The padding token used in the model.\n"
            ,
                "default":"<pad>"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
