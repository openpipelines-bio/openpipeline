{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "embedding",
"description": "Generation of cell embeddings for the integration of single cell transcriptomic count data using scGPT.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. The input h5mu file containing tokenized gene and count data",
                "help_text": "Type: `file`, required, example: `input.h5mu`. The input h5mu file containing tokenized gene and count data. \n"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default":"rna"
            }
    

        ,
                "model": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `best_model.pt`. Path to scGPT model file",
                "help_text": "Type: `file`, required, example: `best_model.pt`. Path to scGPT model file.\n"
            
            }
    

        ,
                "model_vocab": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `vocab.json`. Path to scGPT model vocabulary file",
                "help_text": "Type: `file`, required, example: `vocab.json`. Path to scGPT model vocabulary file.\n"
            
            }
    

        ,
                "model_config": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `args.json`. Path to scGPT model config file",
                "help_text": "Type: `file`, required, example: `args.json`. Path to scGPT model config file.\n"
            
            }
    

        ,
                "obsm_gene_tokens": {
                "type":
                "string",
                "description": "Type: `string`, default: `gene_id_tokens`, example: `values.pt`. The key of the ",
                "help_text": "Type: `string`, default: `gene_id_tokens`, example: `values.pt`. The key of the .obsm array containing the gene token ids\n"
            ,
                "default":"gene_id_tokens"
            }
    

        ,
                "obsm_tokenized_values": {
                "type":
                "string",
                "description": "Type: `string`, default: `values_tokenized`. The key of the ",
                "help_text": "Type: `string`, default: `values_tokenized`. The key of the .obsm array containing the count values of the tokenized genes\n"
            ,
                "default":"values_tokenized"
            }
    

        ,
                "obsm_padding_mask": {
                "type":
                "string",
                "description": "Type: `string`, default: `padding_mask`. The key of the ",
                "help_text": "Type: `string`, default: `padding_mask`. The key of the .obsm array containing the padding mask.\n"
            ,
                "default":"padding_mask"
            }
    

        ,
                "var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`. The name of the ",
                "help_text": "Type: `string`. The name of the .var column containing gene names. When no gene_name_layer is provided, the .var index will be used.\n"
            
            }
    

        ,
                "obs_batch_label": {
                "type":
                "string",
                "description": "Type: `string`. The name of the adata",
                "help_text": "Type: `string`. The name of the adata.obs column containing the batch labels. Must be provided when \u0027dsbn\u0027 is set to True.\n"
            
            }
    

        ,
                "finetuned_checkpoints_key": {
                "type":
                "string",
                "description": "Type: `string`, example: `model_state_dict`. Key in the model file containing the pretrained checkpoints",
                "help_text": "Type: `string`, example: `model_state_dict`. Key in the model file containing the pretrained checkpoints. Only relevant for fine-tuned models.\n"
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Path to output anndata file containing pre-processed data as well as scGPT embeddings",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Path to output anndata file containing pre-processed data as well as scGPT embeddings.\n"
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression algorithm to use for the output h5mu file",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression algorithm to use for the output h5mu file.\n",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obsm_embeddings": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_scGPT`. The name of the adata",
                "help_text": "Type: `string`, default: `X_scGPT`. The name of the adata.obsm array to which scGPT embeddings will be written.\n"
            ,
                "default":"X_scGPT"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. The token to be used for padding",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. The token to be used for padding.\n"
            ,
                "default":"<pad>"
            }
    

        ,
                "pad_value": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `-2`. The value of the padding token",
                "help_text": "Type: `integer`, default: `-2`. The value of the padding token.\n"
            ,
                "default":-2
            }
    

        ,
                "dsbn": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to apply domain-specific batch normalization for generating embeddings",
                "help_text": "Type: `boolean`, default: `true`. Whether to apply domain-specific batch normalization for generating embeddings. When set to True, \u0027obs_batch_labels\u0027 must be set as well.\n"
            ,
                "default":true
            }
    

        ,
                "batch_size": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `64`. The batch size to be used for inference\n",
                "help_text": "Type: `integer`, default: `64`. The batch size to be used for inference\n"
            ,
                "default":64
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
