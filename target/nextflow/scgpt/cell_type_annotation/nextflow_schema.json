{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cell_type_annotation",
"description": "Annotate gene expression data with cell type classes through the scGPT model.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output mudata file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output mudata file.\n"
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, default: `gzip`, example: `gzip`. The compression algorithm to use for the output h5mu file",
                "help_text": "Type: `string`, default: `gzip`, example: `gzip`. The compression algorithm to use for the output h5mu file.\n"
            ,
                "default":"gzip"
            }
    

        ,
                "output_obs_predictions": {
                "type":
                "string",
                "description": "Type: `string`, default: `scgpt_pred`. The name of the adata",
                "help_text": "Type: `string`, default: `scgpt_pred`. The name of the adata.obs column to write predicted cell type labels to.\n"
            ,
                "default":"scgpt_pred"
            }
    

        ,
                "output_obs_probability": {
                "type":
                "string",
                "description": "Type: `string`, default: `scgpt_probability`. The name of the adata",
                "help_text": "Type: `string`, default: `scgpt_probability`. The name of the adata.obs column to write the probabilities of the predicted cell type labels to.\n"
            ,
                "default":"scgpt_probability"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. The padding token used in the model",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. The padding token used in the model.\n"
            ,
                "default":"<pad>"
            }
    

        ,
                "pad_value": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `-2`. The value of the padding",
                "help_text": "Type: `integer`, default: `-2`. The value of the padding.\n"
            ,
                "default":-2
            }
    

        ,
                "n_input_bins": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `51`. The number of input bins",
                "help_text": "Type: `integer`, default: `51`. The number of input bins.\n"
            ,
                "default":51
            }
    

        ,
                "batch_size": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `64`. The batch size",
                "help_text": "Type: `integer`, default: `64`. The batch size. \n"
            ,
                "default":64
            }
    

        ,
                "dsbn": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to use domain-specific batch normalization",
                "help_text": "Type: `boolean`, default: `true`. Whether to use domain-specific batch normalization.\n"
            ,
                "default":true
            }
    

        ,
                "seed": {
                "type":
                "integer",
                "description": "Type: `integer`. Seed for random number generation",
                "help_text": "Type: `integer`. Seed for random number generation. If not specified, no seed is used.\n"
            
            }
    

}
},
    
    
    "model input" : {
    "title": "Model input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "model": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `best_model.pt`. The model file containing checkpoints and cell type label mapper",
                "help_text": "Type: `file`, required, example: `best_model.pt`. The model file containing checkpoints and cell type label mapper.\n"
            
            }
    

        ,
                "model_config": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `args.json`. The model configuration file",
                "help_text": "Type: `file`, required, example: `args.json`. The model configuration file. \n"
            
            }
    

        ,
                "model_vocab": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `vocab.json`. Model vocabulary file directory",
                "help_text": "Type: `file`, required, example: `vocab.json`. Model vocabulary file directory.\n"
            
            }
    

        ,
                "finetuned_checkpoints_key": {
                "type":
                "string",
                "description": "Type: `string`, default: `model_state_dict`. Key in the model file containing the pretrained checkpoints",
                "help_text": "Type: `string`, default: `model_state_dict`. Key in the model file containing the pretrained checkpoints.\n"
            ,
                "default":"model_state_dict"
            }
    

        ,
                "label_mapper_key": {
                "type":
                "string",
                "description": "Type: `string`, default: `id_to_class`. Key in the model file containing the cell type class to label mapper dictionary",
                "help_text": "Type: `string`, default: `id_to_class`. Key in the model file containing the cell type class to label mapper dictionary.\n"
            ,
                "default":"id_to_class"
            }
    

}
},
    
    
    "query input" : {
    "title": "Query input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `scgpt_preprocess_ouput.h5mu`. The input h5mu file containing of data that have been pre-processed (normalized, binned, genes cross-checked and tokenized)",
                "help_text": "Type: `file`, required, example: `scgpt_preprocess_ouput.h5mu`. The input h5mu file containing of data that have been pre-processed (normalized, binned, genes cross-checked and tokenized).\n"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default":"rna"
            }
    

        ,
                "obs_batch_label": {
                "type":
                "string",
                "description": "Type: `string`. The name of the adata",
                "help_text": "Type: `string`. The name of the adata.obs column containing the batch labels. Required if dsbn is set to true.\n"
            
            }
    

        ,
                "obsm_gene_tokens": {
                "type":
                "string",
                "description": "Type: `string`, default: `gene_id_tokens`. The key of the ",
                "help_text": "Type: `string`, default: `gene_id_tokens`. The key of the .obsm array containing the gene token ids\n"
            ,
                "default":"gene_id_tokens"
            }
    

        ,
                "obsm_tokenized_values": {
                "type":
                "string",
                "description": "Type: `string`, default: `values_tokenized`. The key of the ",
                "help_text": "Type: `string`, default: `values_tokenized`. The key of the .obsm array containing the count values of the tokenized genes\n"
            ,
                "default":"values_tokenized"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/model input"
    },

    {
    "$ref": "#/definitions/query input"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
