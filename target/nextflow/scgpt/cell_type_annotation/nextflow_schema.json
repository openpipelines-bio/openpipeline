{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "cell_type_annotation",
  "description": "Annotate gene expression data with cell type classes through the scGPT model.\n",
  "type": "object",
  "$defs": {
    "Dataset input": {
      "title": "Dataset input",
      "type": "object",
      "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
      "properties": {
        "param_list": {
          "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
          "default": "",
          "format": "file-path",
          "mimetype": "text/csv",
          "pattern": "^\\S+\\.csv$"
        }
      }
    },
    "outputs": {
      "title": "Outputs",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [
          "output"
        ],
        "output": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The output mudata file",
          "help_text": "Type: `file`, multiple: `False`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. ",
          "default": "$id.$key.output.h5mu"
        },
        "output_obs_predictions": {
          "type": "string",
          "description": "The name of the adata",
          "help_text": "Type: `string`, multiple: `False`, default: `scgpt_pred`. ",
          "default": "scgpt_pred"
        },
        "output_obs_probability": {
          "type": "string",
          "description": "The name of the adata",
          "help_text": "Type: `string`, multiple: `False`, default: `scgpt_probability`. ",
          "default": "scgpt_probability"
        },
        "output_compression": {
          "type": "string",
          "description": "Compression format to use for the output AnnData and/or Mudata objects",
          "help_text": "Type: `string`, multiple: `False`, example: `gzip`, choices: ``gzip`, `lzf``. ",
          "enum": [
            "gzip",
            "lzf"
          ]
        }
      }
    },
    "arguments": {
      "title": "Arguments",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [],
        "pad_token": {
          "type": "string",
          "description": "The padding token used in the model",
          "help_text": "Type: `string`, multiple: `False`, default: `<pad>`. ",
          "default": "<pad>"
        },
        "pad_value": {
          "type": "integer",
          "description": "The value of the padding",
          "help_text": "Type: `integer`, multiple: `False`, default: `-2`. ",
          "default": -2
        },
        "n_input_bins": {
          "type": "integer",
          "description": "The number of input bins",
          "help_text": "Type: `integer`, multiple: `False`, default: `51`. ",
          "default": 51
        },
        "batch_size": {
          "type": "integer",
          "description": "The batch size",
          "help_text": "Type: `integer`, multiple: `False`, default: `64`. ",
          "default": 64
        },
        "dsbn": {
          "type": "boolean",
          "description": "Whether to use domain-specific batch normalization",
          "help_text": "Type: `boolean`, multiple: `False`, default: `true`. ",
          "default": true
        },
        "seed": {
          "type": "integer",
          "description": "Seed for random number generation",
          "help_text": "Type: `integer`, multiple: `False`. "
        }
      }
    },
    "model input": {
      "title": "Model input",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [
          "model",
          "model_config",
          "model_vocab"
        ],
        "model": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The model file containing checkpoints and cell type label mapper",
          "help_text": "Type: `file`, multiple: `False`, required, example: `best_model.pt`. "
        },
        "model_config": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The model configuration file",
          "help_text": "Type: `file`, multiple: `False`, required, example: `args.json`. "
        },
        "model_vocab": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "Model vocabulary file directory",
          "help_text": "Type: `file`, multiple: `False`, required, example: `vocab.json`. "
        },
        "finetuned_checkpoints_key": {
          "type": "string",
          "description": "Key in the model file containing the pretrained checkpoints",
          "help_text": "Type: `string`, multiple: `False`, default: `model_state_dict`. ",
          "default": "model_state_dict"
        },
        "label_mapper_key": {
          "type": "string",
          "description": "Key in the model file containing the cell type class to label mapper dictionary",
          "help_text": "Type: `string`, multiple: `False`, default: `id_to_class`. ",
          "default": "id_to_class"
        }
      }
    },
    "query input": {
      "title": "Query input",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [
          "input"
        ],
        "input": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The input h5mu file containing of data that have been pre-processed (normalized, binned, genes cross-checked and tokenized)",
          "help_text": "Type: `file`, multiple: `False`, required, example: `scgpt_preprocess_ouput.h5mu`. "
        },
        "modality": {
          "type": "string",
          "description": "",
          "help_text": "Type: `string`, multiple: `False`, default: `rna`. ",
          "default": "rna"
        },
        "obs_batch_label": {
          "type": "string",
          "description": "The name of the adata",
          "help_text": "Type: `string`, multiple: `False`. "
        },
        "obsm_gene_tokens": {
          "type": "string",
          "description": "The key of the ",
          "help_text": "Type: `string`, multiple: `False`, default: `gene_id_tokens`. ",
          "default": "gene_id_tokens"
        },
        "obsm_tokenized_values": {
          "type": "string",
          "description": "The key of the ",
          "help_text": "Type: `string`, multiple: `False`, default: `values_tokenized`. ",
          "default": "values_tokenized"
        }
      }
    },
    "nextflow input-output arguments": {
      "title": "Nextflow input-output arguments",
      "type": "object",
      "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
      "properties": {
        "required": [],
        "publish_dir": {
          "type": "string",
          "description": "Path to an output directory",
          "help_text": "Type: `string`, multiple: `False`, required, example: `output/`. "
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/outputs"
    },
    {
      "$ref": "#/definitions/arguments"
    },
    {
      "$ref": "#/definitions/model input"
    },
    {
      "$ref": "#/definitions/query input"
    },
    {
      "$ref": "#/definitions/nextflow input-output arguments"
    }
  ]
}
