name: "cellranger_atac_count"
namespace: "mapping"
version: "integration_build"
authors:
- name: "Vladimir Shitov"
  roles:
  - "author"
  info:
    role: "Contributor"
    links:
      email: "vladimir.shitov@helmholtz-muenchen.de"
      github: "vladimirshitov"
      orcid: "0000-0002-1960-8812"
      linkedin: "vladimir-shitov-9a659513b"
    organizations:
    - name: "Helmholtz Munich"
      href: "https://www.helmholtz-munich.de"
      role: "PhD Candidate"
argument_groups:
- name: "Inputs"
  arguments:
  - type: "file"
    name: "--input"
    description: "The fastq.gz files to align. Can also be a single directory containing\
      \ fastq.gz files."
    info: null
    example:
    - "sample_S1_L001_R1_001.fastq.gz"
    - "sample_S1_L001_R2_001.fastq.gz"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--reference"
    description: "The path to Cell Ranger reference tar.gz file. Can also be a directory."
    info: null
    example:
    - "reference.tar.gz"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Outputs"
  arguments:
  - type: "file"
    name: "--output"
    description: "The folder to store the alignment results."
    info: null
    example:
    - "/path/to/output"
    must_exist: true
    create_parent: true
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ";"
- name: "Arguments"
  arguments:
  - type: "string"
    name: "--description"
    description: "Sample description to embed in output files"
    info: null
    default:
    - ""
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--force_cells"
    description: "Define the top N barcodes with the most fragments overlapping peaks\
      \ as cells and override the cell calling algorithm. N must be a positive integer\
      \ <= 20,000. Use this option if the number of cells estimated by Cell Ranger\
      \ ATAC is not consistent with the barcode rank plot"
    info: null
    required: false
    max: 20000
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "file"
    name: "--peaks"
    description: "Override peak caller: specify peaks to use in downstream analyses\
      \ from supplied 3-column BED file. The supplied peaks file must be sorted by\
      \ position and not contain overlapping peaks; comment lines beginning with #\
      \ are allowed"
    info: null
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--dim_reduce"
    description: "Dimensionality reduction mode for clustering"
    info: null
    default:
    - "lsa"
    required: false
    choices:
    - "lsa"
    - "pca"
    - "plsa"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "double"
    name: "--subsample_rate"
    description: "Downsample to preserve this fraction of reads"
    info: null
    example:
    - 0.1
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--lanes"
    description: "bcl2fastq option. Semicolon-delimited series of lanes to demultiplex.\
      \ Use this if you have a sample sheet for an entire flow cell but only want\
      \ to generate a few lanes for further 10x Genomics analysis."
    info: null
    example:
    - "1,3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
resources:
- type: "bash_script"
  path: "script.sh"
  is_executable: true
- type: "file"
  path: "nextflow_labels.config"
  dest: "nextflow_labels.config"
description: "Align fastq files using Cell Ranger ATAC count."
test_resources:
- type: "python_script"
  path: "test.py"
  is_executable: true
- type: "file"
  path: "cellranger_atac_tiny_bcl"
- type: "file"
  path: "setup_logger.py"
- type: "file"
  path: "reference_gencodev41_chr1"
info: null
status: "enabled"
scope:
  image: "public"
  target: "public"
license: "MIT"
links:
  repository: "https://github.com/openpipelines-bio/openpipeline"
  docker_registry: "ghcr.io"
runners:
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
- type: "nextflow"
  id: "nextflow"
  directives:
    label:
    - "highmem"
    - "highcpu"
    - "middisk"
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1000000000.B"
      mem2gb: "memory = 2000000000.B"
      mem5gb: "memory = 5000000000.B"
      mem10gb: "memory = 10000000000.B"
      mem20gb: "memory = 20000000000.B"
      mem50gb: "memory = 50000000000.B"
      mem100gb: "memory = 100000000000.B"
      mem200gb: "memory = 200000000000.B"
      mem500gb: "memory = 500000000000.B"
      mem1tb: "memory = 1000000000000.B"
      mem2tb: "memory = 2000000000000.B"
      mem5tb: "memory = 5000000000000.B"
      mem10tb: "memory = 10000000000000.B"
      mem20tb: "memory = 20000000000000.B"
      mem50tb: "memory = 50000000000000.B"
      mem100tb: "memory = 100000000000000.B"
      mem200tb: "memory = 200000000000000.B"
      mem500tb: "memory = 500000000000000.B"
      mem1gib: "memory = 1073741824.B"
      mem2gib: "memory = 2147483648.B"
      mem4gib: "memory = 4294967296.B"
      mem8gib: "memory = 8589934592.B"
      mem16gib: "memory = 17179869184.B"
      mem32gib: "memory = 34359738368.B"
      mem64gib: "memory = 68719476736.B"
      mem128gib: "memory = 137438953472.B"
      mem256gib: "memory = 274877906944.B"
      mem512gib: "memory = 549755813888.B"
      mem1tib: "memory = 1099511627776.B"
      mem2tib: "memory = 2199023255552.B"
      mem4tib: "memory = 4398046511104.B"
      mem8tib: "memory = 8796093022208.B"
      mem16tib: "memory = 17592186044416.B"
      mem32tib: "memory = 35184372088832.B"
      mem64tib: "memory = 70368744177664.B"
      mem128tib: "memory = 140737488355328.B"
      mem256tib: "memory = 281474976710656.B"
      mem512tib: "memory = 562949953421312.B"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
    script:
    - "includeConfig(\"nextflow_labels.config\")"
  debug: false
  container: "docker"
engines:
- type: "docker"
  id: "docker"
  image: "ghcr.io/data-intuitive/cellranger_atac:2.1"
  target_tag: "integration_build"
  namespace_separator: "/"
  setup:
  - type: "docker"
    run:
    - "DEBIAN_FRONTEND=noninteractive apt update \\\n&& apt upgrade -y && apt install\
      \ -y procps && rm -rf /var/lib/apt/lists/*\n"
  entrypoint: []
  cmd: null
build_info:
  config: "src/mapping/cellranger_atac_count/config.vsh.yaml"
  runner: "nextflow"
  engine: "docker"
  output: "target/nextflow/mapping/cellranger_atac_count"
  executable: "target/nextflow/mapping/cellranger_atac_count/main.nf"
  viash_version: "0.9.4"
  git_commit: "b893eb3abe64b41eb24cc8251d1d7a126bb063ea"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
package_config:
  name: "openpipeline"
  summary: "Best-practice workflows for single-cell multi-omics analyses.\n"
  description: "OpenPipelines are extensible single cell analysis pipelines for reproducible\
    \ and large-scale single cell processing using [Viash](https://viash.io) and [Nextflow](https://www.nextflow.io/).\n\
    \nIn terms of workflows, the following has been made available, but keep in mind\
    \ that\nindividual tools and functionality can be executed as standalone components\
    \ as well.\n\n  * Demultiplexing: conversion of raw sequencing data to FASTQ objects.\n\
    \  * Ingestion: Read mapping and generating a count matrix.\n  * Single sample\
    \ processing: cell filtering and doublet detection.\n  * Multisample processing:\
    \ Count transformation, normalization, QC metric calulations.\n  * Integration:\
    \ Clustering, integration and batch correction using single and multimodal methods.\n\
    \  * Downstream analysis workflows\n"
  info:
    test_resources:
    - type: "s3"
      path: "s3://openpipelines-data"
      dest: "resources_test"
  viash_version: "0.9.4"
  source: "src"
  target: "target"
  config_mods:
  - ".resources += {path: '/src/workflows/utils/labels.config', dest: 'nextflow_labels.config'}\n\
    .runners[.type == 'nextflow'].config.script := 'includeConfig(\"nextflow_labels.config\"\
    )'"
  - ".version := \"integration_build\""
  - ".engines[.type == 'docker'].target_tag := 'integration_build'"
  keywords:
  - "single-cell"
  - "multimodal"
  license: "MIT"
  organization: "openpipelines-bio"
  links:
    repository: "https://github.com/openpipelines-bio/openpipeline"
    docker_registry: "ghcr.io"
    homepage: "https://openpipelines.bio"
    documentation: "https://openpipelines.bio/fundamentals"
    issue_tracker: "https://github.com/openpipelines-bio/openpipeline/issues"
