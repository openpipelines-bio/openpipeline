functionality:
  name: "htseq_count"
  namespace: "mapping"
  version: "1.0.5"
  authors:
  - name: "Robrecht Cannoodt"
    roles:
    - "author"
    - "maintainer"
    info:
      role: "Core Team Member"
      links:
        email: "robrecht@data-intuitive.com"
        github: "rcannood"
        orcid: "0000-0003-3641-729X"
        linkedin: "robrechtcannoodt"
      organizations:
      - name: "Data Intuitive"
        href: "https://www.data-intuitive.com"
        role: "Data Science Engineer"
      - name: "Open Problems"
        href: "https://openproblems.bio"
        role: "Core Member"
  - name: "Angela Oliveira Pisco"
    roles:
    - "author"
    info:
      role: "Contributor"
      links:
        github: "aopisco"
        orcid: "0000-0003-0142-2355"
        linkedin: "aopisco"
      organizations:
      - name: "Insitro"
        href: "https://insitro.com"
        role: "Director of Computational Biology"
      - name: "Open Problems"
        href: "https://openproblems.bio"
        role: "Core Member"
  argument_groups:
  - name: "Input"
    arguments:
    - type: "file"
      name: "--input"
      description: "Path to the SAM/BAM files containing the mapped reads."
      info:
        orig_arg: "samfilenames"
      example:
      - "mysample1.BAM"
      - "mysample2.BAM"
      must_exist: true
      create_parent: true
      required: true
      direction: "input"
      multiple: true
      multiple_sep: ";"
      dest: "par"
    - type: "file"
      name: "--reference"
      description: "Path to the GTF file containing the features."
      info:
        orig_arg: "featurefilename"
      example:
      - "reference.gtf"
      must_exist: true
      create_parent: true
      required: true
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
  - name: "Output"
    arguments:
    - type: "file"
      name: "--output"
      description: "Filename to output the counts to."
      info:
        orig_arg: "--counts_output"
      example:
      - "htseq-count.tsv"
      must_exist: true
      create_parent: true
      required: true
      direction: "output"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--output_delimiter"
      description: "Column delimiter in output."
      info:
        orig_arg: "--delimiter"
      example:
      - "\t"
      required: false
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "file"
      name: "--output_sam"
      description: "Write out all SAM alignment records into SAM/BAM files (one per\
        \ input file needed), \nannotating each line with its feature assignment (as\
        \ an optional field with tag 'XF'). \nSee the -p option to use BAM instead\
        \ of SAM.\n"
      info:
        orig_arg: "--samout"
      example:
      - "mysample1_out.BAM"
      - "mysample2_out.BAM"
      must_exist: true
      create_parent: true
      required: false
      direction: "output"
      multiple: true
      multiple_sep: ";"
      dest: "par"
    - type: "string"
      name: "--output_sam_format"
      description: "Format to use with the --output_sam argument."
      info:
        orig_arg: "--samout-format"
      required: false
      choices:
      - "sam"
      - "bam"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
  - name: "Arguments"
    arguments:
    - type: "string"
      name: "--order"
      alternatives:
      - "-r"
      description: "Sorting order of <alignment_file>. Paired-end sequencing data\
        \ must be sorted either by position or\nby read name, and the sorting order\
        \ must be specified. Ignored for single-end data.\n"
      info:
        orig_arg: "--order"
      default:
      - "name"
      required: false
      choices:
      - "pos"
      - "name"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--stranded"
      alternatives:
      - "-s"
      description: "Whether the data is from a strand-specific assay. 'reverse' means\
        \ 'yes' with reversed strand interpretation."
      info:
        orig_arg: "--stranded"
      default:
      - "yes"
      required: false
      choices:
      - "yes"
      - "no"
      - "reverse"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "integer"
      name: "--minimum_alignment_quality"
      alternatives:
      - "-a"
      - "--minaqual"
      description: "Skip all reads with MAPQ alignment quality lower than the given\
        \ minimum value. \nMAPQ is the 5th column of a SAM/BAM file and its usage\
        \ depends on the software \nused to map the reads.\n"
      info:
        orig_arg: "--minaqual"
      default:
      - 10
      required: false
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--type"
      alternatives:
      - "-t"
      description: "Feature type (3rd column in GTF file) to be used, all features\
        \ of other type are ignored (default, suitable for Ensembl GTF files: exon)"
      info:
        orig_arg: "--type"
      example:
      - "exon"
      required: false
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--id_attribute"
      alternatives:
      - "-i"
      description: "GTF attribute to be used as feature ID (default, suitable for\
        \ Ensembl GTF files: gene_id).\nAll feature of the right type (see -t option)\
        \ within the same GTF attribute will be added\ntogether. The typical way of\
        \ using this option is to count all exonic reads from each gene\nand add the\
        \ exons but other uses are possible as well. You can call this option multiple\n\
        times: in that case, the combination of all attributes separated by colons\
        \ (:) will be used\nas a unique identifier, e.g. for exons you might use -i\
        \ gene_id -i exon_number.\n"
      info:
        orig_arg: "--idattr"
      example:
      - "gene_id"
      required: false
      direction: "input"
      multiple: true
      multiple_sep: ";"
      dest: "par"
    - type: "string"
      name: "--additional_attributes"
      description: "Additional feature attributes (suitable for Ensembl GTF files:\
        \ gene_name). Use multiple times\nfor more than one additional attribute.\
        \ These attributes are only used as annotations in the\noutput, while the\
        \ determination of how the counts are added together is done based on option\
        \ -i.\n"
      info:
        orig_arg: "--additional-attr"
      example:
      - "gene_name"
      required: false
      direction: "input"
      multiple: true
      multiple_sep: ";"
      dest: "par"
    - type: "boolean_true"
      name: "--add_chromosome_info"
      description: "Store information about the chromosome of each feature as an additional\
        \ attribute\n(e.g. colunm in the TSV output file).\n"
      info:
        orig_arg: "--add-chromosome-info"
      direction: "input"
      dest: "par"
    - type: "string"
      name: "--mode"
      alternatives:
      - "-m"
      description: "Mode to handle reads overlapping more than one feature."
      info:
        orig_arg: "--mode"
      default:
      - "union"
      required: false
      choices:
      - "union"
      - "intersection-strict"
      - "intersection-nonempty"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--non_unique"
      description: "Whether and how to score reads that are not uniquely aligned or\
        \ ambiguously assigned to features."
      info:
        orig_arg: "--nonunique"
      default:
      - "none"
      required: false
      choices:
      - "none"
      - "all"
      - "fraction"
      - "random"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--secondary_alignments"
      description: "Whether to score secondary alignments (0x100 flag)."
      info:
        orig_arg: "--secondary-alignments"
      required: false
      choices:
      - "score"
      - "ignore"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "string"
      name: "--supplementary_alignments"
      description: "Whether to score supplementary alignments (0x800 flag)."
      info:
        orig_arg: "--supplementary-alignments"
      required: false
      choices:
      - "score"
      - "ignore"
      direction: "input"
      multiple: false
      multiple_sep: ":"
      dest: "par"
    - type: "boolean_true"
      name: "--counts_output_sparse"
      description: "Store the counts as a sparse matrix (mtx, h5ad, loom)."
      info:
        orig_arg: "--counts-output-sparse"
      direction: "input"
      dest: "par"
  resources:
  - type: "python_script"
    path: "script.py"
    is_executable: true
  - type: "file"
    path: "./src/workflows/utils/labels.config"
    dest: "nextflow_labels.config"
  description: "Quantify gene expression for subsequent testing for differential expression.\n\
    \nThis script takes one or more alignment files in SAM/BAM format and a feature\
    \ file in GFF format and calculates for each feature the number of reads mapping\
    \ to it. \n\nSee http://htseq.readthedocs.io/en/master/count.html for details.\n"
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "resources_test/cellranger_tiny_fastq"
  - type: "file"
    path: "src/base/openpipelinetestutils"
    dest: "openpipelinetestutils"
  info: null
  status: "enabled"
  requirements:
    commands:
    - "ps"
  set_wd_to_resources_dir: false
platforms:
- type: "docker"
  id: "docker"
  image: "python:3.10-slim"
  target_organization: "openpipelines-bio"
  target_registry: "ghcr.io"
  target_tag: "1.0.0"
  namespace_separator: "/"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  target_image_source: "https://github.com/openpipelines-bio/openpipeline"
  setup:
  - type: "apt"
    packages:
    - "procps"
    interactive: false
  - type: "python"
    user: false
    packages:
    - "HTSeq"
    - "pyyaml"
    - "scipy"
    - "pandas~=2.0.0"
    upgrade: true
  entrypoint: []
  cmd: null
- type: "nextflow"
  id: "nextflow"
  directives:
    label:
    - "highmem"
    - "highcpu"
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1.GB"
      mem2gb: "memory = 2.GB"
      mem4gb: "memory = 4.GB"
      mem8gb: "memory = 8.GB"
      mem16gb: "memory = 16.GB"
      mem32gb: "memory = 32.GB"
      mem64gb: "memory = 64.GB"
      mem128gb: "memory = 128.GB"
      mem256gb: "memory = 256.GB"
      mem512gb: "memory = 512.GB"
      mem1tb: "memory = 1.TB"
      mem2tb: "memory = 2.TB"
      mem4tb: "memory = 4.TB"
      mem8tb: "memory = 8.TB"
      mem16tb: "memory = 16.TB"
      mem32tb: "memory = 32.TB"
      mem64tb: "memory = 64.TB"
      mem128tb: "memory = 128.TB"
      mem256tb: "memory = 256.TB"
      mem512tb: "memory = 512.TB"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
    script:
    - "includeConfig(\"nextflow_labels.config\")"
  debug: false
  container: "docker"
info:
  config: "/home/runner/work/openpipeline/openpipeline/src/mapping/htseq_count/config.vsh.yaml"
  platform: "nextflow"
  output: "/home/runner/work/openpipeline/openpipeline/target/nextflow/mapping/htseq_count"
  executable: "/home/runner/work/openpipeline/openpipeline/target/nextflow/mapping/htseq_count/htseq_count"
  viash_version: "0.8.8"
  git_commit: "bfe311bb5542f97dfe80b20a3e47a02800708f43"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
  git_tag: "1.0.4-3-gbfe311bb554"
