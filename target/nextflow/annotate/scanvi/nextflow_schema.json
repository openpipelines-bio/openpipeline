{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "scanvi",
"description": "scANVI () is a semi-supervised model for single-cell transcriptomics data. scANVI is an scVI extension that can leverage the cell type knowledge for a subset of the cells present in the data sets to infer the states of the rest of the cells.\nThis component will instantiate a scANVI model from a pre-trained scVI model, integrate the data and perform label prediction.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required. Input h5mu file",
                "help_text": "Type: `file`, required. Input h5mu file. Note that this needs to be the exact same dataset as the --scvi_model was trained on."
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default":"rna"
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`. Input layer to use",
                "help_text": "Type: `string`. Input layer to use. If None, X is used"
            
            }
    

        ,
                "var_input": {
                "type":
                "string",
                "description": "Type: `string`. ",
                "help_text": "Type: `string`. .var column containing highly variable genes that were used to train the scVi model. By default, do not subset genes."
            
            }
    

        ,
                "var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`. ",
                "help_text": "Type: `string`. .var column containing gene names. By default, use the index."
            
            }
    

        ,
                "obs_labels": {
                "type":
                "string",
                "description": "Type: `string`, required. ",
                "help_text": "Type: `string`, required. .obs field containing the labels"
            
            }
    

        ,
                "unlabeled_category": {
                "type":
                "string",
                "description": "Type: `string`, default: `Unknown`. Value in the --obs_labels field that indicates unlabeled observations\n",
                "help_text": "Type: `string`, default: `Unknown`. Value in the --obs_labels field that indicates unlabeled observations\n"
            ,
                "default":"Unknown"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output`. Output h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output`. Output h5mu file."
            ,
                "default":"$id.$key.output"
            }
    

        ,
                "output_model": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_model`. Folder where the state of the trained model will be saved to",
                "help_text": "Type: `file`, default: `$id.$key.output_model`. Folder where the state of the trained model will be saved to."
            ,
                "default":"$id.$key.output_model"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obsm_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_scanvi_integrated`. In which ",
                "help_text": "Type: `string`, default: `X_scanvi_integrated`. In which .obsm slot to store the resulting integrated embedding."
            ,
                "default":"X_scanvi_integrated"
            }
    

        ,
                "obs_output_predictions": {
                "type":
                "string",
                "description": "Type: `string`, default: `scanvi_pred`. In which ",
                "help_text": "Type: `string`, default: `scanvi_pred`. In which .obs slot to store the predicted labels."
            ,
                "default":"scanvi_pred"
            }
    

        ,
                "obs_output_probabilities": {
                "type":
                "string",
                "description": "Type: `string`, default: `scanvi_proba`. In which",
                "help_text": "Type: `string`, default: `scanvi_proba`. In which. obs slot to store the probabilities of the predicted labels."
            ,
                "default":"scanvi_proba"
            }
    

}
},
    
    
    "scvi model" : {
    "title": "scVI Model",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "scvi_model": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `scvi_model.pt`. Pretrained SCVI reference model to initialize the SCANVI model with",
                "help_text": "Type: `file`, required, example: `scvi_model.pt`. Pretrained SCVI reference model to initialize the SCANVI model with."
            
            }
    

}
},
    
    
    "scanvi training arguments" : {
    "title": "scANVI training arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "early_stopping": {
                "type":
                "boolean",
                "description": "Type: `boolean`. Whether to perform early stopping with respect to the validation set",
                "help_text": "Type: `boolean`. Whether to perform early stopping with respect to the validation set."
            
            }
    

        ,
                "early_stopping_monitor": {
                "type":
                "string",
                "description": "Type: `string`, default: `elbo_validation`, choices: ``elbo_validation`, `reconstruction_loss_validation`, `kl_local_validation``. Metric logged during validation set epoch",
                "help_text": "Type: `string`, default: `elbo_validation`, choices: ``elbo_validation`, `reconstruction_loss_validation`, `kl_local_validation``. Metric logged during validation set epoch.",
                "enum": ["elbo_validation", "reconstruction_loss_validation", "kl_local_validation"]
            
            ,
                "default":"elbo_validation"
            }
    

        ,
                "early_stopping_patience": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `45`. Number of validation epochs with no improvement after which training will be stopped",
                "help_text": "Type: `integer`, default: `45`. Number of validation epochs with no improvement after which training will be stopped."
            ,
                "default":45
            }
    

        ,
                "early_stopping_min_delta": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.0`. Minimum change in the monitored quantity to qualify as an improvement, i",
                "help_text": "Type: `double`, default: `0.0`. Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement."
            ,
                "default":0.0
            }
    

        ,
                "max_epochs": {
                "type":
                "integer",
                "description": "Type: `integer`. Number of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest",
                "help_text": "Type: `integer`. Number of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest."
            
            }
    

        ,
                "reduce_lr_on_plateau": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to monitor validation loss and reduce learning rate when validation set `lr_scheduler_metric` plateaus",
                "help_text": "Type: `boolean`, default: `true`. Whether to monitor validation loss and reduce learning rate when validation set `lr_scheduler_metric` plateaus."
            ,
                "default":true
            }
    

        ,
                "lr_factor": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.6`. Factor to reduce learning rate",
                "help_text": "Type: `double`, default: `0.6`. Factor to reduce learning rate."
            ,
                "default":0.6
            }
    

        ,
                "lr_patience": {
                "type":
                "number",
                "description": "Type: `double`, default: `30.0`. Number of epochs with no improvement after which learning rate will be reduced",
                "help_text": "Type: `double`, default: `30.0`. Number of epochs with no improvement after which learning rate will be reduced."
            ,
                "default":30.0
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/scvi model"
    },

    {
    "$ref": "#/definitions/scanvi training arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
