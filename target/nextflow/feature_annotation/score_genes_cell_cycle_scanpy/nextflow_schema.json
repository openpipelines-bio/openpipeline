{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "score_genes_cell_cycle_scanpy",
"description": "Calculates the score associated to S phase and G2M phase and annotates the cell cycle phase for each cell, as implemented by scanpy. \nThe score is the average expression of a set of genes subtracted with the average expression of a reference set of genes.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input_file.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input_file.h5mu`. Input h5mu file"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default":"rna"
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`, example: `log_normalized`. The layer of the adata object containing normalized expression values",
                "help_text": "Type: `string`, example: `log_normalized`. The layer of the adata object containing normalized expression values.\nIf not provided, the X attribute of the adata object will be used.\n"
            
            }
    

        ,
                "var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`, example: `gene_names`. The name of the column in the var attribute of the adata object that contains the gene names (symbols)",
                "help_text": "Type: `string`, example: `gene_names`. The name of the column in the var attribute of the adata object that contains the gene names (symbols).\nIf not provided, the index of the var attribute will be used.\n"
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output_file.h5mu`. Output h5mu file\n",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output_file.h5mu`. Output h5mu file\n"
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obs_phase": {
                "type":
                "string",
                "description": "Type: `string`, default: `phase`. The name of the column in the obs attribute of the adata object that will store the cell cycle phase annotation",
                "help_text": "Type: `string`, default: `phase`. The name of the column in the obs attribute of the adata object that will store the cell cycle phase annotation.\n"
            ,
                "default":"phase"
            }
    

        ,
                "obs_s_score": {
                "type":
                "string",
                "description": "Type: `string`, default: `S_score`. The name of the column in the obs attribute of the adata object that will store the s phase score",
                "help_text": "Type: `string`, default: `S_score`. The name of the column in the obs attribute of the adata object that will store the s phase score.\n"
            ,
                "default":"S_score"
            }
    

        ,
                "obs_g2m_score": {
                "type":
                "string",
                "description": "Type: `string`, default: `G2M_score`. The name of the column in the obs attribute of the adata object that will store the g2m phase score",
                "help_text": "Type: `string`, default: `G2M_score`. The name of the column in the obs attribute of the adata object that will store the g2m phase score.\n"
            ,
                "default":"G2M_score"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "n_bins": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `25`. Number of expression level bins for sampling",
                "help_text": "Type: `integer`, default: `25`. Number of expression level bins for sampling.\n"
            ,
                "default":25
            }
    

        ,
                "random_state": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. The random seed for sampling",
                "help_text": "Type: `integer`, default: `0`. The random seed for sampling.\n"
            ,
                "default":0
            }
    

        ,
                "allow_missing_genes": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `false`. If true, missing genes in the gene list will be ignored",
                "help_text": "Type: `boolean`, default: `false`. If true, missing genes in the gene list will be ignored.\n"
            ,
                "default":false
            }
    

}
},
    
    
    "gene list inputs" : {
    "title": "Gene list inputs",
    "type": "object",
    "description": "The gene list inputs can be provided as a list of gene symbols or as a file containing a list of gene symbols. The gene list file should be formatted as a single column with gene symbols.\n\nMake sure that the gene list inputs are consistent with the gene names in the adata object as provided by the --var_gene_names argument.\n",
    "properties": {
    
        
                "s_genes": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for scoring s phase genes",
                "help_text": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for scoring s phase genes.\n"
            
            }
    

        ,
                "s_genes_file": {
                "type":
                "string",
                "description": "Type: `file`, example: `s_gene_list.txt`. Path to a ",
                "help_text": "Type: `file`, example: `s_gene_list.txt`. Path to a .txt file containing the gene list of s phase genes to be scored. \nThe gene list file should be formatted as a single column with gene symbols.\n"
            
            }
    

        ,
                "g2m_genes": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for scoring g2m phase genes",
                "help_text": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for scoring g2m phase genes.\n"
            
            }
    

        ,
                "g2m_genes_file": {
                "type":
                "string",
                "description": "Type: `file`, example: `g2m_gene_list.txt`. Path to a ",
                "help_text": "Type: `file`, example: `g2m_gene_list.txt`. Path to a .txt file containing the gene list of g2m phase genes to be scored. \nThe gene list file should be formatted as a single column with gene symbols.\n"
            
            }
    

        ,
                "gene_pool": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for sampling the reference set",
                "help_text": "Type: List of `string`, example: `gene1;gene2;gene3`, multiple_sep: `\";\"`. List of gene symbols for sampling the reference set. Default is all genes.\n"
            
            }
    

        ,
                "gene_pool_file": {
                "type":
                "string",
                "description": "Type: `file`, example: `gene_pool.txt`. File with genes for sampling the reference set",
                "help_text": "Type: `file`, example: `gene_pool.txt`. File with genes for sampling the reference set. Default is all genes. \nThe gene pool file should be formatted as a single column with gene symbols.\n"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/gene list inputs"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
