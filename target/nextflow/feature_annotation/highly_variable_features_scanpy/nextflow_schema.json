{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "highly_variable_features_scanpy",
"description": "Annotate highly variable features [Satija15] [Zheng17] [Stuart19].\n\nExpects logarithmized data, except when flavor=\u0027seurat_v3\u0027 in which count data is expected.\n\nDepending on flavor, this reproduces the R-implementations of Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19].\n\nFor the dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion is obtained by scaling with the mean and standard deviation of the dispersions for features falling into a given bin for mean expression of features. This means that for each bin of mean expression, highly variable features are selected.\n\nFor [Stuart19], a normalized variance for each feature is computed. First, the data are standardized (i.e., z-score normalization per feature) with a regularized standard deviation. Next, the normalized variance is computed as the variance of each feature after the transformation. Features are ranked by the normalized variance.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default":"rna"
            }
    

        ,
                "layer": {
                "type":
                "string",
                "description": "Type: `string`. use adata",
                "help_text": "Type: `string`. use adata.layers[layer] for expression values instead of adata.X."
            
            }
    

        ,
                "var_input": {
                "type":
                "string",
                "description": "Type: `string`. If specified, use boolean array in adata",
                "help_text": "Type: `string`. If specified, use boolean array in adata.var[var_input] to calculate hvg on subset of vars.\n"
            
            }
    

        ,
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default":"$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "var_name_filter": {
                "type":
                "string",
                "description": "Type: `string`, default: `filter_with_hvg`. In which ",
                "help_text": "Type: `string`, default: `filter_with_hvg`. In which .var slot to store a boolean array corresponding to which observations should be filtered out."
            ,
                "default":"filter_with_hvg"
            }
    

        ,
                "varm_name": {
                "type":
                "string",
                "description": "Type: `string`, default: `hvg`. In which ",
                "help_text": "Type: `string`, default: `hvg`. In which .varm slot to store additional metadata."
            ,
                "default":"hvg"
            }
    

        ,
                "flavor": {
                "type":
                "string",
                "description": "Type: `string`, default: `seurat`, choices: ``seurat`, `cell_ranger`, `seurat_v3``. Choose the flavor for identifying highly variable features",
                "help_text": "Type: `string`, default: `seurat`, choices: ``seurat`, `cell_ranger`, `seurat_v3``. Choose the flavor for identifying highly variable features. For the dispersion based methods\nin their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_features.\n",
                "enum": ["seurat", "cell_ranger", "seurat_v3"]
            
            ,
                "default":"seurat"
            }
    

        ,
                "n_top_features": {
                "type":
                "integer",
                "description": "Type: `integer`. Number of highly-variable features to keep",
                "help_text": "Type: `integer`. Number of highly-variable features to keep. Mandatory if flavor=\u0027seurat_v3\u0027."
            
            }
    

        ,
                "min_mean": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.0125`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored",
                "help_text": "Type: `double`, default: `0.0125`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=\u0027seurat_v3\u0027."
            ,
                "default":0.0125
            }
    

        ,
                "max_mean": {
                "type":
                "number",
                "description": "Type: `double`, default: `3.0`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored",
                "help_text": "Type: `double`, default: `3.0`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=\u0027seurat_v3\u0027."
            ,
                "default":3.0
            }
    

        ,
                "min_disp": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored",
                "help_text": "Type: `double`, default: `0.5`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=\u0027seurat_v3\u0027."
            ,
                "default":0.5
            }
    

        ,
                "max_disp": {
                "type":
                "number",
                "description": "Type: `double`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored",
                "help_text": "Type: `double`. If n_top_features is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=\u0027seurat_v3\u0027. Default is +inf."
            
            }
    

        ,
                "span": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.3`. The fraction of the data (cells) used when estimating the variance in the loess model fit if flavor=\u0027seurat_v3\u0027",
                "help_text": "Type: `double`, default: `0.3`. The fraction of the data (cells) used when estimating the variance in the loess model fit if flavor=\u0027seurat_v3\u0027."
            ,
                "default":0.3
            }
    

        ,
                "n_bins": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Number of bins for binning the mean feature expression",
                "help_text": "Type: `integer`, default: `20`. Number of bins for binning the mean feature expression. Normalization is done with respect to each bin. If just a single feature falls into a bin, the normalized dispersion is artificially set to 1."
            ,
                "default":20
            }
    

        ,
                "obs_batch_key": {
                "type":
                "string",
                "description": "Type: `string`. If specified, highly-variable features are selected within each batch separately and merged",
                "help_text": "Type: `string`. If specified, highly-variable features are selected within each batch separately and merged. This simple \nprocess avoids the selection of batch-specific features and acts as a lightweight batch correction method. \nFor all flavors, features are first sorted by how many batches they are a HVG. For dispersion-based flavors \nties are broken by normalized dispersion. If flavor = \u0027seurat_v3\u0027, ties are broken by the median (across\nbatches) rank based on within-batch normalized variance.\n"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
