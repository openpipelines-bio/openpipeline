{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "align_query_reference",
"description": "Alignment of a query and reference dataset by:\n* Alignment of layers\n* Harmonization of .obs field names for batch and cell type labels\n* Harmonization of .var field name for gene names\n* Sanitation of gene names\n* Cross-checking of genes\n* Assignment of an id to the query and reference datasets\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "Input dataset (query) arguments",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. The input (query) data to be labeled",
                "help_text": "Type: `file`, required, example: `input.h5mu`. The input (query) data to be labeled. Should be a .h5mu file."
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to process",
                "help_text": "Type: `string`, default: `rna`. Which modality to process. Note that the query and reference modalities should be the same."
            ,
                "default":"rna"
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`. The layer in the input (query) data containing raw counts if ",
                "help_text": "Type: `string`. The layer in the input (query) data containing raw counts if .X is not to be used."
            
            }
    

        ,
                "input_layer_lognormalized": {
                "type":
                "string",
                "description": "Type: `string`. The layer in the input (query) data containing log normalized counts if ",
                "help_text": "Type: `string`. The layer in the input (query) data containing log normalized counts if .X is not to be used."
            
            }
    

        ,
                "input_var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`. The name of the ",
                "help_text": "Type: `string`. The name of the .var column in the input (query) data containing gene names; when no gene_name_layer is provided, the var index will be used.\n"
            
            }
    

        ,
                "input_obs_batch": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `sample_id`. The name of the ",
                "help_text": "Type: `string`, required, example: `sample_id`. The name of the .obs column in the input (query) data containing batch information.\n"
            
            }
    

        ,
                "input_obs_label": {
                "type":
                "string",
                "description": "Type: `string`, example: `cell_type`. The name of the ",
                "help_text": "Type: `string`, example: `cell_type`. The name of the .obs column in the input (query) data containing cell type labels. If not provided, the --unkown_celltype_label will be assigned to all observations.\n"
            
            }
    

        ,
                "input_id": {
                "type":
                "string",
                "description": "Type: `string`, default: `query`. Meta id value to be assigned to the --output_obs_id ",
                "help_text": "Type: `string`, default: `query`. Meta id value to be assigned to the --output_obs_id .obs field of the aligned input (query) data.\n"
            ,
                "default":"query"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "Output arguments.",
    "properties": {
    
        
                "output_query": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_query.h5mu`, example: `output_query.h5mu`. Aligned query data",
                "help_text": "Type: `file`, default: `$id.$key.output_query.h5mu`, example: `output_query.h5mu`. Aligned query data."
            ,
                "default":"$id.$key.output_query.h5mu"
            }
    

        ,
                "output_reference": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_reference.h5mu`, example: `output_reference.h5mu`. Aligned reference data",
                "help_text": "Type: `file`, default: `$id.$key.output_reference.h5mu`, example: `output_reference.h5mu`. Aligned reference data."
            ,
                "default":"$id.$key.output_reference.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "output_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `_counts`. Name of the aligned layer containing raw counts in the output query and reference datasets",
                "help_text": "Type: `string`, default: `_counts`. Name of the aligned layer containing raw counts in the output query and reference datasets."
            ,
                "default":"_counts"
            }
    

        ,
                "output_layer_lognormalized": {
                "type":
                "string",
                "description": "Type: `string`, default: `_log_normalized`. Name of the aligned layer containing log normalized counts in the output query and reference datasets",
                "help_text": "Type: `string`, default: `_log_normalized`. Name of the aligned layer containing log normalized counts in the output query and reference datasets."
            ,
                "default":"_log_normalized"
            }
    

        ,
                "output_var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`, default: `_gene_names`. Name of the ",
                "help_text": "Type: `string`, default: `_gene_names`. Name of the .var column in the output query and reference datasets containing the gene names."
            ,
                "default":"_gene_names"
            }
    

        ,
                "output_obs_batch": {
                "type":
                "string",
                "description": "Type: `string`, default: `_sample_id`. Name of the ",
                "help_text": "Type: `string`, default: `_sample_id`. Name of the .obs column in the output query and reference datasets containing the batch information."
            ,
                "default":"_sample_id"
            }
    

        ,
                "output_obs_label": {
                "type":
                "string",
                "description": "Type: `string`, default: `_cell_type`. Name of the ",
                "help_text": "Type: `string`, default: `_cell_type`. Name of the .obs column in the output query and reference datasets containing the cell type labels."
            ,
                "default":"_cell_type"
            }
    

        ,
                "output_obs_id": {
                "type":
                "string",
                "description": "Type: `string`, default: `_dataset`. Name of the ",
                "help_text": "Type: `string`, default: `_dataset`. Name of the .obs column in the output query and reference datasets containing the dataset id."
            ,
                "default":"_dataset"
            }
    

        ,
                "output_var_index": {
                "type":
                "string",
                "description": "Type: `string`, default: `_ori_var_index`. Name of the ",
                "help_text": "Type: `string`, default: `_ori_var_index`. Name of the .var column to which the .var index of the --input and --reference datasets is stored. Only relevant if \"--preserve_var_index\" is False."
            ,
                "default":"_ori_var_index"
            }
    

        ,
                "output_var_common_genes": {
                "type":
                "string",
                "description": "Type: `string`, default: `_common_vars`. Name of the ",
                "help_text": "Type: `string`, default: `_common_vars`. Name of the .var column in the output query and reference datasets containing the boolean array indicating the common variables."
            ,
                "default":"_common_vars"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "Arguments related to the alignment of the input and reference datasets.",
    "properties": {
    
        
                "input_reference_gene_overlap": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `100`. The minimum number of genes present in both the reference and query datasets",
                "help_text": "Type: `integer`, default: `100`. The minimum number of genes present in both the reference and query datasets.\n"
            ,
                "default":100
            }
    

        ,
                "align_layers_raw_counts": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to align the query and reference layers containing raw counts",
                "help_text": "Type: `boolean`, default: `true`. Whether to align the query and reference layers containing raw counts."
            ,
                "default":true
            }
    

        ,
                "align_layers_lognormalized_counts": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Whether to align the query and reference layers containing log normalized counts",
                "help_text": "Type: `boolean_true`, default: `false`. Whether to align the query and reference layers containing log normalized counts."
            ,
                "default":false
            }
    

        ,
                "unkown_celltype_label": {
                "type":
                "string",
                "description": "Type: `string`, default: `Unknown`. The label to assign to cells with an unknown cell type",
                "help_text": "Type: `string`, default: `Unknown`. The label to assign to cells with an unknown cell type.\n"
            ,
                "default":"Unknown"
            }
    

        ,
                "overwrite_existing_key": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. If set to true and the layer, obs or var key already exists in the query/reference file, the key will be overwritten",
                "help_text": "Type: `boolean_true`, default: `false`. If set to true and the layer, obs or var key already exists in the query/reference file, the key will be overwritten."
            ,
                "default":false
            }
    

        ,
                "preserve_var_index": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. If set to true, the ",
                "help_text": "Type: `boolean_true`, default: `false`. If set to true, the .var index of the --input and --reference datasets will be preserved.\nIf set to false (default behavior), the original .var index will be stored in the --output_var_index .var column and the .var index will be replaced with the sanitized \u0026 aligned gene names.\n"
            ,
                "default":false
            }
    

}
},
    
    
    "reference" : {
    "title": "Reference",
    "type": "object",
    "description": "Arguments related to the reference dataset.",
    "properties": {
    
        
                "reference": {
                "type":
                "string",
                "description": "Type: `file`, example: `reference.h5mu`. The reference data to train the CellTypist classifiers on",
                "help_text": "Type: `file`, example: `reference.h5mu`. The reference data to train the CellTypist classifiers on. Only required if a pre-trained --model is not provided."
            
            }
    

        ,
                "reference_layer": {
                "type":
                "string",
                "description": "Type: `string`. The layer in the reference data containing raw counts if ",
                "help_text": "Type: `string`. The layer in the reference data containing raw counts if .X is not to be used. Data are expected to be processed in the same way as the --input query dataset."
            
            }
    

        ,
                "reference_layer_lognormalized": {
                "type":
                "string",
                "description": "Type: `string`. The layer in the reference data containing log normalized counts if ",
                "help_text": "Type: `string`. The layer in the reference data containing log normalized counts if .X is not to be used. Data are expected to be processed in the same way as the --input query dataset."
            
            }
    

        ,
                "reference_var_gene_names": {
                "type":
                "string",
                "description": "Type: `string`. The name of the ",
                "help_text": "Type: `string`. The name of the .var column in the reference data containing gene names; when no gene_name_layer is provided, the var index will be used.\n"
            
            }
    

        ,
                "reference_obs_batch": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `sample_id`. The name of the ",
                "help_text": "Type: `string`, required, example: `sample_id`. The name of the .obs column in the reference data containing batch information.\n"
            
            }
    

        ,
                "reference_obs_label": {
                "type":
                "string",
                "description": "Type: `string`, example: `cell_type`. The name of the ",
                "help_text": "Type: `string`, example: `cell_type`. The name of the .obs column in the reference data containing cell type labels. If not provided, the --unkown_celltype_label will be assigned to all observations.\n"
            
            }
    

        ,
                "reference_id": {
                "type":
                "string",
                "description": "Type: `string`, default: `reference`. Meta id value to be assigned to the --output_obs_id ",
                "help_text": "Type: `string`, default: `reference`. Meta id value to be assigned to the --output_obs_id .obs field of the aligned reference data.\n"
            ,
                "default":"reference"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/reference"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
