{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "scvelo",
"description": "No description",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required. Input MuData file",
                "help_text": "Type: `file`, required. Input MuData file"
            
            }
    

        ,
                "counts_layer": {
                "type":
                "string",
                "description": "Type: `string`. Name of the counts layer, if not specified, X is used",
                "help_text": "Type: `string`. Name of the counts layer, if not specified, X is used."
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, required. Input modality",
                "help_text": "Type: `string`, required. Input modality"
            
            }
    

        ,
                "layer_spliced": {
                "type":
                "string",
                "description": "Type: `string`, default: `spliced`. ",
                "help_text": "Type: `string`, default: `spliced`. "
            ,
                "default":"spliced"
            }
    

        ,
                "layer_unspliced": {
                "type":
                "string",
                "description": "Type: `string`, default: `unspliced`. ",
                "help_text": "Type: `string`, default: `unspliced`. "
            ,
                "default":"unspliced"
            }
    

        ,
                "layer_ambiguous": {
                "type":
                "string",
                "description": "Type: `string`, default: `ambiguous`. ",
                "help_text": "Type: `string`, default: `ambiguous`. "
            ,
                "default":"ambiguous"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.output`. Output directory",
                "help_text": "Type: `file`, required, default: `$id.$key.output.output`. Output directory. If it does not exist, will be created."
            ,
                "default":"$id.$key.output.output"
            }
    

        ,
                "output_h5mu": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_h5mu.output_h5mu`. Output mudata file",
                "help_text": "Type: `file`, required, default: `$id.$key.output_h5mu.output_h5mu`. Output mudata file."
            ,
                "default":"$id.$key.output_h5mu.output_h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

}
},
    
    
    "filtering and normalization" : {
    "title": "Filtering and normalization",
    "type": "object",
    "description": "Arguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize function)",
    "properties": {
    
        
                "min_counts": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of counts required for a gene to pass filtering (spliced)",
                "help_text": "Type: `integer`. Minimum number of counts required for a gene to pass filtering (spliced)."
            
            }
    

        ,
                "min_counts_u": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of counts required for a gene to pass filtering (unspliced)",
                "help_text": "Type: `integer`. Minimum number of counts required for a gene to pass filtering (unspliced)."
            
            }
    

        ,
                "min_cells": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of cells expressed required to pass filtering (spliced)",
                "help_text": "Type: `integer`. Minimum number of cells expressed required to pass filtering (spliced)."
            
            }
    

        ,
                "min_cells_u": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of cells expressed required to pass filtering (unspliced)",
                "help_text": "Type: `integer`. Minimum number of cells expressed required to pass filtering (unspliced)."
            
            }
    

        ,
                "min_shared_counts": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of counts (both unspliced and spliced) required for a gene",
                "help_text": "Type: `integer`. Minimum number of counts (both unspliced and spliced) required for a gene."
            
            }
    

        ,
                "min_shared_cells": {
                "type":
                "integer",
                "description": "Type: `integer`. Minimum number of cells required to be expressed (both unspliced and spliced)",
                "help_text": "Type: `integer`. Minimum number of cells required to be expressed (both unspliced and spliced)."
            
            }
    

        ,
                "n_top_genes": {
                "type":
                "integer",
                "description": "Type: `integer`. Number of genes to keep",
                "help_text": "Type: `integer`. Number of genes to keep."
            
            }
    

        ,
                "log_transform": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Do not log transform counts",
                "help_text": "Type: `boolean`, default: `true`. Do not log transform counts."
            ,
                "default":true
            }
    

}
},
    
    
    "fitting parameters" : {
    "title": "Fitting parameters",
    "type": "object",
    "description": "Arguments for fitting the data",
    "properties": {
    
        
                "n_principal_components": {
                "type":
                "integer",
                "description": "Type: `integer`. Number of principal components to use for calculating moments",
                "help_text": "Type: `integer`. Number of principal components to use for calculating moments."
            
            }
    

        ,
                "n_neighbors": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `30`. Number of neighbors to use",
                "help_text": "Type: `integer`, default: `30`. Number of neighbors to use. First/second-order moments are computed for each\ncell across its nearest neighbors, where the neighbor graph is obtained from\neuclidean distances in PCA space.\n"
            ,
                "default":30
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/filtering and normalization"
    },

    {
    "$ref": "#/definitions/fitting parameters"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
