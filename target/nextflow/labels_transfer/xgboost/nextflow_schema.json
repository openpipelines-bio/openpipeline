{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "xgboost",
  "description": "Performs label transfer from reference to query using XGBoost classifier",
  "type": "object",
  "$defs": {
    "Dataset input": {
      "title": "Dataset input",
      "type": "object",
      "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
      "properties": {
        "param_list": {
          "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
          "default": "",
          "format": "file-path",
          "mimetype": "text/csv",
          "pattern": "^\\S+\\.csv$"
        }
      }
    },
    "outputs": {
      "title": "Outputs",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [
          "output"
        ],
        "output": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The query data in ",
          "help_text": "Type: `file`, multiple: `False`, required, default: `$id.$key.output`. ",
          "default": "$id.$key.output"
        },
        "output_obs_predictions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "In which `",
          "help_text": "Type: `string`, multiple: `True`. "
        },
        "output_obs_probability": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "In which `",
          "help_text": "Type: `string`, multiple: `True`. "
        },
        "output_compression": {
          "type": "string",
          "description": "Compression format to use for the output AnnData and/or Mudata objects",
          "help_text": "Type: `string`, multiple: `False`, example: `gzip`, choices: ``gzip`, `lzf``. ",
          "enum": [
            "gzip",
            "lzf"
          ]
        }
      }
    },
    "input dataset (query) arguments": {
      "title": "Input dataset (query) arguments",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [
          "input"
        ],
        "input": {
          "type": "string",
          "format": "path",
          "exists": true,
          "description": "The query data to transfer the labels to",
          "help_text": "Type: `file`, multiple: `False`, required. "
        },
        "modality": {
          "type": "string",
          "description": "Which modality to use",
          "help_text": "Type: `string`, multiple: `False`, default: `rna`. ",
          "default": "rna"
        },
        "input_obsm_features": {
          "type": "string",
          "description": "The `",
          "help_text": "Type: `string`, multiple: `False`, example: `X_scvi`. "
        }
      }
    },
    "reference dataset arguments": {
      "title": "Reference dataset arguments",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [],
        "reference": {
          "type": "string",
          "format": "path",
          "description": "The reference data to train classifiers on",
          "help_text": "Type: `file`, multiple: `False`, example: `reference.h5mu`. "
        },
        "reference_obsm_features": {
          "type": "string",
          "description": "The `",
          "help_text": "Type: `string`, multiple: `False`, example: `X_scvi`. "
        },
        "reference_obs_targets": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The `",
          "help_text": "Type: `string`, multiple: `True`, default: `ann_level_1;ann_level_2;ann_level_3;ann_level_4;ann_level_5;ann_finest_level`. ",
          "default": "ann_level_1;ann_level_2;ann_level_3;ann_level_4;ann_level_5;ann_finest_level"
        }
      }
    },
    "execution arguments": {
      "title": "Execution arguments",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [],
        "force_retrain": {
          "type": "boolean",
          "description": "Retrain models on the reference even if model_output directory already has trained classifiers",
          "help_text": "Type: `boolean_true`, multiple: `False`, default: `false`. ",
          "default": false
        },
        "use_gpu": {
          "type": "boolean",
          "description": "Use GPU during models training and inference (recommended)",
          "help_text": "Type: `boolean`, multiple: `False`, default: `false`. ",
          "default": false
        },
        "verbosity": {
          "type": "integer",
          "description": "The verbosity level for evaluation of the classifier from the range [0,2]",
          "help_text": "Type: `integer`, multiple: `False`, default: `1`. ",
          "default": 1
        },
        "model_output": {
          "type": "string",
          "format": "path",
          "description": "Output directory for model",
          "help_text": "Type: `file`, multiple: `False`, default: `model`. ",
          "default": "model"
        },
        "output_uns_parameters": {
          "type": "string",
          "description": "The key in `uns` slot of the output AnnData object to store the parameters of the XGBoost classifier",
          "help_text": "Type: `string`, multiple: `False`, default: `xgboost_parameters`. ",
          "default": "xgboost_parameters"
        }
      }
    },
    "learning parameters": {
      "title": "Learning parameters",
      "type": "object",
      "description": "No description",
      "properties": {
        "required": [],
        "learning_rate": {
          "type": "number",
          "description": "Step size shrinkage used in update to prevents overfitting",
          "help_text": "Type: `double`, multiple: `False`, default: `0.3`. ",
          "default": 0.3
        },
        "min_split_loss": {
          "type": "number",
          "description": "Minimum loss reduction required to make a further partition on a leaf node of the tree",
          "help_text": "Type: `double`, multiple: `False`, default: `0.0`. ",
          "default": 0.0
        },
        "max_depth": {
          "type": "integer",
          "description": "Maximum depth of a tree",
          "help_text": "Type: `integer`, multiple: `False`, default: `6`. ",
          "default": 6
        },
        "min_child_weight": {
          "type": "integer",
          "description": "Minimum sum of instance weight (hessian) needed in a child",
          "help_text": "Type: `integer`, multiple: `False`, default: `1`. ",
          "default": 1
        },
        "max_delta_step": {
          "type": "number",
          "description": "Maximum delta step we allow each leaf output to be",
          "help_text": "Type: `double`, multiple: `False`, default: `0.0`. ",
          "default": 0.0
        },
        "subsample": {
          "type": "number",
          "description": "Subsample ratio of the training instances",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        },
        "sampling_method": {
          "type": "string",
          "description": "The method to use to sample the training instances",
          "help_text": "Type: `string`, multiple: `False`, default: `uniform`, choices: ``uniform`, `gradient_based``. ",
          "enum": [
            "uniform",
            "gradient_based"
          ],
          "default": "uniform"
        },
        "colsample_bytree": {
          "type": "number",
          "description": "Fraction of columns to be subsampled",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        },
        "colsample_bylevel": {
          "type": "number",
          "description": "Subsample ratio of columns for each level",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        },
        "colsample_bynode": {
          "type": "number",
          "description": "Subsample ratio of columns for each node (split)",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        },
        "reg_lambda": {
          "type": "number",
          "description": "L2 regularization term on weights",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        },
        "reg_alpha": {
          "type": "number",
          "description": "L1 regularization term on weights",
          "help_text": "Type: `double`, multiple: `False`, default: `0.0`. ",
          "default": 0.0
        },
        "scale_pos_weight": {
          "type": "number",
          "description": "Control the balance of positive and negative weights, useful for unbalanced classes",
          "help_text": "Type: `double`, multiple: `False`, default: `1.0`. ",
          "default": 1.0
        }
      }
    },
    "nextflow input-output arguments": {
      "title": "Nextflow input-output arguments",
      "type": "object",
      "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
      "properties": {
        "required": [],
        "publish_dir": {
          "type": "string",
          "description": "Path to an output directory",
          "help_text": "Type: `string`, multiple: `False`, required, example: `output/`. "
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/outputs"
    },
    {
      "$ref": "#/definitions/input dataset (query) arguments"
    },
    {
      "$ref": "#/definitions/reference dataset arguments"
    },
    {
      "$ref": "#/definitions/execution arguments"
    },
    {
      "$ref": "#/definitions/learning parameters"
    },
    {
      "$ref": "#/definitions/nextflow input-output arguments"
    }
  ]
}
