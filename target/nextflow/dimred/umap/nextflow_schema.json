{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "umap",
"description": "UMAP (Uniform Manifold Approximation and Projection) is a manifold learning technique suitable for visualizing high-dimensional data. Besides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "uns_neighbors": {
                "type":
                "string",
                "description": "Type: `string`, default: `neighbors`. The `",
                "help_text": "Type: `string`, default: `neighbors`. The `.uns` neighbors slot as output by the `find_neighbors` component."
            ,
                "default": "neighbors"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obsm_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `umap`. The pre/postfix under which to store the UMAP results",
                "help_text": "Type: `string`, default: `umap`. The pre/postfix under which to store the UMAP results."
            ,
                "default": "umap"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "min_dist": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. The effective minimum distance between embedded points",
                "help_text": "Type: `double`, default: `0.5`. The effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out."
            ,
                "default": "0.5"
            }
    

        ,
                "spread": {
                "type":
                "number",
                "description": "Type: `double`, default: `1.0`. The effective scale of embedded points",
                "help_text": "Type: `double`, default: `1.0`. The effective scale of embedded points. In combination with `min_dist` this determines how clustered/clumped the embedded points are."
            ,
                "default": "1.0"
            }
    

        ,
                "num_components": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `2`. The number of dimensions of the embedding",
                "help_text": "Type: `integer`, default: `2`. The number of dimensions of the embedding."
            ,
                "default": "2"
            }
    

        ,
                "max_iter": {
                "type":
                "integer",
                "description": "Type: `integer`. The number of iterations (epochs) of the optimization",
                "help_text": "Type: `integer`. The number of iterations (epochs) of the optimization. Called `n_epochs` in the original UMAP. Default is set to 500 if neighbors[\u0027connectivities\u0027].shape[0] \u003c= 10000, else 200."
            
            }
    

        ,
                "alpha": {
                "type":
                "number",
                "description": "Type: `double`, default: `1.0`. The initial learning rate for the embedding optimization",
                "help_text": "Type: `double`, default: `1.0`. The initial learning rate for the embedding optimization."
            ,
                "default": "1.0"
            }
    

        ,
                "gamma": {
                "type":
                "number",
                "description": "Type: `double`, default: `1.0`. Weighting applied to negative samples in low dimensional embedding optimization",
                "help_text": "Type: `double`, default: `1.0`. Weighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples."
            ,
                "default": "1.0"
            }
    

        ,
                "negative_sample_rate": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `5`. The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding",
                "help_text": "Type: `integer`, default: `5`. The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding."
            ,
                "default": "5"
            }
    

        ,
                "init_pos": {
                "type":
                "string",
                "description": "Type: `string`, default: `spectral`. How to initialize the low dimensional embedding",
                "help_text": "Type: `string`, default: `spectral`. How to initialize the low dimensional embedding. Called `init` in the original UMAP. Options are:\n\n* Any key from `.obsm`\n* `\u0027paga\u0027`: positions from `paga()`\n* `\u0027spectral\u0027`: use a spectral embedding of the graph\n* `\u0027random\u0027`: assign initial embedding positions at random.\n"
            ,
                "default": "spectral"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
