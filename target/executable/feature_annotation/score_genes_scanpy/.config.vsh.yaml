name: "score_genes_scanpy"
namespace: "feature_annotation"
version: "test_new_schema_build"
authors:
- name: "Robrecht Cannoodt"
  roles:
  - "author"
  info:
    role: "Core Team Member"
    links:
      email: "robrecht@data-intuitive.com"
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
      linkedin: "robrechtcannoodt"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Science Engineer"
    - name: "Open Problems"
      href: "https://openproblems.bio"
      role: "Core Member"
- name: "Dorien Roosen"
  roles:
  - "author"
  info:
    role: "Core Team Member"
    links:
      email: "dorien@data-intuitive.com"
      github: "dorien-er"
      linkedin: "dorien-roosen"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Scientist"
- name: "Weiwei Schultz"
  roles:
  - "contributor"
  info:
    role: "Contributor"
    organizations:
    - name: "Janssen R&D US"
      role: "Associate Director Data Sciences"
argument_groups:
- name: "Inputs"
  arguments:
  - type: "file"
    name: "--input"
    description: "Input h5mu file"
    info: null
    example:
    - "input_file.h5mu"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--gene_list"
    description: "List of gene symbols to be scored.\n"
    info: null
    example:
    - "gene1"
    - "gene2"
    - "gene3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--gene_list_file"
    description: "Path to a .txt file containing the gene list to be scored.\nThe\
      \ gene list file should be formatted as a single column with gene symbols.\n"
    info: null
    example:
    - "gene_list.txt"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--gene_pool"
    description: "List of gene symbols for sampling the reference set. Default is\
      \ all genes.\n"
    info: null
    example:
    - "gene1"
    - "gene2"
    - "gene3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--gene_pool_file"
    description: "File with genes for sampling the reference set. Default is all genes.\n\
      The gene pool file should be formatted as a single column with gene symbols.\n"
    info: null
    example:
    - "gene_pool.txt"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--modality"
    info: null
    default:
    - "rna"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--input_layer"
    description: "The layer of the adata object containing normalized expression values.\n\
      If not provided, the X attribute of the adata object will be used.\n"
    info: null
    example:
    - "log_normalized"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--var_gene_names"
    description: ".var column name to be used to detect mitochondrial genes instead\
      \ of .var_names (default if not set).\n"
    info: null
    example:
    - "gene_symbol"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--allow_missing_genes"
    description: "Whether to run score_genes when some genes in the gene_list or gene_list_file\
      \ are not present in the gene_pool\n"
    info: null
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Outputs"
  arguments:
  - type: "file"
    name: "--output"
    description: "Output h5mu file\n"
    info: null
    example:
    - "output_file.h5mu"
    must_exist: true
    create_parent: true
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--obs_score"
    description: "Name of the score field to be added in .obs.\n"
    info: null
    default:
    - "score"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--output_compression"
    description: "Compression format to use for the output AnnData and/or Mudata objects.\n\
      By default no compression is applied.\n"
    info: null
    example:
    - "gzip"
    required: false
    choices:
    - "gzip"
    - "lzf"
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Arguments"
  arguments:
  - type: "integer"
    name: "--ctrl_size"
    description: "Number of reference genes to be sampled from each bin. \nIf len(gene_list)\
      \ is not too low, you can set ctrl_size=len(gene_list).\n"
    info: null
    default:
    - 50
    required: false
    min: 0
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--n_bins"
    description: "Number of expression level bins for sampling.\n"
    info: null
    default:
    - 25
    required: false
    min: 0
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--random_state"
    description: "The random seed for sampling.\n"
    info: null
    default:
    - 0
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
resources:
- type: "python_script"
  path: "script.py"
  is_executable: true
- type: "file"
  path: "helper.py"
- type: "file"
  path: "nextflow_labels.config"
  dest: "nextflow_labels.config"
description: "Calculates the score of a set of genes for each cell, as implemented\
  \ by scanpy. \nThe score is the average expression of a set of genes subtracted\
  \ with the average expression of a reference set of genes.\n"
test_resources:
- type: "python_script"
  path: "test.py"
  is_executable: true
- type: "file"
  path: "pbmc_1k_protein_v3"
info: null
status: "enabled"
scope:
  image: "public"
  target: "public"
license: "MIT"
links:
  repository: "https://github.com/openpipelines-bio/openpipeline"
  docker_registry: "ghcr.io"
runners:
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
engines:
- type: "docker"
  id: "docker"
  image: "python:3.11"
  target_tag: "main_build"
  namespace_separator: "/"
  setup:
  - type: "python"
    user: false
    packages:
    - "scanpy~=1.10.4"
    - "anndata~=0.11.1"
    - "mudata~=0.3.1"
    script:
    - "exec(\"try:\\n  import awkward\\nexcept ModuleNotFoundError:\\n  exit(0)\\\
      nelse:  exit(1)\")"
    upgrade: true
  test_setup:
  - type: "python"
    user: false
    packages:
    - "viashpy==0.8.0"
    upgrade: true
  entrypoint: []
  cmd: null
build_info:
  config: "src/feature_annotation/score_genes_scanpy/config.vsh.yaml"
  runner: "executable"
  engine: "docker"
  output: "target/executable/feature_annotation/score_genes_scanpy"
  executable: "target/executable/feature_annotation/score_genes_scanpy/score_genes_scanpy"
  viash_version: "0.9.4"
  git_commit: "ce9166107bb0c5626bc129a9bad3e7dc03529223"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
  git_tag: "0.2.0-2045-gce9166107bb"
package_config:
  name: "openpipeline"
  summary: "Best-practice workflows for single-cell multi-omics analyses.\n"
  description: "OpenPipelines are extensible single cell analysis pipelines for reproducible\
    \ and large-scale single cell processing using [Viash](https://viash.io) and [Nextflow](https://www.nextflow.io/).\n\
    \nIn terms of workflows, the following has been made available, but keep in mind\
    \ that\nindividual tools and functionality can be executed as standalone components\
    \ as well.\n\n  * Demultiplexing: conversion of raw sequencing data to FASTQ objects.\n\
    \  * Ingestion: Read mapping and generating a count matrix.\n  * Single sample\
    \ processing: cell filtering and doublet detection.\n  * Multisample processing:\
    \ Count transformation, normalization, QC metric calulations.\n  * Integration:\
    \ Clustering, integration and batch correction using single and multimodal methods.\n\
    \  * Downstream analysis workflows\n"
  info:
    test_resources:
    - type: "s3"
      path: "s3://openpipelines-data"
      dest: "resources_test"
  viash_version: "0.9.4"
  source: "src"
  target: "target"
  config_mods:
  - ".resources += {path: '/src/workflows/utils/labels.config', dest: 'nextflow_labels.config'}\n\
    .runners[.type == 'nextflow'].config.script := 'includeConfig(\"nextflow_labels.config\"\
    )'"
  - ".version := \"test_new_schema_build\""
  - ".engines[.type == 'docker'].target_tag := 'main_build'"
  keywords:
  - "single-cell"
  - "multimodal"
  license: "MIT"
  organization: "openpipelines-bio"
  links:
    repository: "https://github.com/openpipelines-bio/openpipeline"
    docker_registry: "ghcr.io"
    homepage: "https://openpipelines.bio"
    documentation: "https://openpipelines.bio/fundamentals"
    issue_tracker: "https://github.com/openpipelines-bio/openpipeline/issues"
