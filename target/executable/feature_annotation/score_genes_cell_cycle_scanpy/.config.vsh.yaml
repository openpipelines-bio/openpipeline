name: "score_genes_cell_cycle_scanpy"
namespace: "feature_annotation"
version: "integration_build"
authors:
- name: "Robrecht Cannoodt"
  roles:
  - "author"
  info:
    role: "Core Team Member"
    links:
      email: "robrecht@data-intuitive.com"
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
      linkedin: "robrechtcannoodt"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Science Engineer"
    - name: "Open Problems"
      href: "https://openproblems.bio"
      role: "Core Member"
- name: "Dorien Roosen"
  roles:
  - "author"
  info:
    role: "Core Team Member"
    links:
      email: "dorien@data-intuitive.com"
      github: "dorien-er"
      linkedin: "dorien-roosen"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Scientist"
- name: "Weiwei Schultz"
  roles:
  - "contributor"
  info:
    role: "Contributor"
    organizations:
    - name: "Janssen R&D US"
      role: "Associate Director Data Sciences"
argument_groups:
- name: "Inputs"
  arguments:
  - type: "file"
    name: "--input"
    description: "Input h5mu file"
    info: null
    example:
    - "input_file.h5mu"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--modality"
    description: "Which modality from the input MuData file to process.\n"
    info: null
    default:
    - "rna"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--input_layer"
    description: "The layer of the adata object containing normalized expression values.\n\
      If not provided, the X attribute of the adata object will be used.\n"
    info: null
    example:
    - "log_normalized"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--var_gene_names"
    description: "The name of the column in the var attribute of the adata object\
      \ that contains the gene names (symbols).\nIf not provided, the index of the\
      \ var attribute will be used.\n"
    info: null
    example:
    - "gene_names"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Gene list inputs"
  description: "The gene list inputs can be provided as a list of gene symbols or\
    \ as a file containing a list of gene symbols. The gene list file should be formatted\
    \ as a single column with gene symbols.\n\nMake sure that the gene list inputs\
    \ are consistent with the gene names in the adata object as provided by the --var_gene_names\
    \ argument.\n"
  arguments:
  - type: "string"
    name: "--s_genes"
    description: "List of gene symbols for scoring s phase genes.\n"
    info: null
    example:
    - "gene1"
    - "gene2"
    - "gene3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--s_genes_file"
    description: "Path to a .txt file containing the gene list of s phase genes to\
      \ be scored. \nThe gene list file should be formatted as a single column with\
      \ gene symbols.\n"
    info: null
    example:
    - "s_gene_list.txt"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--g2m_genes"
    description: "List of gene symbols for scoring g2m phase genes.\n"
    info: null
    example:
    - "gene1"
    - "gene2"
    - "gene3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--g2m_genes_file"
    description: "Path to a .txt file containing the gene list of g2m phase genes\
      \ to be scored. \nThe gene list file should be formatted as a single column\
      \ with gene symbols.\n"
    info: null
    example:
    - "g2m_gene_list.txt"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--gene_pool"
    description: "List of gene symbols for sampling the reference set. Default is\
      \ all genes.\n"
    info: null
    example:
    - "gene1"
    - "gene2"
    - "gene3"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--gene_pool_file"
    description: "File with genes for sampling the reference set. Default is all genes.\
      \ \nThe gene pool file should be formatted as a single column with gene symbols.\n"
    info: null
    example:
    - "gene_pool.txt"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Outputs"
  arguments:
  - type: "file"
    name: "--output"
    description: "Output h5mu file\n"
    info: null
    example:
    - "output_file.h5mu"
    must_exist: true
    create_parent: true
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--obs_phase"
    description: "The name of the column in the obs attribute of the adata object\
      \ that will store the cell cycle phase annotation.\n"
    info: null
    default:
    - "phase"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--obs_s_score"
    description: "The name of the column in the obs attribute of the adata object\
      \ that will store the s phase score.\n"
    info: null
    default:
    - "S_score"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--obs_g2m_score"
    description: "The name of the column in the obs attribute of the adata object\
      \ that will store the g2m phase score.\n"
    info: null
    default:
    - "G2M_score"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--output_compression"
    description: "Compression format to use for the output AnnData and/or Mudata objects.\n\
      By default no compression is applied.\n"
    info: null
    example:
    - "gzip"
    required: false
    choices:
    - "gzip"
    - "lzf"
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Arguments"
  arguments:
  - type: "integer"
    name: "--n_bins"
    description: "Number of expression level bins for sampling.\n"
    info: null
    default:
    - 25
    required: false
    min: 0
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--random_state"
    description: "The random seed for sampling.\n"
    info: null
    default:
    - 0
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--allow_missing_genes"
    description: "If true, missing genes in the gene list will be ignored.\n"
    info: null
    default:
    - false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
resources:
- type: "python_script"
  path: "script.py"
  is_executable: true
- type: "file"
  path: "helper.py"
- type: "file"
  path: "nextflow_labels.config"
  dest: "nextflow_labels.config"
description: "Calculates the score associated to S phase and G2M phase and annotates\
  \ the cell cycle phase for each cell, as implemented by scanpy. \nThe score is the\
  \ average expression of a set of genes subtracted with the average expression of\
  \ a reference set of genes.\n"
test_resources:
- type: "python_script"
  path: "test.py"
  is_executable: true
- type: "file"
  path: "pbmc_1k_protein_v3"
info: null
status: "enabled"
scope:
  image: "public"
  target: "public"
license: "MIT"
links:
  repository: "https://github.com/openpipelines-bio/openpipeline"
  docker_registry: "ghcr.io"
runners:
- type: "nextflow"
  id: "nextflow"
  directives:
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1000000000.B"
      mem2gb: "memory = 2000000000.B"
      mem5gb: "memory = 5000000000.B"
      mem10gb: "memory = 10000000000.B"
      mem20gb: "memory = 20000000000.B"
      mem50gb: "memory = 50000000000.B"
      mem100gb: "memory = 100000000000.B"
      mem200gb: "memory = 200000000000.B"
      mem500gb: "memory = 500000000000.B"
      mem1tb: "memory = 1000000000000.B"
      mem2tb: "memory = 2000000000000.B"
      mem5tb: "memory = 5000000000000.B"
      mem10tb: "memory = 10000000000000.B"
      mem20tb: "memory = 20000000000000.B"
      mem50tb: "memory = 50000000000000.B"
      mem100tb: "memory = 100000000000000.B"
      mem200tb: "memory = 200000000000000.B"
      mem500tb: "memory = 500000000000000.B"
      mem1gib: "memory = 1073741824.B"
      mem2gib: "memory = 2147483648.B"
      mem4gib: "memory = 4294967296.B"
      mem8gib: "memory = 8589934592.B"
      mem16gib: "memory = 17179869184.B"
      mem32gib: "memory = 34359738368.B"
      mem64gib: "memory = 68719476736.B"
      mem128gib: "memory = 137438953472.B"
      mem256gib: "memory = 274877906944.B"
      mem512gib: "memory = 549755813888.B"
      mem1tib: "memory = 1099511627776.B"
      mem2tib: "memory = 2199023255552.B"
      mem4tib: "memory = 4398046511104.B"
      mem8tib: "memory = 8796093022208.B"
      mem16tib: "memory = 17592186044416.B"
      mem32tib: "memory = 35184372088832.B"
      mem64tib: "memory = 70368744177664.B"
      mem128tib: "memory = 140737488355328.B"
      mem256tib: "memory = 281474976710656.B"
      mem512tib: "memory = 562949953421312.B"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
    script:
    - "includeConfig(\"nextflow_labels.config\")"
  debug: false
  container: "docker"
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
engines:
- type: "docker"
  id: "docker"
  image: "python:3.11"
  target_tag: "integration_build"
  namespace_separator: "/"
  setup:
  - type: "python"
    user: false
    packages:
    - "scanpy~=1.10.4"
    - "anndata~=0.11.1"
    - "mudata~=0.3.1"
    script:
    - "exec(\"try:\\n  import awkward\\nexcept ModuleNotFoundError:\\n  exit(0)\\\
      nelse:  exit(1)\")"
    upgrade: true
  test_setup:
  - type: "python"
    user: false
    packages:
    - "viashpy==0.8.0"
    upgrade: true
  entrypoint: []
  cmd: null
build_info:
  config: "src/feature_annotation/score_genes_cell_cycle_scanpy/config.vsh.yaml"
  runner: "executable"
  engine: "docker"
  output: "target/executable/feature_annotation/score_genes_cell_cycle_scanpy"
  executable: "target/executable/feature_annotation/score_genes_cell_cycle_scanpy/score_genes_cell_cycle_scanpy"
  viash_version: "0.9.4"
  git_commit: "d3c41a0fcb47d64bbf474123617f0e3cd62ee58d"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
package_config:
  name: "openpipeline"
  summary: "Best-practice workflows for single-cell multi-omics analyses.\n"
  description: "OpenPipelines are extensible single cell analysis pipelines for reproducible\
    \ and large-scale single cell processing using [Viash](https://viash.io) and [Nextflow](https://www.nextflow.io/).\n\
    \nIn terms of workflows, the following has been made available, but keep in mind\
    \ that\nindividual tools and functionality can be executed as standalone components\
    \ as well.\n\n  * Demultiplexing: conversion of raw sequencing data to FASTQ objects.\n\
    \  * Ingestion: Read mapping and generating a count matrix.\n  * Single sample\
    \ processing: cell filtering and doublet detection.\n  * Multisample processing:\
    \ Count transformation, normalization, QC metric calulations.\n  * Integration:\
    \ Clustering, integration and batch correction using single and multimodal methods.\n\
    \  * Downstream analysis workflows\n"
  info:
    test_resources:
    - type: "s3"
      path: "s3://openpipelines-data"
      dest: "resources_test"
    nextflow_labels_ci:
    - path: "src/workflows/utils/labels_ci.config"
      description: "Adds the correct memory and CPU labels when running on the Viash\
        \ Hub CI."
  viash_version: "0.9.4"
  source: "src"
  target: "target"
  config_mods:
  - ".resources += {path: '/src/workflows/utils/labels.config', dest: 'nextflow_labels.config'}\n\
    .runners[.type == 'nextflow'].config.script := 'includeConfig(\"nextflow_labels.config\"\
    )'"
  - ".version := \"integration_build\""
  - ".engines[.type == 'docker'].target_tag := 'integration_build'"
  keywords:
  - "single-cell"
  - "multimodal"
  license: "MIT"
  organization: "openpipelines-bio"
  links:
    repository: "https://github.com/openpipelines-bio/openpipeline"
    docker_registry: "ghcr.io"
    homepage: "https://openpipelines.bio"
    documentation: "https://openpipelines.bio/fundamentals"
    issue_tracker: "https://github.com/openpipelines-bio/openpipeline/issues"
