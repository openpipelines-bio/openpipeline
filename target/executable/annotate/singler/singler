#!/usr/bin/env bash

# singler main_build
# 
# This wrapper script is auto-generated by viash 0.9.4 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Dorien Roosen (author)
#  * Weiwei Schultz (contributor)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="singler"
VIASH_META_FUNCTIONALITY_NAME="singler"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"



# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='docker'

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  local save=$-; set +e
  local docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    local save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    local out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  local save=$-; set +e
  local out
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$1' push succeeded."
  else
    ViashError "Container '$1' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  local save=$-; set +e
  ViashDockerPull $1
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1          : image identifier with format `[registry/]image[:tag]`
# $2          : docker setup strategy, see DockerSetupStrategy.scala
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  local image_id="$1"
  local setup_strategy="$2"
  if [ "$setup_strategy" == "alwaysbuild" -o "$setup_strategy" == "build" -o "$setup_strategy" == "b" ]; then
    ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspull" -o "$setup_strategy" == "pull" -o "$setup_strategy" == "p" ]; then
    ViashDockerPull $image_id
  elif [ "$setup_strategy" == "alwayspullelsebuild" -o "$setup_strategy" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspullelsecachedbuild" -o "$setup_strategy" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayscachedbuild" -o "$setup_strategy" == "cachedbuild" -o "$setup_strategy" == "cb" ]; then
    ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [[ "$setup_strategy" =~ ^ifneedbe ]]; then
    local save=$-; set +e
    ViashDockerLocalTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $image_id already exists"
    elif [ "$setup_strategy" == "ifneedbebuild" ]; then
      ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepull" ]; then
      ViashDockerPull $image_id
    elif [ "$setup_strategy" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    else
      ViashError "Unrecognised Docker strategy: $setup_strategy"
      exit 1
    fi
  elif [ "$setup_strategy" == "push" -o "$setup_strategy" == "forcepush" -o "$setup_strategy" == "alwayspush" ]; then
    ViashDockerPush "$image_id"
  elif [ "$setup_strategy" == "pushifnotpresent" -o "$setup_strategy" == "gentlepush" -o "$setup_strategy" == "maybepush" ]; then
    local save=$-; set +e
    ViashDockerRemoteTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$image_id' exists, doing nothing."
    else
      ViashNotice "Container '$image_id' does not yet exist."
      ViashDockerPush "$image_id"
    fi
  elif [ "$setup_strategy" == "donothing" -o "$setup_strategy" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $setup_strategy"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  local image_id="$1"
  shift 1
  local commands="$@"
  local save=$-; set +e
  local missing # mark 'missing' as local in advance, otherwise the exit code of the command will be missing and always be '0'
  missing=$(docker run --rm --entrypoint=sh "$image_id" -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  local outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$image_id' does not contain command '$missing'."
  	exit 1
  fi
}

# ViashDockerBuild: build a docker image
# $1                               : image identifier with format `[registry/]image[:tag]`
# $...                             : additional arguments to pass to docker build
# $VIASH_META_TEMP_DIR             : temporary directory to store dockerfile & optional resources in
# $VIASH_META_NAME                 : name of the component
# $VIASH_META_RESOURCES_DIR        : directory containing the resources
# $VIASH_VERBOSITY                 : verbosity level
# exit code $?                     : whether or not the image was built successfully
function ViashDockerBuild {
  local image_id="$1"
  shift 1

  # create temporary directory to store dockerfile & optional resources in
  local tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-$VIASH_META_NAME-XXXXXX")
  local dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile "$VIASH_ENGINE_ID" > "$dockerfile"

  # generate the build command
  local docker_build_cmd="docker build -t '$image_id' $@ '$VIASH_META_RESOURCES_DIR' -f '$dockerfile'"

  # build the container
  ViashNotice "Building container '$image_id' with Dockerfile"
  ViashInfo "$docker_build_cmd"
  local save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    eval $docker_build_cmd
  else
    eval $docker_build_cmd &> "$tmpdir/docker_build.log"
  fi

  # check exit code
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$image_id'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}

######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# $1    : engine identifier
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    cat << 'VIASHDOCKER'
FROM rocker/r2u:22.04
ENTRYPOINT []
ENV RETICULATE_PYTHON=/usr/bin/python
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y libhdf5-dev python3 python3-pip python3-dev python-is-python3 && \
  rm -rf /var/lib/apt/lists/*

RUN Rscript -e 'options(warn = 2); if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'options(warn = 2); if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")' && \
  Rscript -e 'options(warn = 2); if (!requireNamespace("scrapper", quietly = TRUE)) BiocManager::install("scrapper")' && \
  Rscript -e 'options(warn = 2); if (!requireNamespace("bit64", quietly = TRUE)) BiocManager::install("bit64")' && \
  Rscript -e 'options(warn = 2); remotes::install_cran(c("anndata", "reticulate", "SingleR"), repos = "https://cran.rstudio.com")'

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "anndata~=0.11.1" "mudata~=0.3.1" && \
  python -c 'exec("try:\n  import awkward\nexcept ModuleNotFoundError:\n  exit(0)\nelse:  exit(1)")'

LABEL org.opencontainers.image.authors="Dorien Roosen, Weiwei Schultz"
LABEL org.opencontainers.image.description="Companion container for running component annotate singler"
LABEL org.opencontainers.image.created="2025-10-23T13:24:41Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="98c6fd3edd92c6e35ae454642ba7cc28875a5f2a"
LABEL org.opencontainers.image.version="main_build"

VIASHDOCKER
  fi
}

# ViashDockerBuildArgs: return the arguments to pass to docker build
# $1    : engine identifier
# return : arguments to pass to docker build
function ViashDockerBuildArgs {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    echo ""
  fi
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  local parr
  local outp
  local len
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashDockerAutodetectMount: auto configuring docker mounts from parameters
# $1                             : The parameter value
# returns                        : New parameter
# $VIASH_DIRECTORY_MOUNTS        : Added another parameter to be passed to docker
# $VIASH_DOCKER_AUTOMOUNT_PREFIX : The prefix to be used for the automounts
# examples:
#   ViashDockerAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashDockerAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashDockerAutodetectMount {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashDockerAutodetectMountArg {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  ViashDebug "ViashDockerAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashDockerStripAutomount {
  local abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#$VIASH_DOCKER_AUTOMOUNT_PREFIX}"
}
# initialise variables
VIASH_DIRECTORY_MOUNTS=()

# configure default docker automount prefix if it is unset
if [ -z "${VIASH_DOCKER_AUTOMOUNT_PREFIX+x}" ]; then
  VIASH_DOCKER_AUTOMOUNT_PREFIX="/viash_automount"
fi

# initialise docker variables
VIASH_DOCKER_RUN_ARGS=(-i --rm)


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "singler main_build"
  echo ""
  echo "SingleR performs reference-based cell type annotation for single-cell RNA-seq"
  echo "data"
  echo "by computing Spearman correlations between test cells and reference samples with"
  echo "known labels,"
  echo "using marker genes to assign the most similar cell type label to each new cell."
  echo ""
  echo "Inputs:"
  echo "    Input dataset (query) arguments"
  echo ""
  echo "    -i, --input"
  echo "        type: file, required parameter, file must exist"
  echo "        example: input.h5mu"
  echo "        The input (query) data to be labeled. Should be a .h5mu file."
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo "        Which modality to process."
  echo ""
  echo "    --input_layer"
  echo "        type: string"
  echo "        The layer in the input data containing log normalized counts to be used"
  echo "        for cell type annotation if .X is not to be used."
  echo ""
  echo "    --input_var_gene_names"
  echo "        type: string"
  echo "        The name of the adata .var column in the input data containing gene"
  echo "        names; when no gene_name_layer is provided, the var index will be used."
  echo ""
  echo "    --input_obs_clusters"
  echo "        type: string"
  echo "        The name of the adata .obs column containing cluster identities of the"
  echo "        observations."
  echo "        If provided, annoation is performed on the aggregated cluster profiles,"
  echo "        otherwise it defaults to annotation per observation."
  echo ""
  echo "    --input_reference_gene_overlap"
  echo "        type: integer"
  echo "        default: 100"
  echo "        min: 1"
  echo "        The minimum number of genes present in both the reference and query"
  echo "        datasets."
  echo ""
  echo "Reference:"
  echo "    Arguments related to the reference dataset."
  echo ""
  echo "    --reference"
  echo "        type: file, required parameter, file must exist"
  echo "        example: reference.h5mu"
  echo "        The reference data to train the CellTypist classifiers on. Only required"
  echo "        if a pre-trained --model is not provided."
  echo ""
  echo "    --reference_layer"
  echo "        type: string"
  echo "        The layer in the reference data containing lognormalized couns to be"
  echo "        used for cell type annotation if .X is not to be used. Data are expected"
  echo "        to be processed in the same way as the --input query dataset."
  echo ""
  echo "    --reference_obs_target"
  echo "        type: string, required parameter"
  echo "        The name of the adata obs column in the reference data containing cell"
  echo "        type annotations."
  echo ""
  echo "    --reference_var_gene_names"
  echo "        type: string"
  echo "        The name of the adata var column in the reference data containing gene"
  echo "        names; when no gene_name_layer is provided, the var index will be used."
  echo ""
  echo "    --reference_var_input"
  echo "        type: string"
  echo "        .var column containing a boolean mask corresponding to genes to be used"
  echo "        for marker selection. By default, do not subset genes."
  echo ""
  echo "Arguments:"
  echo "    Arguments related to the training of and classification with the SingleR"
  echo "    model"
  echo ""
  echo "    --de_n_genes"
  echo "        type: integer"
  echo "        min: 1"
  echo "        The number of differentially expressed genes across labels to be"
  echo "        calculated from the reference."
  echo "        Defaults to 500 * (2/3) ^ log2(N) where N is the number of unique labels"
  echo "        when if \`--de_method\` is set to \`classic\`,"
  echo "        otherwise, defaults to 10."
  echo ""
  echo "    --de_method"
  echo "        type: string"
  echo "        default: classic"
  echo "        choices: [ classic, t, wilcox ]"
  echo "        Method to detect differentially expressed genes between pairs of labels."
  echo ""
  echo "    --quantile"
  echo "        type: double"
  echo "        default: 0.8"
  echo "        min: 0.0"
  echo "        max: 1.0"
  echo "        The quantile of the correlation distribution to use to compute the score"
  echo "        per label."
  echo ""
  echo "    --fine_tune"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether finetuning should be performed to improve the resolution."
  echo "        If set to True, an additional finetuning step is performed after initial"
  echo "        classification,"
  echo "        new marker genes are calculated based on all cells with a score higher"
  echo "        then the maximum score minus \`--fine_tuning_thershold\`,"
  echo "        and the calculation of the scores is repeated."
  echo ""
  echo "    --fine_tuning_threshold"
  echo "        type: double"
  echo "        default: 0.05"
  echo "        The maximum difference from the maximum correlation to use in"
  echo "        fine-tuning"
  echo ""
  echo "    --prune"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether label pruning should be performed. If set to True, an additional"
  echo "        output .obs field \`--output_obs_pruned_predictions\` will be added to the"
  echo "        \`--output\`, containing labels where 'low-quality' labels are replaced"
  echo "        with NA's. Labels are considered 'low-quality' when their delta score"
  echo "        (stored in \`--output_obs_delta_next\`) fall more than 3 median absolute"
  echo "        deviations below the median for that label type."
  echo ""
  echo "Outputs:"
  echo "    Output arguments."
  echo ""
  echo "    --output"
  echo "        type: file, output, file must exist"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""
  echo "    --output_obs_predictions"
  echo "        type: string"
  echo "        default: singler_pred"
  echo "        In which \`.obs\` slot to store the predicted labels. If \`--fine_tune"
  echo "        False\`, this is based only on the maximum entry in"
  echo "        \`--output_obsm_scores\`."
  echo ""
  echo "    --output_obs_probability"
  echo "        type: string"
  echo "        default: singler_probability"
  echo "        In which \`.obs\` slots to store the probability of the predicted labels."
  echo ""
  echo "    --output_obs_delta_next"
  echo "        type: string"
  echo "        default: singler_delta_next"
  echo "        In which \`.obs\` slot to store the delta between the best and next-best"
  echo "        score. If \`--fine_tune True\`, this is reported for scores after"
  echo "        fine-tuning."
  echo ""
  echo "    --output_obs_pruned_predictions"
  echo "        type: string"
  echo "        default: singler_pruned_labels"
  echo "        In which \`.obs\` slot to store the pruned labels, where low-quality"
  echo "        labels are replaced with NA's. Only added if \`--prune True\`."
  echo ""
  echo "    --output_obsm_scores"
  echo "        type: string"
  echo "        default: singler_scores"
  echo "        In which \`.obsm\` slot to store the matrix of prediction correlations at"
  echo "        the specified quantile for each label (column) in each cell (row)."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        Compression format to use for the output AnnData and/or Mudata objects."
  echo "        By default no compression is applied."
  echo ""
  echo "Viash built in Computational Requirements:"
  echo "    ---cpus=INT"
  echo "        Number of CPUs to use"
  echo "    ---memory=STRING"
  echo "        Amount of memory to use. Examples: 4GB, 3MiB."
  echo ""
  echo "Viash built in Docker:"
  echo "    ---setup=STRATEGY"
  echo "        Setup the docker container. Options are: alwaysbuild, alwayscachedbuild, ifneedbebuild, ifneedbecachedbuild, alwayspull, alwayspullelsebuild, alwayspullelsecachedbuild, ifneedbepull, ifneedbepullelsebuild, ifneedbepullelsecachedbuild, push, pushifnotpresent, donothing."
  echo "        Default: ifneedbepullelsecachedbuild"
  echo "    ---dockerfile"
  echo "        Print the dockerfile to stdout."
  echo "    ---docker_run_args=ARG"
  echo "        Provide runtime arguments to Docker. See the documentation on \`docker run\` for more information."
  echo "    ---docker_image_id"
  echo "        Print the docker image id to stdout."
  echo "    ---debug"
  echo "        Enter the docker container for debugging purposes."
  echo ""
  echo "Viash built in Engines:"
  echo "    ---engine=ENGINE_ID"
  echo "        Specify the engine to use. Options are: docker."
  echo "        Default: docker"
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "singler main_build"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'-i\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_layer)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_layer=*)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer=*\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_var_gene_names)
            [ -n "$VIASH_PAR_INPUT_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--input_var_gene_names\': \'$VIASH_PAR_INPUT_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_VAR_GENE_NAMES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_var_gene_names. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_var_gene_names=*)
            [ -n "$VIASH_PAR_INPUT_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--input_var_gene_names=*\': \'$VIASH_PAR_INPUT_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_VAR_GENE_NAMES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_obs_clusters)
            [ -n "$VIASH_PAR_INPUT_OBS_CLUSTERS" ] && ViashError Bad arguments for option \'--input_obs_clusters\': \'$VIASH_PAR_INPUT_OBS_CLUSTERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_OBS_CLUSTERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_obs_clusters. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_obs_clusters=*)
            [ -n "$VIASH_PAR_INPUT_OBS_CLUSTERS" ] && ViashError Bad arguments for option \'--input_obs_clusters=*\': \'$VIASH_PAR_INPUT_OBS_CLUSTERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_OBS_CLUSTERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_reference_gene_overlap)
            [ -n "$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP" ] && ViashError Bad arguments for option \'--input_reference_gene_overlap\': \'$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_reference_gene_overlap. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_reference_gene_overlap=*)
            [ -n "$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP" ] && ViashError Bad arguments for option \'--input_reference_gene_overlap=*\': \'$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference=*)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference=*\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_layer)
            [ -n "$VIASH_PAR_REFERENCE_LAYER" ] && ViashError Bad arguments for option \'--reference_layer\': \'$VIASH_PAR_REFERENCE_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_layer=*)
            [ -n "$VIASH_PAR_REFERENCE_LAYER" ] && ViashError Bad arguments for option \'--reference_layer=*\': \'$VIASH_PAR_REFERENCE_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_obs_target)
            [ -n "$VIASH_PAR_REFERENCE_OBS_TARGET" ] && ViashError Bad arguments for option \'--reference_obs_target\': \'$VIASH_PAR_REFERENCE_OBS_TARGET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_OBS_TARGET="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_obs_target. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_obs_target=*)
            [ -n "$VIASH_PAR_REFERENCE_OBS_TARGET" ] && ViashError Bad arguments for option \'--reference_obs_target=*\': \'$VIASH_PAR_REFERENCE_OBS_TARGET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_OBS_TARGET=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_var_gene_names)
            [ -n "$VIASH_PAR_REFERENCE_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--reference_var_gene_names\': \'$VIASH_PAR_REFERENCE_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_VAR_GENE_NAMES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_var_gene_names. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_var_gene_names=*)
            [ -n "$VIASH_PAR_REFERENCE_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--reference_var_gene_names=*\': \'$VIASH_PAR_REFERENCE_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_VAR_GENE_NAMES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_var_input)
            [ -n "$VIASH_PAR_REFERENCE_VAR_INPUT" ] && ViashError Bad arguments for option \'--reference_var_input\': \'$VIASH_PAR_REFERENCE_VAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_VAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_var_input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_var_input=*)
            [ -n "$VIASH_PAR_REFERENCE_VAR_INPUT" ] && ViashError Bad arguments for option \'--reference_var_input=*\': \'$VIASH_PAR_REFERENCE_VAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_VAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --de_n_genes)
            [ -n "$VIASH_PAR_DE_N_GENES" ] && ViashError Bad arguments for option \'--de_n_genes\': \'$VIASH_PAR_DE_N_GENES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_N_GENES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_n_genes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_n_genes=*)
            [ -n "$VIASH_PAR_DE_N_GENES" ] && ViashError Bad arguments for option \'--de_n_genes=*\': \'$VIASH_PAR_DE_N_GENES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_N_GENES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --de_method)
            [ -n "$VIASH_PAR_DE_METHOD" ] && ViashError Bad arguments for option \'--de_method\': \'$VIASH_PAR_DE_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_METHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_method. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_method=*)
            [ -n "$VIASH_PAR_DE_METHOD" ] && ViashError Bad arguments for option \'--de_method=*\': \'$VIASH_PAR_DE_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_METHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --quantile)
            [ -n "$VIASH_PAR_QUANTILE" ] && ViashError Bad arguments for option \'--quantile\': \'$VIASH_PAR_QUANTILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUANTILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --quantile. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --quantile=*)
            [ -n "$VIASH_PAR_QUANTILE" ] && ViashError Bad arguments for option \'--quantile=*\': \'$VIASH_PAR_QUANTILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUANTILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fine_tune)
            [ -n "$VIASH_PAR_FINE_TUNE" ] && ViashError Bad arguments for option \'--fine_tune\': \'$VIASH_PAR_FINE_TUNE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FINE_TUNE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fine_tune. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fine_tune=*)
            [ -n "$VIASH_PAR_FINE_TUNE" ] && ViashError Bad arguments for option \'--fine_tune=*\': \'$VIASH_PAR_FINE_TUNE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FINE_TUNE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fine_tuning_threshold)
            [ -n "$VIASH_PAR_FINE_TUNING_THRESHOLD" ] && ViashError Bad arguments for option \'--fine_tuning_threshold\': \'$VIASH_PAR_FINE_TUNING_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FINE_TUNING_THRESHOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fine_tuning_threshold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fine_tuning_threshold=*)
            [ -n "$VIASH_PAR_FINE_TUNING_THRESHOLD" ] && ViashError Bad arguments for option \'--fine_tuning_threshold=*\': \'$VIASH_PAR_FINE_TUNING_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FINE_TUNING_THRESHOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --prune)
            [ -n "$VIASH_PAR_PRUNE" ] && ViashError Bad arguments for option \'--prune\': \'$VIASH_PAR_PRUNE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PRUNE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --prune. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --prune=*)
            [ -n "$VIASH_PAR_PRUNE" ] && ViashError Bad arguments for option \'--prune=*\': \'$VIASH_PAR_PRUNE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PRUNE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obs_predictions)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PREDICTIONS" ] && ViashError Bad arguments for option \'--output_obs_predictions\': \'$VIASH_PAR_OUTPUT_OBS_PREDICTIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PREDICTIONS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_predictions. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_predictions=*)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PREDICTIONS" ] && ViashError Bad arguments for option \'--output_obs_predictions=*\': \'$VIASH_PAR_OUTPUT_OBS_PREDICTIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PREDICTIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obs_probability)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PROBABILITY" ] && ViashError Bad arguments for option \'--output_obs_probability\': \'$VIASH_PAR_OUTPUT_OBS_PROBABILITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PROBABILITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_probability. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_probability=*)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PROBABILITY" ] && ViashError Bad arguments for option \'--output_obs_probability=*\': \'$VIASH_PAR_OUTPUT_OBS_PROBABILITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PROBABILITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obs_delta_next)
            [ -n "$VIASH_PAR_OUTPUT_OBS_DELTA_NEXT" ] && ViashError Bad arguments for option \'--output_obs_delta_next\': \'$VIASH_PAR_OUTPUT_OBS_DELTA_NEXT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_DELTA_NEXT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_delta_next. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_delta_next=*)
            [ -n "$VIASH_PAR_OUTPUT_OBS_DELTA_NEXT" ] && ViashError Bad arguments for option \'--output_obs_delta_next=*\': \'$VIASH_PAR_OUTPUT_OBS_DELTA_NEXT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_DELTA_NEXT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obs_pruned_predictions)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS" ] && ViashError Bad arguments for option \'--output_obs_pruned_predictions\': \'$VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_pruned_predictions. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_pruned_predictions=*)
            [ -n "$VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS" ] && ViashError Bad arguments for option \'--output_obs_pruned_predictions=*\': \'$VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obsm_scores)
            [ -n "$VIASH_PAR_OUTPUT_OBSM_SCORES" ] && ViashError Bad arguments for option \'--output_obsm_scores\': \'$VIASH_PAR_OUTPUT_OBSM_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBSM_SCORES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obsm_scores. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obsm_scores=*)
            [ -n "$VIASH_PAR_OUTPUT_OBSM_SCORES" ] && ViashError Bad arguments for option \'--output_obsm_scores=*\': \'$VIASH_PAR_OUTPUT_OBSM_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_OBSM_SCORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---setup)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$2"
            shift 2
            ;;
        ---setup=*)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---dockerfile)
            VIASH_MODE='dockerfile'
            shift 1
            ;;
        ---docker_run_args)
            VIASH_DOCKER_RUN_ARGS+=("$2")
            shift 2
            ;;
        ---docker_run_args=*)
            VIASH_DOCKER_RUN_ARGS+=("$(ViashRemoveFlags "$1")")
            shift 1
            ;;
        ---docker_image_id)
            VIASH_MODE='docker_image_id'
            shift 1
            ;;
        ---debug)
            VIASH_MODE='debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "docker" ]  ; then
  VIASH_ENGINE_TYPE='docker'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: docker."
  exit 1
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # check if docker is installed properly
  ViashDockerInstallationCheck

  # determine docker image id
  if [[ "$VIASH_ENGINE_ID" == 'docker' ]]; then
    VIASH_DOCKER_IMAGE_ID='ghcr.io/openpipelines-bio/openpipeline/annotate/singler:main_build'
  fi

  # print dockerfile
  if [ "$VIASH_MODE" == "dockerfile" ]; then
    ViashDockerfile "$VIASH_ENGINE_ID"
    exit 0

  elif [ "$VIASH_MODE" == "docker_image_id" ]; then
    echo "$VIASH_DOCKER_IMAGE_ID"
    exit 0
  
  # enter docker container
  elif [[ "$VIASH_MODE" == "debug" ]]; then
    VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} -v '$(pwd)':/pwd --workdir /pwd -t $VIASH_DOCKER_IMAGE_ID"
    ViashNotice "+ $VIASH_CMD"
    eval $VIASH_CMD
    exit 

  # build docker image
  elif [ "$VIASH_MODE" == "setup" ]; then
    ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" "$VIASH_SETUP_STRATEGY"
    ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
    exit 0
  fi

  # check if docker image exists
  ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" ifneedbepullelsecachedbuild
  ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REFERENCE+x} ]; then
  ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REFERENCE_OBS_TARGET+x} ]; then
  ViashError '--reference_obs_target' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP+x} ]; then
  VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP="100"
fi
if [ -z ${VIASH_PAR_DE_METHOD+x} ]; then
  VIASH_PAR_DE_METHOD="classic"
fi
if [ -z ${VIASH_PAR_QUANTILE+x} ]; then
  VIASH_PAR_QUANTILE="0.8"
fi
if [ -z ${VIASH_PAR_FINE_TUNE+x} ]; then
  VIASH_PAR_FINE_TUNE="true"
fi
if [ -z ${VIASH_PAR_FINE_TUNING_THRESHOLD+x} ]; then
  VIASH_PAR_FINE_TUNING_THRESHOLD="0.05"
fi
if [ -z ${VIASH_PAR_PRUNE+x} ]; then
  VIASH_PAR_PRUNE="true"
fi
if [ -z ${VIASH_PAR_OUTPUT_OBS_PREDICTIONS+x} ]; then
  VIASH_PAR_OUTPUT_OBS_PREDICTIONS="singler_pred"
fi
if [ -z ${VIASH_PAR_OUTPUT_OBS_PROBABILITY+x} ]; then
  VIASH_PAR_OUTPUT_OBS_PROBABILITY="singler_probability"
fi
if [ -z ${VIASH_PAR_OUTPUT_OBS_DELTA_NEXT+x} ]; then
  VIASH_PAR_OUTPUT_OBS_DELTA_NEXT="singler_delta_next"
fi
if [ -z ${VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS+x} ]; then
  VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS="singler_pruned_labels"
fi
if [ -z ${VIASH_PAR_OUTPUT_OBSM_SCORES+x} ]; then
  VIASH_PAR_OUTPUT_OBSM_SCORES="singler_scores"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ] && [ ! -e "$VIASH_PAR_REFERENCE" ]; then
  ViashError "Input file '$VIASH_PAR_REFERENCE' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP" ]]; then
  if ! [[ "$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--input_reference_gene_overlap' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if [[ $VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP -lt 1 ]]; then
    ViashError '--input_reference_gene_overlap' has be more than or equal to 1. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_DE_N_GENES" ]]; then
  if ! [[ "$VIASH_PAR_DE_N_GENES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--de_n_genes' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if [[ $VIASH_PAR_DE_N_GENES -lt 1 ]]; then
    ViashError '--de_n_genes' has be more than or equal to 1. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_QUANTILE" ]]; then
  if ! [[ "$VIASH_PAR_QUANTILE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--quantile' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_QUANTILE '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--quantile' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_QUANTILE -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--quantile' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--quantile' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_QUANTILE '<=' 1.0 | bc` -eq 1 ]]; then
      ViashError '--quantile' has to be less than or equal to 1.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_QUANTILE -v n2=1.0 'BEGIN { print (n1 <= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--quantile' has be less than or equal to 1.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--quantile' specifies a maximum value but the value was not verified as neither \'bc\' or \'awk\' are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_FINE_TUNE" ]]; then
  if ! [[ "$VIASH_PAR_FINE_TUNE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--fine_tune' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_FINE_TUNING_THRESHOLD" ]]; then
  if ! [[ "$VIASH_PAR_FINE_TUNING_THRESHOLD" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--fine_tuning_threshold' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PRUNE" ]]; then
  if ! [[ "$VIASH_PAR_PRUNE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--prune' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_DE_METHOD" ]; then
  VIASH_PAR_DE_METHOD_CHOICES=("classic;t;wilcox")
  IFS=';'
  set -f
  if ! [[ ";${VIASH_PAR_DE_METHOD_CHOICES[*]};" =~ ";$VIASH_PAR_DE_METHOD;" ]]; then
    ViashError '--de_method' specified value of \'$VIASH_PAR_DE_METHOD\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip;lzf")
  IFS=';'
  set -f
  if ! [[ ";${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]};" =~ ";$VIASH_PAR_OUTPUT_COMPRESSION;" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # detect volumes from file arguments
  VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_INPUT")" )
  VIASH_PAR_INPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_REFERENCE")" )
  VIASH_PAR_REFERENCE=$(ViashDockerAutodetectMount "$VIASH_PAR_REFERENCE")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashDockerAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashDockerAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashDockerAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashDockerAutodetectMount "$VIASH_META_TEMP_DIR")
fi
  
  # get unique mounts
  VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_DIRECTORY_MOUNTS[@]}"; do echo "$val"; done | sort -u))
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # change file ownership
  function ViashPerformChown {
    if (( ${#VIASH_CHOWN_VARS[@]} )); then
      set +e
      VIASH_CMD="docker run --entrypoint=bash --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID -c 'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
      ViashDebug "+ $VIASH_CMD"
      eval $VIASH_CMD
      set -e
    fi
  }
  trap ViashPerformChown EXIT
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # helper function for filling in extra docker args
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--memory=${VIASH_META_MEMORY_B}")
  fi
  if [ ! -z "$VIASH_META_CPUS" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--cpus=${VIASH_META_CPUS}")
  fi
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID"
fi


# set dependency paths


ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-singler-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
library(SingleR)
library(Matrix)
requireNamespace("anndata", quietly = TRUE)
requireNamespace("reticulate", quietly = TRUE)
mudata <- reticulate::import("mudata")

### VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "modality" = $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_MODALITY" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "input_layer" = $( if [ ! -z ${VIASH_PAR_INPUT_LAYER+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT_LAYER" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "input_var_gene_names" = $( if [ ! -z ${VIASH_PAR_INPUT_VAR_GENE_NAMES+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT_VAR_GENE_NAMES" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "input_obs_clusters" = $( if [ ! -z ${VIASH_PAR_INPUT_OBS_CLUSTERS+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT_OBS_CLUSTERS" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "input_reference_gene_overlap" = $( if [ ! -z ${VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_INPUT_REFERENCE_GENE_OVERLAP" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "reference" = $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_REFERENCE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "reference_layer" = $( if [ ! -z ${VIASH_PAR_REFERENCE_LAYER+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_REFERENCE_LAYER" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "reference_obs_target" = $( if [ ! -z ${VIASH_PAR_REFERENCE_OBS_TARGET+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_REFERENCE_OBS_TARGET" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "reference_var_gene_names" = $( if [ ! -z ${VIASH_PAR_REFERENCE_VAR_GENE_NAMES+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_REFERENCE_VAR_GENE_NAMES" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "reference_var_input" = $( if [ ! -z ${VIASH_PAR_REFERENCE_VAR_INPUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_REFERENCE_VAR_INPUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "de_n_genes" = $( if [ ! -z ${VIASH_PAR_DE_N_GENES+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_DE_N_GENES" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "de_method" = $( if [ ! -z ${VIASH_PAR_DE_METHOD+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_DE_METHOD" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "quantile" = $( if [ ! -z ${VIASH_PAR_QUANTILE+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_QUANTILE" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "fine_tune" = $( if [ ! -z ${VIASH_PAR_FINE_TUNE+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_FINE_TUNE" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "fine_tuning_threshold" = $( if [ ! -z ${VIASH_PAR_FINE_TUNING_THRESHOLD+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_FINE_TUNING_THRESHOLD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "prune" = $( if [ ! -z ${VIASH_PAR_PRUNE+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_PRUNE" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_obs_predictions" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_PREDICTIONS+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_OBS_PREDICTIONS" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_obs_probability" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_PROBABILITY+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_OBS_PROBABILITY" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_obs_delta_next" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_DELTA_NEXT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_OBS_DELTA_NEXT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_obs_pruned_predictions" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_OBS_PRUNED_PREDICTIONS" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_obsm_scores" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OBSM_SCORES+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_OBSM_SCORES" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output_compression" = $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT_COMPRESSION" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi )
)
meta <- list(
  "name" = $( if [ ! -z ${VIASH_META_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kib" = $( if [ ! -z ${VIASH_META_MEMORY_KIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mib" = $( if [ ! -z ${VIASH_META_MEMORY_MIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gib" = $( if [ ! -z ${VIASH_META_MEMORY_GIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tib" = $( if [ ! -z ${VIASH_META_MEMORY_TIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pib" = $( if [ ! -z ${VIASH_META_MEMORY_PIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

### VIASH END

get_layer <- function(adata, layer, var_gene_names) {
  # find data
  data <-
    if (is.null(layer)) {
      adata\$X
    } else {
      adata\$layers[[layer]]
    }

  # check if data is available
  if (is.null(data)) {
    if (is.null(layer)) {
      stop("No layer specified and no .X slot available in the AnnData object.")
    } else {
      stop(
        "Requested layer '",
        layer,
        "' is not available in the AnnData object. Available layers: ",
        paste(names(adata\$layers), collapse = ", ")
      )
    }
  }

  # Set matrix dimnames
  input_gene_names <- sanitize_gene_names(adata, var_gene_names)
  dimnames(data) <- list(adata\$obs_names, input_gene_names)

  # return output
  data
}

sanitize_gene_names <- function(adata, gene_symbol = NULL) {
  if (is.null(gene_symbol)) {
    gene_names <- adata\$var_names
  } else {
    gene_names <- adata\$var[[gene_symbol]]
  }
  # Remove version numbers (dot followed by digits at end of string)
  sanitized <- gsub("\\\\.[0-9]+\$", "", gene_names)
  sanitized
}

subset_vars <- function(adata, subset_col) {
  # Check if column exists
  if (!subset_col %in% colnames(adata\$var)) {
    stop(
      "Requested to use .var column '",
      subset_col,
      "' as a selection of genes, but the column is not available."
    )
  }

  # Get the column
  subset_values <- adata\$var[[subset_col]]

  # Check for NA values
  if (any(is.na(subset_values))) {
    stop(
      "The .var column \`",
      subset_col,
      "\` contains NA values. Can not subset data."
    )
  }

  # Check if it's logical/boolean
  if (!is.logical(subset_values)) {
    stop(
      "Expected dtype of .var column '",
      subset_col,
      "' to be \`logical\`, but found ",
      class(subset_values)[1],
      ". Can not subset data."
    )
  }

  # Subset and return copy
  adata_subset <- adata[, subset_values]\$copy()
  adata_subset
}

# Read input data
cat("Reading input file\\n")
input_mdata <- mudata\$read_h5mu(par\$input)
input_adata <- input_mdata\$mod[[par\$modality]]
input_matrix <- Matrix::t(
  get_layer(input_adata, par\$input_layer, par\$input_var_gene_names)
)

# Read reference
cat("Reading reference file\\n")
ref_adata <- mudata\$read_h5ad(par\$reference, mod = "rna")
if (!is.null(par\$reference_var_input)) {
  ref_adata <- subset_vars(ref_adata, par\$reference_var_input)
}
ref_matrix <- Matrix::t(
  get_layer(ref_adata, par\$reference_layer, par\$reference_var_gene_names)
)

# Check overlap genes
cat("Checking overlap of genes between input and reference file\\n")
common_ens_ids <- intersect(rownames(ref_matrix), rownames(input_matrix))
if (length(common_ens_ids) < par\$input_reference_gene_overlap) {
  stop(
    "The intersection of genes between the query and reference is too small.\\n",
    paste0("Expected overlap: ", par\$input_reference_gene_overlap),
    paste0("Detected overlap: ", length(common_ens_ids))
  )
}

# Calculate CPU cores
n_workers <- meta\$cpus %||% max(1, parallel::detectCores() - 1)

# Assign target labels
if (!par\$reference_obs_target %in% colnames(ref_adata\$obs)) {
  stop(
    "Requested to use .obs column '",
    par\$reference_obs_target,
    "' as target labels, but the column is not available."
  )
} else {
  target_labels <- ref_adata\$obs[[par\$reference_obs_target]]
}

cat("Performing SingleR cell type prediction\\n")
predictions <- SingleR(
  test = input_matrix,
  ref = ref_matrix,
  labels = target_labels,
  clusters = par\$input_obs_clusters,
  genes = "de",
  de.method = par\$de_method,
  de.n = par\$de_n_genes,
  quantile = par\$quantile,
  fine.tune = par\$fine_tune,
  tune.thresh = par\$fine_tuning_threshold,
  prune = par\$prune,
  num.threads = n_workers
)

cat("Writing output data\\n")
# Writing output slots
input_adata\$obs[[par\$output_obs_predictions]] <-
  predictions\$labels
input_adata\$obs[[par\$output_obs_probability]] <-
  apply(predictions\$scores, 1, max)
input_adata\$obs[[par\$output_obs_delta_next]] <-
  predictions\$delta.next
input_adata\$obs[[par\$output_obs_pruned_predictions]] <-
  predictions\$pruned.labels
input_adata\$obsm[[par\$output_obsm_scores]] <-
  predictions\$scores
# Writing output H5MU
input_mdata\$write(par\$output, compression = par\$output_compression)
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # strip viash automount from file paths
  
  if [ ! -z "$VIASH_PAR_INPUT" ]; then
    VIASH_PAR_INPUT=$(ViashDockerStripAutomount "$VIASH_PAR_INPUT")
  fi
  if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
    VIASH_PAR_REFERENCE=$(ViashDockerStripAutomount "$VIASH_PAR_REFERENCE")
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
    VIASH_PAR_OUTPUT=$(ViashDockerStripAutomount "$VIASH_PAR_OUTPUT")
  fi
  if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
    VIASH_META_RESOURCES_DIR=$(ViashDockerStripAutomount "$VIASH_META_RESOURCES_DIR")
  fi
  if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
    VIASH_META_EXECUTABLE=$(ViashDockerStripAutomount "$VIASH_META_EXECUTABLE")
  fi
  if [ ! -z "$VIASH_META_CONFIG" ]; then
    VIASH_META_CONFIG=$(ViashDockerStripAutomount "$VIASH_META_CONFIG")
  fi
  if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
    VIASH_META_TEMP_DIR=$(ViashDockerStripAutomount "$VIASH_META_TEMP_DIR")
  fi
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
