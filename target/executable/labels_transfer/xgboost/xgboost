#!/usr/bin/env bash

# xgboost main_build
# 
# This wrapper script is auto-generated by viash 0.9.4 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Vladimir Shitov (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="xgboost"
VIASH_META_FUNCTIONALITY_NAME="xgboost"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"



# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='docker'

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  local save=$-; set +e
  local docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    local save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    local out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  local save=$-; set +e
  local out
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$1' push succeeded."
  else
    ViashError "Container '$1' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  local save=$-; set +e
  ViashDockerPull $1
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1          : image identifier with format `[registry/]image[:tag]`
# $2          : docker setup strategy, see DockerSetupStrategy.scala
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  local image_id="$1"
  local setup_strategy="$2"
  if [ "$setup_strategy" == "alwaysbuild" -o "$setup_strategy" == "build" -o "$setup_strategy" == "b" ]; then
    ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspull" -o "$setup_strategy" == "pull" -o "$setup_strategy" == "p" ]; then
    ViashDockerPull $image_id
  elif [ "$setup_strategy" == "alwayspullelsebuild" -o "$setup_strategy" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspullelsecachedbuild" -o "$setup_strategy" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayscachedbuild" -o "$setup_strategy" == "cachedbuild" -o "$setup_strategy" == "cb" ]; then
    ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [[ "$setup_strategy" =~ ^ifneedbe ]]; then
    local save=$-; set +e
    ViashDockerLocalTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $image_id already exists"
    elif [ "$setup_strategy" == "ifneedbebuild" ]; then
      ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepull" ]; then
      ViashDockerPull $image_id
    elif [ "$setup_strategy" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    else
      ViashError "Unrecognised Docker strategy: $setup_strategy"
      exit 1
    fi
  elif [ "$setup_strategy" == "push" -o "$setup_strategy" == "forcepush" -o "$setup_strategy" == "alwayspush" ]; then
    ViashDockerPush "$image_id"
  elif [ "$setup_strategy" == "pushifnotpresent" -o "$setup_strategy" == "gentlepush" -o "$setup_strategy" == "maybepush" ]; then
    local save=$-; set +e
    ViashDockerRemoteTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$image_id' exists, doing nothing."
    else
      ViashNotice "Container '$image_id' does not yet exist."
      ViashDockerPush "$image_id"
    fi
  elif [ "$setup_strategy" == "donothing" -o "$setup_strategy" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $setup_strategy"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  local image_id="$1"
  shift 1
  local commands="$@"
  local save=$-; set +e
  local missing # mark 'missing' as local in advance, otherwise the exit code of the command will be missing and always be '0'
  missing=$(docker run --rm --entrypoint=sh "$image_id" -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  local outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$image_id' does not contain command '$missing'."
  	exit 1
  fi
}

# ViashDockerBuild: build a docker image
# $1                               : image identifier with format `[registry/]image[:tag]`
# $...                             : additional arguments to pass to docker build
# $VIASH_META_TEMP_DIR             : temporary directory to store dockerfile & optional resources in
# $VIASH_META_NAME                 : name of the component
# $VIASH_META_RESOURCES_DIR        : directory containing the resources
# $VIASH_VERBOSITY                 : verbosity level
# exit code $?                     : whether or not the image was built successfully
function ViashDockerBuild {
  local image_id="$1"
  shift 1

  # create temporary directory to store dockerfile & optional resources in
  local tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-$VIASH_META_NAME-XXXXXX")
  local dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile "$VIASH_ENGINE_ID" > "$dockerfile"

  # generate the build command
  local docker_build_cmd="docker build -t '$image_id' $@ '$VIASH_META_RESOURCES_DIR' -f '$dockerfile'"

  # build the container
  ViashNotice "Building container '$image_id' with Dockerfile"
  ViashInfo "$docker_build_cmd"
  local save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    eval $docker_build_cmd
  else
    eval $docker_build_cmd &> "$tmpdir/docker_build.log"
  fi

  # check exit code
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$image_id'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}

######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# $1    : engine identifier
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    cat << 'VIASHDOCKER'
FROM python:3.10-slim
ENTRYPOINT []
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y procps git && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "anndata~=0.11.1" "mudata~=0.3.1" && \
  python -c 'exec("try:\n  import awkward\nexcept ModuleNotFoundError:\n  exit(0)\nelse:  exit(1)")'

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y libopenblas-dev liblapack-dev gfortran && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "scanpy~=1.10.4" "xgboost~=2.1.3" "scikit-learn<1.6"

LABEL org.opencontainers.image.authors="Vladimir Shitov"
LABEL org.opencontainers.image.description="Companion container for running component labels_transfer xgboost"
LABEL org.opencontainers.image.created="2025-10-30T08:31:38Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="0fc32cc211d2b0c40291703802833c8f28354efb"
LABEL org.opencontainers.image.version="main_build"

VIASHDOCKER
  fi
}

# ViashDockerBuildArgs: return the arguments to pass to docker build
# $1    : engine identifier
# return : arguments to pass to docker build
function ViashDockerBuildArgs {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    echo ""
  fi
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  local parr
  local outp
  local len
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashDockerAutodetectMount: auto configuring docker mounts from parameters
# $1                             : The parameter value
# returns                        : New parameter
# $VIASH_DIRECTORY_MOUNTS        : Added another parameter to be passed to docker
# $VIASH_DOCKER_AUTOMOUNT_PREFIX : The prefix to be used for the automounts
# examples:
#   ViashDockerAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashDockerAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashDockerAutodetectMount {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashDockerAutodetectMountArg {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  ViashDebug "ViashDockerAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashDockerStripAutomount {
  local abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#$VIASH_DOCKER_AUTOMOUNT_PREFIX}"
}
# initialise variables
VIASH_DIRECTORY_MOUNTS=()

# configure default docker automount prefix if it is unset
if [ -z "${VIASH_DOCKER_AUTOMOUNT_PREFIX+x}" ]; then
  VIASH_DOCKER_AUTOMOUNT_PREFIX="/viash_automount"
fi

# initialise docker variables
VIASH_DOCKER_RUN_ARGS=(-i --rm)


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "xgboost main_build"
  echo ""
  echo "Performs label transfer from reference to query using XGBoost classifier"
  echo ""
  echo "Input dataset (query) arguments:"
  echo "    --input"
  echo "        type: file, required parameter, file must exist"
  echo "        The query data to transfer the labels to. Should be a .h5mu file."
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo "        Which modality to use."
  echo ""
  echo "    --input_obsm_features"
  echo "        type: string"
  echo "        example: X_scvi"
  echo "        The \`.obsm\` key of the embedding to use for the classifier's inference."
  echo "        If not provided, the \`.X\` slot will be used instead."
  echo "        Make sure that embedding was obtained in the same way as the reference"
  echo "        embedding (e.g. by the same model or preprocessing)."
  echo ""
  echo "Reference dataset arguments:"
  echo "    --reference"
  echo "        type: file, file must exist"
  echo "        example: reference.h5mu"
  echo "        The reference data to train classifiers on."
  echo ""
  echo "    --reference_obsm_features"
  echo "        type: string"
  echo "        example: X_scvi"
  echo "        The \`.obsm\` key of the embedding to use for the classifier's training."
  echo "        If not provided, the \`.X\` slot will be used instead."
  echo "        Make sure that embedding was obtained in the same way as the query"
  echo "        embedding (e.g. by the same model or preprocessing)."
  echo ""
  echo "    --reference_obs_targets"
  echo "        type: string, multiple values allowed"
  echo "        default:"
  echo "ann_level_1;ann_level_2;ann_level_3;ann_level_4;ann_level_5;ann_finest_level"
  echo "        The \`.obs\` key(s) of the target labels to tranfer."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        The query data in .h5mu format with predicted labels transfered from the"
  echo "        reference."
  echo ""
  echo "    --output_obs_predictions"
  echo "        type: string, multiple values allowed"
  echo "        In which \`.obs\` slots to store the predicted information."
  echo "        If provided, must have the same length as \`--reference_obs_targets\`."
  echo "        If empty, will default to the \`reference_obs_targets\` combined with the"
  echo "        \`\"_pred\"\` suffix."
  echo ""
  echo "    --output_obs_probability"
  echo "        type: string, multiple values allowed"
  echo "        In which \`.obs\` slots to store the probability of the predictions."
  echo "        If provided, must have the same length as \`--reference_obs_targets\`."
  echo "        If empty, will default to the \`reference_obs_targets\` combined with the"
  echo "        \`\"_probability\"\` suffix."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        Compression format to use for the output AnnData and/or Mudata objects."
  echo "        By default no compression is applied."
  echo ""
  echo "Execution arguments:"
  echo "    -f, --force_retrain"
  echo "        type: boolean_true"
  echo "        Retrain models on the reference even if model_output directory already"
  echo "        has trained classifiers. WARNING! It will rewrite existing classifiers"
  echo "        for targets in the model_output directory!"
  echo ""
  echo "    --use_gpu"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Use GPU during models training and inference (recommended)."
  echo ""
  echo "    -v, --verbosity"
  echo "        type: integer"
  echo "        default: 1"
  echo "        The verbosity level for evaluation of the classifier from the range"
  echo "        [0,2]"
  echo ""
  echo "    --model_output"
  echo "        type: file, output, file must exist"
  echo "        default: model"
  echo "        Output directory for model"
  echo ""
  echo "    --output_uns_parameters"
  echo "        type: string"
  echo "        default: xgboost_parameters"
  echo "        The key in \`uns\` slot of the output AnnData object to store the"
  echo "        parameters of the XGBoost classifier."
  echo ""
  echo "Learning parameters:"
  echo "    --eta, --learning_rate"
  echo "        type: double"
  echo "        default: 0.3"
  echo "        Step size shrinkage used in update to prevents overfitting. Range:"
  echo "        [0,1]. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --gamma, --min_split_loss"
  echo "        type: double"
  echo "        default: 0.0"
  echo "        Minimum loss reduction required to make a further partition on a leaf"
  echo "        node of the tree. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    -d, --max_depth"
  echo "        type: integer"
  echo "        default: 6"
  echo "        Maximum depth of a tree. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --min_child_weight"
  echo "        type: integer"
  echo "        default: 1"
  echo "        Minimum sum of instance weight (hessian) needed in a child. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --max_delta_step"
  echo "        type: double"
  echo "        default: 0.0"
  echo "        Maximum delta step we allow each leaf output to be. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --subsample"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Subsample ratio of the training instances. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --sampling_method"
  echo "        type: string"
  echo "        default: uniform"
  echo "        choices: [ uniform, gradient_based ]"
  echo "        The method to use to sample the training instances. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --colsample_bytree"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Fraction of columns to be subsampled. Range (0, 1]. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --colsample_bylevel"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Subsample ratio of columns for each level. Range (0, 1]. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --colsample_bynode"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Subsample ratio of columns for each node (split). Range (0, 1]. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --lambda, --reg_lambda"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        L2 regularization term on weights. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --alpha, --reg_alpha"
  echo "        type: double"
  echo "        default: 0.0"
  echo "        L1 regularization term on weights. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "    --scale_pos_weight"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Control the balance of positive and negative weights, useful for"
  echo "        unbalanced classes. See"
  echo "       "
  echo "https://xgboost.readthedocs.io/en/stable/parameter.html#parameters-for-tree-booster"
  echo "        for the reference"
  echo ""
  echo "Viash built in Computational Requirements:"
  echo "    ---cpus=INT"
  echo "        Number of CPUs to use"
  echo "    ---memory=STRING"
  echo "        Amount of memory to use. Examples: 4GB, 3MiB."
  echo ""
  echo "Viash built in Docker:"
  echo "    ---setup=STRATEGY"
  echo "        Setup the docker container. Options are: alwaysbuild, alwayscachedbuild, ifneedbebuild, ifneedbecachedbuild, alwayspull, alwayspullelsebuild, alwayspullelsecachedbuild, ifneedbepull, ifneedbepullelsebuild, ifneedbepullelsecachedbuild, push, pushifnotpresent, donothing."
  echo "        Default: ifneedbepullelsecachedbuild"
  echo "    ---dockerfile"
  echo "        Print the dockerfile to stdout."
  echo "    ---docker_run_args=ARG"
  echo "        Provide runtime arguments to Docker. See the documentation on \`docker run\` for more information."
  echo "    ---docker_image_id"
  echo "        Print the docker image id to stdout."
  echo "    ---debug"
  echo "        Enter the docker container for debugging purposes."
  echo ""
  echo "Viash built in Engines:"
  echo "    ---engine=ENGINE_ID"
  echo "        Specify the engine to use. Options are: docker."
  echo "        Default: docker"
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "xgboost main_build"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_obsm_features)
            [ -n "$VIASH_PAR_INPUT_OBSM_FEATURES" ] && ViashError Bad arguments for option \'--input_obsm_features\': \'$VIASH_PAR_INPUT_OBSM_FEATURES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_OBSM_FEATURES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_obsm_features. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_obsm_features=*)
            [ -n "$VIASH_PAR_INPUT_OBSM_FEATURES" ] && ViashError Bad arguments for option \'--input_obsm_features=*\': \'$VIASH_PAR_INPUT_OBSM_FEATURES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_OBSM_FEATURES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference=*)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference=*\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_obsm_features)
            [ -n "$VIASH_PAR_REFERENCE_OBSM_FEATURES" ] && ViashError Bad arguments for option \'--reference_obsm_features\': \'$VIASH_PAR_REFERENCE_OBSM_FEATURES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_OBSM_FEATURES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_obsm_features. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_obsm_features=*)
            [ -n "$VIASH_PAR_REFERENCE_OBSM_FEATURES" ] && ViashError Bad arguments for option \'--reference_obsm_features=*\': \'$VIASH_PAR_REFERENCE_OBSM_FEATURES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE_OBSM_FEATURES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_obs_targets)
            if [ -z "$VIASH_PAR_REFERENCE_OBS_TARGETS" ]; then
              VIASH_PAR_REFERENCE_OBS_TARGETS="$2"
            else
              VIASH_PAR_REFERENCE_OBS_TARGETS="$VIASH_PAR_REFERENCE_OBS_TARGETS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference_obs_targets. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference_obs_targets=*)
            if [ -z "$VIASH_PAR_REFERENCE_OBS_TARGETS" ]; then
              VIASH_PAR_REFERENCE_OBS_TARGETS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_REFERENCE_OBS_TARGETS="$VIASH_PAR_REFERENCE_OBS_TARGETS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_obs_predictions)
            if [ -z "$VIASH_PAR_OUTPUT_OBS_PREDICTIONS" ]; then
              VIASH_PAR_OUTPUT_OBS_PREDICTIONS="$2"
            else
              VIASH_PAR_OUTPUT_OBS_PREDICTIONS="$VIASH_PAR_OUTPUT_OBS_PREDICTIONS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_predictions. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_predictions=*)
            if [ -z "$VIASH_PAR_OUTPUT_OBS_PREDICTIONS" ]; then
              VIASH_PAR_OUTPUT_OBS_PREDICTIONS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OUTPUT_OBS_PREDICTIONS="$VIASH_PAR_OUTPUT_OBS_PREDICTIONS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output_obs_probability)
            if [ -z "$VIASH_PAR_OUTPUT_OBS_PROBABILITY" ]; then
              VIASH_PAR_OUTPUT_OBS_PROBABILITY="$2"
            else
              VIASH_PAR_OUTPUT_OBS_PROBABILITY="$VIASH_PAR_OUTPUT_OBS_PROBABILITY;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_obs_probability. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_obs_probability=*)
            if [ -z "$VIASH_PAR_OUTPUT_OBS_PROBABILITY" ]; then
              VIASH_PAR_OUTPUT_OBS_PROBABILITY=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OUTPUT_OBS_PROBABILITY="$VIASH_PAR_OUTPUT_OBS_PROBABILITY;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --force_retrain)
            [ -n "$VIASH_PAR_FORCE_RETRAIN" ] && ViashError Bad arguments for option \'--force_retrain\': \'$VIASH_PAR_FORCE_RETRAIN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCE_RETRAIN=true
            shift 1
            ;;
        -f)
            [ -n "$VIASH_PAR_FORCE_RETRAIN" ] && ViashError Bad arguments for option \'-f\': \'$VIASH_PAR_FORCE_RETRAIN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCE_RETRAIN=true
            shift 1
            ;;
        --use_gpu)
            [ -n "$VIASH_PAR_USE_GPU" ] && ViashError Bad arguments for option \'--use_gpu\': \'$VIASH_PAR_USE_GPU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_GPU="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --use_gpu. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --use_gpu=*)
            [ -n "$VIASH_PAR_USE_GPU" ] && ViashError Bad arguments for option \'--use_gpu=*\': \'$VIASH_PAR_USE_GPU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_GPU=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --verbosity)
            [ -n "$VIASH_PAR_VERBOSITY" ] && ViashError Bad arguments for option \'--verbosity\': \'$VIASH_PAR_VERBOSITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --verbosity. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --verbosity=*)
            [ -n "$VIASH_PAR_VERBOSITY" ] && ViashError Bad arguments for option \'--verbosity=*\': \'$VIASH_PAR_VERBOSITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -v)
            [ -n "$VIASH_PAR_VERBOSITY" ] && ViashError Bad arguments for option \'-v\': \'$VIASH_PAR_VERBOSITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -v. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model_output)
            [ -n "$VIASH_PAR_MODEL_OUTPUT" ] && ViashError Bad arguments for option \'--model_output\': \'$VIASH_PAR_MODEL_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --model_output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model_output=*)
            [ -n "$VIASH_PAR_MODEL_OUTPUT" ] && ViashError Bad arguments for option \'--model_output=*\': \'$VIASH_PAR_MODEL_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_uns_parameters)
            [ -n "$VIASH_PAR_OUTPUT_UNS_PARAMETERS" ] && ViashError Bad arguments for option \'--output_uns_parameters\': \'$VIASH_PAR_OUTPUT_UNS_PARAMETERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_UNS_PARAMETERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_uns_parameters. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_uns_parameters=*)
            [ -n "$VIASH_PAR_OUTPUT_UNS_PARAMETERS" ] && ViashError Bad arguments for option \'--output_uns_parameters=*\': \'$VIASH_PAR_OUTPUT_UNS_PARAMETERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_UNS_PARAMETERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --learning_rate)
            [ -n "$VIASH_PAR_LEARNING_RATE" ] && ViashError Bad arguments for option \'--learning_rate\': \'$VIASH_PAR_LEARNING_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LEARNING_RATE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --learning_rate. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --learning_rate=*)
            [ -n "$VIASH_PAR_LEARNING_RATE" ] && ViashError Bad arguments for option \'--learning_rate=*\': \'$VIASH_PAR_LEARNING_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LEARNING_RATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --eta)
            [ -n "$VIASH_PAR_LEARNING_RATE" ] && ViashError Bad arguments for option \'--eta\': \'$VIASH_PAR_LEARNING_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LEARNING_RATE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --eta. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_split_loss)
            [ -n "$VIASH_PAR_MIN_SPLIT_LOSS" ] && ViashError Bad arguments for option \'--min_split_loss\': \'$VIASH_PAR_MIN_SPLIT_LOSS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_SPLIT_LOSS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_split_loss. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_split_loss=*)
            [ -n "$VIASH_PAR_MIN_SPLIT_LOSS" ] && ViashError Bad arguments for option \'--min_split_loss=*\': \'$VIASH_PAR_MIN_SPLIT_LOSS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_SPLIT_LOSS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --gamma)
            [ -n "$VIASH_PAR_MIN_SPLIT_LOSS" ] && ViashError Bad arguments for option \'--gamma\': \'$VIASH_PAR_MIN_SPLIT_LOSS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_SPLIT_LOSS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --gamma. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_depth)
            [ -n "$VIASH_PAR_MAX_DEPTH" ] && ViashError Bad arguments for option \'--max_depth\': \'$VIASH_PAR_MAX_DEPTH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_DEPTH="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_depth. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_depth=*)
            [ -n "$VIASH_PAR_MAX_DEPTH" ] && ViashError Bad arguments for option \'--max_depth=*\': \'$VIASH_PAR_MAX_DEPTH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_DEPTH=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -d)
            [ -n "$VIASH_PAR_MAX_DEPTH" ] && ViashError Bad arguments for option \'-d\': \'$VIASH_PAR_MAX_DEPTH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_DEPTH="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -d. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_child_weight)
            [ -n "$VIASH_PAR_MIN_CHILD_WEIGHT" ] && ViashError Bad arguments for option \'--min_child_weight\': \'$VIASH_PAR_MIN_CHILD_WEIGHT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_CHILD_WEIGHT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_child_weight. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_child_weight=*)
            [ -n "$VIASH_PAR_MIN_CHILD_WEIGHT" ] && ViashError Bad arguments for option \'--min_child_weight=*\': \'$VIASH_PAR_MIN_CHILD_WEIGHT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_CHILD_WEIGHT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_delta_step)
            [ -n "$VIASH_PAR_MAX_DELTA_STEP" ] && ViashError Bad arguments for option \'--max_delta_step\': \'$VIASH_PAR_MAX_DELTA_STEP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_DELTA_STEP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_delta_step. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_delta_step=*)
            [ -n "$VIASH_PAR_MAX_DELTA_STEP" ] && ViashError Bad arguments for option \'--max_delta_step=*\': \'$VIASH_PAR_MAX_DELTA_STEP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_DELTA_STEP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --subsample)
            [ -n "$VIASH_PAR_SUBSAMPLE" ] && ViashError Bad arguments for option \'--subsample\': \'$VIASH_PAR_SUBSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSAMPLE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --subsample. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --subsample=*)
            [ -n "$VIASH_PAR_SUBSAMPLE" ] && ViashError Bad arguments for option \'--subsample=*\': \'$VIASH_PAR_SUBSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSAMPLE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --sampling_method)
            [ -n "$VIASH_PAR_SAMPLING_METHOD" ] && ViashError Bad arguments for option \'--sampling_method\': \'$VIASH_PAR_SAMPLING_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SAMPLING_METHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --sampling_method. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --sampling_method=*)
            [ -n "$VIASH_PAR_SAMPLING_METHOD" ] && ViashError Bad arguments for option \'--sampling_method=*\': \'$VIASH_PAR_SAMPLING_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SAMPLING_METHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --colsample_bytree)
            [ -n "$VIASH_PAR_COLSAMPLE_BYTREE" ] && ViashError Bad arguments for option \'--colsample_bytree\': \'$VIASH_PAR_COLSAMPLE_BYTREE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYTREE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --colsample_bytree. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --colsample_bytree=*)
            [ -n "$VIASH_PAR_COLSAMPLE_BYTREE" ] && ViashError Bad arguments for option \'--colsample_bytree=*\': \'$VIASH_PAR_COLSAMPLE_BYTREE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYTREE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --colsample_bylevel)
            [ -n "$VIASH_PAR_COLSAMPLE_BYLEVEL" ] && ViashError Bad arguments for option \'--colsample_bylevel\': \'$VIASH_PAR_COLSAMPLE_BYLEVEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYLEVEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --colsample_bylevel. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --colsample_bylevel=*)
            [ -n "$VIASH_PAR_COLSAMPLE_BYLEVEL" ] && ViashError Bad arguments for option \'--colsample_bylevel=*\': \'$VIASH_PAR_COLSAMPLE_BYLEVEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYLEVEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --colsample_bynode)
            [ -n "$VIASH_PAR_COLSAMPLE_BYNODE" ] && ViashError Bad arguments for option \'--colsample_bynode\': \'$VIASH_PAR_COLSAMPLE_BYNODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYNODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --colsample_bynode. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --colsample_bynode=*)
            [ -n "$VIASH_PAR_COLSAMPLE_BYNODE" ] && ViashError Bad arguments for option \'--colsample_bynode=*\': \'$VIASH_PAR_COLSAMPLE_BYNODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COLSAMPLE_BYNODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reg_lambda)
            [ -n "$VIASH_PAR_REG_LAMBDA" ] && ViashError Bad arguments for option \'--reg_lambda\': \'$VIASH_PAR_REG_LAMBDA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_LAMBDA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reg_lambda. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reg_lambda=*)
            [ -n "$VIASH_PAR_REG_LAMBDA" ] && ViashError Bad arguments for option \'--reg_lambda=*\': \'$VIASH_PAR_REG_LAMBDA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_LAMBDA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lambda)
            [ -n "$VIASH_PAR_REG_LAMBDA" ] && ViashError Bad arguments for option \'--lambda\': \'$VIASH_PAR_REG_LAMBDA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_LAMBDA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lambda. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reg_alpha)
            [ -n "$VIASH_PAR_REG_ALPHA" ] && ViashError Bad arguments for option \'--reg_alpha\': \'$VIASH_PAR_REG_ALPHA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_ALPHA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reg_alpha. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reg_alpha=*)
            [ -n "$VIASH_PAR_REG_ALPHA" ] && ViashError Bad arguments for option \'--reg_alpha=*\': \'$VIASH_PAR_REG_ALPHA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_ALPHA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --alpha)
            [ -n "$VIASH_PAR_REG_ALPHA" ] && ViashError Bad arguments for option \'--alpha\': \'$VIASH_PAR_REG_ALPHA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_ALPHA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --alpha. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scale_pos_weight)
            [ -n "$VIASH_PAR_SCALE_POS_WEIGHT" ] && ViashError Bad arguments for option \'--scale_pos_weight\': \'$VIASH_PAR_SCALE_POS_WEIGHT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCALE_POS_WEIGHT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --scale_pos_weight. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scale_pos_weight=*)
            [ -n "$VIASH_PAR_SCALE_POS_WEIGHT" ] && ViashError Bad arguments for option \'--scale_pos_weight=*\': \'$VIASH_PAR_SCALE_POS_WEIGHT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCALE_POS_WEIGHT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---setup)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$2"
            shift 2
            ;;
        ---setup=*)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---dockerfile)
            VIASH_MODE='dockerfile'
            shift 1
            ;;
        ---docker_run_args)
            VIASH_DOCKER_RUN_ARGS+=("$2")
            shift 2
            ;;
        ---docker_run_args=*)
            VIASH_DOCKER_RUN_ARGS+=("$(ViashRemoveFlags "$1")")
            shift 1
            ;;
        ---docker_image_id)
            VIASH_MODE='docker_image_id'
            shift 1
            ;;
        ---debug)
            VIASH_MODE='debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "docker" ]  ; then
  VIASH_ENGINE_TYPE='docker'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: docker."
  exit 1
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # check if docker is installed properly
  ViashDockerInstallationCheck

  # determine docker image id
  if [[ "$VIASH_ENGINE_ID" == 'docker' ]]; then
    VIASH_DOCKER_IMAGE_ID='ghcr.io/openpipelines-bio/openpipeline/labels_transfer/xgboost:main_build'
  fi

  # print dockerfile
  if [ "$VIASH_MODE" == "dockerfile" ]; then
    ViashDockerfile "$VIASH_ENGINE_ID"
    exit 0

  elif [ "$VIASH_MODE" == "docker_image_id" ]; then
    echo "$VIASH_DOCKER_IMAGE_ID"
    exit 0
  
  # enter docker container
  elif [[ "$VIASH_MODE" == "debug" ]]; then
    VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} -v '$(pwd)':/pwd --workdir /pwd -t $VIASH_DOCKER_IMAGE_ID"
    ViashNotice "+ $VIASH_CMD"
    eval $VIASH_CMD
    exit 

  # build docker image
  elif [ "$VIASH_MODE" == "setup" ]; then
    ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" "$VIASH_SETUP_STRATEGY"
    ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
    exit 0
  fi

  # check if docker image exists
  ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" ifneedbepullelsecachedbuild
  ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_REFERENCE_OBS_TARGETS+x} ]; then
  VIASH_PAR_REFERENCE_OBS_TARGETS="ann_level_1;ann_level_2;ann_level_3;ann_level_4;ann_level_5;ann_finest_level"
fi
if [ -z ${VIASH_PAR_FORCE_RETRAIN+x} ]; then
  VIASH_PAR_FORCE_RETRAIN="false"
fi
if [ -z ${VIASH_PAR_USE_GPU+x} ]; then
  VIASH_PAR_USE_GPU="false"
fi
if [ -z ${VIASH_PAR_VERBOSITY+x} ]; then
  VIASH_PAR_VERBOSITY="1"
fi
if [ -z ${VIASH_PAR_MODEL_OUTPUT+x} ]; then
  VIASH_PAR_MODEL_OUTPUT="model"
fi
if [ -z ${VIASH_PAR_OUTPUT_UNS_PARAMETERS+x} ]; then
  VIASH_PAR_OUTPUT_UNS_PARAMETERS="xgboost_parameters"
fi
if [ -z ${VIASH_PAR_LEARNING_RATE+x} ]; then
  VIASH_PAR_LEARNING_RATE="0.3"
fi
if [ -z ${VIASH_PAR_MIN_SPLIT_LOSS+x} ]; then
  VIASH_PAR_MIN_SPLIT_LOSS="0.0"
fi
if [ -z ${VIASH_PAR_MAX_DEPTH+x} ]; then
  VIASH_PAR_MAX_DEPTH="6"
fi
if [ -z ${VIASH_PAR_MIN_CHILD_WEIGHT+x} ]; then
  VIASH_PAR_MIN_CHILD_WEIGHT="1"
fi
if [ -z ${VIASH_PAR_MAX_DELTA_STEP+x} ]; then
  VIASH_PAR_MAX_DELTA_STEP="0.0"
fi
if [ -z ${VIASH_PAR_SUBSAMPLE+x} ]; then
  VIASH_PAR_SUBSAMPLE="1.0"
fi
if [ -z ${VIASH_PAR_SAMPLING_METHOD+x} ]; then
  VIASH_PAR_SAMPLING_METHOD="uniform"
fi
if [ -z ${VIASH_PAR_COLSAMPLE_BYTREE+x} ]; then
  VIASH_PAR_COLSAMPLE_BYTREE="1.0"
fi
if [ -z ${VIASH_PAR_COLSAMPLE_BYLEVEL+x} ]; then
  VIASH_PAR_COLSAMPLE_BYLEVEL="1.0"
fi
if [ -z ${VIASH_PAR_COLSAMPLE_BYNODE+x} ]; then
  VIASH_PAR_COLSAMPLE_BYNODE="1.0"
fi
if [ -z ${VIASH_PAR_REG_LAMBDA+x} ]; then
  VIASH_PAR_REG_LAMBDA="1.0"
fi
if [ -z ${VIASH_PAR_REG_ALPHA+x} ]; then
  VIASH_PAR_REG_ALPHA="0.0"
fi
if [ -z ${VIASH_PAR_SCALE_POS_WEIGHT+x} ]; then
  VIASH_PAR_SCALE_POS_WEIGHT="1.0"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ] && [ ! -e "$VIASH_PAR_REFERENCE" ]; then
  ViashError "Input file '$VIASH_PAR_REFERENCE' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_FORCE_RETRAIN" ]]; then
  if ! [[ "$VIASH_PAR_FORCE_RETRAIN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--force_retrain' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_USE_GPU" ]]; then
  if ! [[ "$VIASH_PAR_USE_GPU" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--use_gpu' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_VERBOSITY" ]]; then
  if ! [[ "$VIASH_PAR_VERBOSITY" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--verbosity' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_LEARNING_RATE" ]]; then
  if ! [[ "$VIASH_PAR_LEARNING_RATE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--learning_rate' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_SPLIT_LOSS" ]]; then
  if ! [[ "$VIASH_PAR_MIN_SPLIT_LOSS" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--min_split_loss' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MAX_DEPTH" ]]; then
  if ! [[ "$VIASH_PAR_MAX_DEPTH" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_depth' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_CHILD_WEIGHT" ]]; then
  if ! [[ "$VIASH_PAR_MIN_CHILD_WEIGHT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_child_weight' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MAX_DELTA_STEP" ]]; then
  if ! [[ "$VIASH_PAR_MAX_DELTA_STEP" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--max_delta_step' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SUBSAMPLE" ]]; then
  if ! [[ "$VIASH_PAR_SUBSAMPLE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--subsample' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_COLSAMPLE_BYTREE" ]]; then
  if ! [[ "$VIASH_PAR_COLSAMPLE_BYTREE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--colsample_bytree' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_COLSAMPLE_BYLEVEL" ]]; then
  if ! [[ "$VIASH_PAR_COLSAMPLE_BYLEVEL" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--colsample_bylevel' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_COLSAMPLE_BYNODE" ]]; then
  if ! [[ "$VIASH_PAR_COLSAMPLE_BYNODE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--colsample_bynode' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_REG_LAMBDA" ]]; then
  if ! [[ "$VIASH_PAR_REG_LAMBDA" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--reg_lambda' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_REG_ALPHA" ]]; then
  if ! [[ "$VIASH_PAR_REG_ALPHA" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--reg_alpha' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SCALE_POS_WEIGHT" ]]; then
  if ! [[ "$VIASH_PAR_SCALE_POS_WEIGHT" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--scale_pos_weight' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip;lzf")
  IFS=';'
  set -f
  if ! [[ ";${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]};" =~ ";$VIASH_PAR_OUTPUT_COMPRESSION;" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_SAMPLING_METHOD" ]; then
  VIASH_PAR_SAMPLING_METHOD_CHOICES=("uniform;gradient_based")
  IFS=';'
  set -f
  if ! [[ ";${VIASH_PAR_SAMPLING_METHOD_CHOICES[*]};" =~ ";$VIASH_PAR_SAMPLING_METHOD;" ]]; then
    ViashError '--sampling_method' specified value of \'$VIASH_PAR_SAMPLING_METHOD\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi
if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_MODEL_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_MODEL_OUTPUT")"
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # detect volumes from file arguments
  VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_INPUT")" )
  VIASH_PAR_INPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_REFERENCE")" )
  VIASH_PAR_REFERENCE=$(ViashDockerAutodetectMount "$VIASH_PAR_REFERENCE")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_MODEL_OUTPUT")" )
  VIASH_PAR_MODEL_OUTPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_MODEL_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_MODEL_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashDockerAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashDockerAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashDockerAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashDockerAutodetectMount "$VIASH_META_TEMP_DIR")
fi
  
  # get unique mounts
  VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_DIRECTORY_MOUNTS[@]}"; do echo "$val"; done | sort -u))
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # change file ownership
  function ViashPerformChown {
    if (( ${#VIASH_CHOWN_VARS[@]} )); then
      set +e
      VIASH_CMD="docker run --entrypoint=bash --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID -c 'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
      ViashDebug "+ $VIASH_CMD"
      eval $VIASH_CMD
      set -e
    fi
  }
  trap ViashPerformChown EXIT
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # helper function for filling in extra docker args
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--memory=${VIASH_META_MEMORY_B}")
  fi
  if [ ! -z "$VIASH_META_CPUS" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--cpus=${VIASH_META_CPUS}")
  fi
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID"
fi


# set dependency paths


ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-xgboost-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import sys
import json
import os
from typing import Optional
import yaml
from pathlib import Path

import mudata
import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder


### VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'input_obsm_features': $( if [ ! -z ${VIASH_PAR_INPUT_OBSM_FEATURES+x} ]; then echo "r'${VIASH_PAR_INPUT_OBSM_FEATURES//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'reference': $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "r'${VIASH_PAR_REFERENCE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'reference_obsm_features': $( if [ ! -z ${VIASH_PAR_REFERENCE_OBSM_FEATURES+x} ]; then echo "r'${VIASH_PAR_REFERENCE_OBSM_FEATURES//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'reference_obs_targets': $( if [ ! -z ${VIASH_PAR_REFERENCE_OBS_TARGETS+x} ]; then echo "r'${VIASH_PAR_REFERENCE_OBS_TARGETS//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_obs_predictions': $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_PREDICTIONS+x} ]; then echo "r'${VIASH_PAR_OUTPUT_OBS_PREDICTIONS//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output_obs_probability': $( if [ ! -z ${VIASH_PAR_OUTPUT_OBS_PROBABILITY+x} ]; then echo "r'${VIASH_PAR_OUTPUT_OBS_PROBABILITY//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'force_retrain': $( if [ ! -z ${VIASH_PAR_FORCE_RETRAIN+x} ]; then echo "r'${VIASH_PAR_FORCE_RETRAIN//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'use_gpu': $( if [ ! -z ${VIASH_PAR_USE_GPU+x} ]; then echo "r'${VIASH_PAR_USE_GPU//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'verbosity': $( if [ ! -z ${VIASH_PAR_VERBOSITY+x} ]; then echo "int(r'${VIASH_PAR_VERBOSITY//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'model_output': $( if [ ! -z ${VIASH_PAR_MODEL_OUTPUT+x} ]; then echo "r'${VIASH_PAR_MODEL_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_uns_parameters': $( if [ ! -z ${VIASH_PAR_OUTPUT_UNS_PARAMETERS+x} ]; then echo "r'${VIASH_PAR_OUTPUT_UNS_PARAMETERS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'learning_rate': $( if [ ! -z ${VIASH_PAR_LEARNING_RATE+x} ]; then echo "float(r'${VIASH_PAR_LEARNING_RATE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'min_split_loss': $( if [ ! -z ${VIASH_PAR_MIN_SPLIT_LOSS+x} ]; then echo "float(r'${VIASH_PAR_MIN_SPLIT_LOSS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'max_depth': $( if [ ! -z ${VIASH_PAR_MAX_DEPTH+x} ]; then echo "int(r'${VIASH_PAR_MAX_DEPTH//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'min_child_weight': $( if [ ! -z ${VIASH_PAR_MIN_CHILD_WEIGHT+x} ]; then echo "int(r'${VIASH_PAR_MIN_CHILD_WEIGHT//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'max_delta_step': $( if [ ! -z ${VIASH_PAR_MAX_DELTA_STEP+x} ]; then echo "float(r'${VIASH_PAR_MAX_DELTA_STEP//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'subsample': $( if [ ! -z ${VIASH_PAR_SUBSAMPLE+x} ]; then echo "float(r'${VIASH_PAR_SUBSAMPLE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'sampling_method': $( if [ ! -z ${VIASH_PAR_SAMPLING_METHOD+x} ]; then echo "r'${VIASH_PAR_SAMPLING_METHOD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'colsample_bytree': $( if [ ! -z ${VIASH_PAR_COLSAMPLE_BYTREE+x} ]; then echo "float(r'${VIASH_PAR_COLSAMPLE_BYTREE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'colsample_bylevel': $( if [ ! -z ${VIASH_PAR_COLSAMPLE_BYLEVEL+x} ]; then echo "float(r'${VIASH_PAR_COLSAMPLE_BYLEVEL//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'colsample_bynode': $( if [ ! -z ${VIASH_PAR_COLSAMPLE_BYNODE+x} ]; then echo "float(r'${VIASH_PAR_COLSAMPLE_BYNODE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'reg_lambda': $( if [ ! -z ${VIASH_PAR_REG_LAMBDA+x} ]; then echo "float(r'${VIASH_PAR_REG_LAMBDA//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'reg_alpha': $( if [ ! -z ${VIASH_PAR_REG_ALPHA+x} ]; then echo "float(r'${VIASH_PAR_REG_ALPHA//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'scale_pos_weight': $( if [ ! -z ${VIASH_PAR_SCALE_POS_WEIGHT+x} ]; then echo "float(r'${VIASH_PAR_SCALE_POS_WEIGHT//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
meta = {
  'name': $( if [ ! -z ${VIASH_META_NAME+x} ]; then echo "r'${VIASH_META_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kib': $( if [ ! -z ${VIASH_META_MEMORY_KIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mib': $( if [ ! -z ${VIASH_META_MEMORY_MIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gib': $( if [ ! -z ${VIASH_META_MEMORY_GIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tib': $( if [ ! -z ${VIASH_META_MEMORY_TIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pib': $( if [ ! -z ${VIASH_META_MEMORY_PIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PIB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

### VIASH END

sys.path.append(meta["resources_dir"])
from helper import check_arguments, get_reference_features, get_query_features
from setup_logger import setup_logger
from compress_h5mu import write_h5ad_to_h5mu_with_compression

logger = setup_logger()

# read config arguments
config = yaml.safe_load(Path(meta["config"]).read_text())

# look for training params for method
argument_groups = {grp["name"]: grp["arguments"] for grp in config["argument_groups"]}
training_arg_names = [
    arg["name"].replace("--", "") for arg in argument_groups["Learning parameters"]
]
training_params = {arg_name: par[arg_name] for arg_name in training_arg_names}


def encode_labels(y):
    labels_encoder = LabelEncoder()
    labels_encoder.fit(y)

    return labels_encoder.transform(y), labels_encoder


def get_model_eval(xgb_model, X_test, y_test, labels_encoder):
    preds = xgb_model.predict(X_test)

    cr = classification_report(
        labels_encoder.inverse_transform(y_test),
        labels_encoder.inverse_transform(preds),
        output_dict=True,
    )
    cr_df = pd.DataFrame(cr).transpose()

    return cr_df


def train_test_split_adata(adata, labels):
    train_data = pd.DataFrame(data=adata.X, index=adata.obs_names)

    X_train, X_test, y_train, y_test = train_test_split(
        train_data, labels, test_size=0.2, random_state=42, stratify=labels
    )

    return X_train, X_test, y_train, y_test


def train_xgb_model(X_train, y_train, gpu=True) -> xgb.XGBClassifier:
    n_classes = len(np.unique(y_train))
    objective = "binary:logistic" if n_classes == 2 else "multi:softprob"

    tree_method = "gpu_hist" if gpu else "hist"
    xgbc = xgb.XGBClassifier(
        tree_method=tree_method, objective=objective, **training_params
    )
    xgbc.fit(X_train, y_train)

    return xgbc


def build_classifier(
    X, y, labels_encoder, label_key, eval_verbosity: Optional[int] = 1, gpu=True
) -> xgb.XGBClassifier:
    # Adata prep
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    # Note: Do we need a new train-test split for each classifier?

    # Model training
    xgb_model = train_xgb_model(X_train, y_train, gpu=gpu)

    # Model eval
    if eval_verbosity != 0:
        cr_df = get_model_eval(xgb_model, X_test, y_test, labels_encoder)

        if eval_verbosity == 2:
            print(cr_df)

        else:
            overall_accuracy = cr_df["support"]["accuracy"]
            low_prec_key = cr_df.precision.idxmin()
            low_prec_val = cr_df.precision.min()
            low_rec_key = cr_df.recall.idxmin()
            low_rec_val = cr_df.recall.min()
            low_f1_key = cr_df["f1-score"].idxmin()
            low_f1_val = cr_df["f1-score"].min()

            print("")
            print(f"Summary stats for {label_key} model:")
            print(f"Overall accuracy: {overall_accuracy}")
            print(f"Min. precision: {low_prec_key}: {low_prec_val}")
            print(f"Min. Recall: {low_rec_key}: {low_rec_val}")
            print(f"Min. F1-score: {low_f1_key}: {low_f1_val}")
            print("")

    return xgb_model


def build_ref_classifiers(
    adata_reference,
    targets,
    model_path,
    eval_verbosity: Optional[int] = 1,
    gpu: Optional[bool] = True,
) -> None:
    """
    This function builds xgboost classifiers on a reference embedding for a designated number of
    adata_reference.obs columns. Classifier .xgb files and a model_info.json file is written to the \`model_path\`
    directory. Model evaluation is printed to stdout.

    Inputs:
        * \`adata_reference\`: The AnnData object that was used to train the reference model
        * \`model_path\`: The reference model directory where the classifiers will also be stored
        * \`eval_verbosity\`: The verbosity level for evaluation of the classifier from the range [0;2].
        * \`gpu\`: Boolean indicating whether a gpu is available for classifier training


    Example:
    \`\`\`
    >>> adata
    AnnData object with n_obs x n_vars = 700 x 765
    obs: "ann_finest_level", "ann_level_1"

    >>> os.listdir("/path/to/model")
    model_params.pt*

    >>> build_ref_classifiers(adata, "path/to/model", eval_verbosity=1, gpu=True)
    >>> os.listdir("/path/to/model")
    classifier_ann_finest_level.xgb*    model_info.json*
    classifier_ann_level_1.xgb*         model_params.pt*
    \`\`\`
    """

    # Check inputs
    if not isinstance(eval_verbosity, int):
        raise TypeError("\`eval_verbosity\` should be an integer between 0 and 2.")

    if eval_verbosity < 0 or eval_verbosity > 2:
        raise ValueError("\`eval_verbosity\` should be an integer between 0 and 2.")

    train_data = get_reference_features(adata_reference, par, logger)

    if not os.path.exists(model_path):
        os.makedirs(model_path, exist_ok=True)

    # Map from name of classifier to file names
    classifiers = dict()

    for label, obs_pred in zip(targets, par["output_obs_predictions"]):
        if label not in adata_reference.obs:
            raise ValueError(f"{label} is not in the \`adata\` object passed!")

        filename = "classifier_" + label + ".xgb"

        labels, labels_encoder = encode_labels(adata_reference.obs[label])
        logger.info(f"Classes: {labels_encoder.classes_}")

        logger.info(f"Building classifier for {label}...")
        xgb_model = build_classifier(
            X=train_data,
            y=labels,
            labels_encoder=labels_encoder,
            label_key=label,
            eval_verbosity=eval_verbosity,
            gpu=gpu,
        )

        # Save classifier
        logger.info("Saving model")
        xgb_model.save_model(os.path.join(model_path, filename))

        # Store classifier info
        classifiers[label] = {
            "filename": filename,
            "labels": labels_encoder.classes_.tolist(),
            "obs_column": obs_pred,
            "model_params": training_params,
        }

    # Store model_info.json file
    model_info = {"classifier_info": classifiers}

    logger.info("Writing model_info to the file")
    # Read previous file if it exists
    if os.path.exists(model_path + "/model_info.json"):
        logger.info("Old model_info file found, updating")
        with open(model_path + "/model_info.json", "r") as f:
            old_model_info = json.loads(f.read())

        for key in old_model_info:
            if key in model_info:
                old_model_info[key].update(model_info[key])
        json_string = json.dumps(old_model_info, indent=4)

    else:
        logger.info("Creating a new file")
        json_string = json.dumps(model_info, indent=4)

    with open(model_path + "/model_info.json", "w") as f:
        f.write(json_string)


def project_labels(
    query_dataset,
    cell_type_classifier_model: xgb.XGBClassifier,
    annotation_column_name="label_pred",
    probability_column_name="label_probability",
    probability_thresh=None,  # Note: currently not passed to predict function
):
    """
    A function that projects predicted labels onto the query dataset, along with probability estimations.
    Performs in-place update of the adata object, adding columns to the \`obs\` DataFrame.

    Input:
        * \`query_dataset\`: The query \`AnnData\` object
        * \`model_file\`: Path to the classification model file
        * \`prediction_key\`: Column name in \`adata.obs\` where to store the predicted labels
        * \`probability_key\`: Column name in \`adata.obs\` where to store the labels probabilities
        * \`probability_thresh\`: The probability threshold below which we call a cell 'Unknown'

    Output:
        Nothing is output, the passed anndata is modified inplace

    """

    if (probability_thresh is not None) and (
        probability_thresh < 0 or probability_thresh > 1
    ):
        raise ValueError("\`probability_thresh\` must be \`None\` or between 0 and 1.")

    query_data = get_query_features(query_dataset, par, logger)

    # Predict labels and probabilities
    query_dataset.obs[annotation_column_name] = cell_type_classifier_model.predict(
        query_data
    )

    logger.info("Predicting probabilities")
    probs = cell_type_classifier_model.predict_proba(query_data)

    # Format probabilities
    df_probs = pd.DataFrame(
        probs,
        columns=cell_type_classifier_model.classes_,
        index=query_dataset.obs_names,
    )
    query_dataset.obs[probability_column_name] = df_probs.max(1)

    # Note: this is here in case we want to propose a set of values for the user to accept to seed the
    #       manual curation of predicted labels
    if probability_thresh is not None:
        logger.info("Marking uncertain predictions")
        query_dataset.obs[annotation_column_name + "_filtered"] = [
            val
            if query_dataset.obs[probability_column_name][i] >= probability_thresh
            else "Unknown"
            for i, val in enumerate(query_dataset.obs[annotation_column_name])
        ]

    return query_dataset


def predict(
    query_dataset,
    cell_type_classifier_model_path,
    annotation_column_name: str,
    prediction_column_name: str,
    probability_column_name: str,
    models_info,
    use_gpu: bool = False,
) -> pd.DataFrame:
    """
    Returns \`obs\` DataFrame with prediction columns appended
    """

    tree_method = "gpu_hist" if use_gpu else "hist"

    labels = models_info["classifier_info"][annotation_column_name]["labels"]

    objective = "binary:logistic" if len(labels) == 2 else "multi:softprob"
    cell_type_classifier_model = xgb.XGBClassifier(
        tree_method=tree_method, objective=objective
    )

    logger.info("Loading model")
    cell_type_classifier_model.load_model(fname=cell_type_classifier_model_path)

    logger.info("Predicting labels")
    project_labels(
        query_dataset,
        cell_type_classifier_model,
        annotation_column_name=prediction_column_name,
        probability_column_name=probability_column_name,
    )

    logger.info("Converting labels from numbers to classes")
    labels_encoder = LabelEncoder()
    labels_encoder.classes_ = np.array(labels)
    query_dataset.obs[prediction_column_name] = labels_encoder.inverse_transform(
        query_dataset.obs[prediction_column_name]
    )

    return query_dataset


def main(par):
    logger.info("Checking arguments")
    par = check_arguments(par)

    adata_query = mudata.read_h5ad(par["input"].strip(), mod=par["modality"])
    adata_reference = mudata.read_h5ad(par["reference"], mod=par["modality"])

    # If classifiers for targets are in the model_output directory, simply open them and run (unless \`retrain\` != True)
    # If some classifiers are missing, train and save them first
    # Predict and save the query data

    targets_to_train = []

    for obs_target in par["reference_obs_targets"]:
        if (
            not os.path.exists(par["model_output"])
            or f"classifier_{obs_target}.xgb" not in os.listdir(par["model_output"])
            or par["force_retrain"]
        ):
            logger.info(f"Classifier for {obs_target} added to a training schedule")
            targets_to_train.append(obs_target)
        else:
            logger.info(f"Found classifier for {obs_target}, no retraining required")

    build_ref_classifiers(
        adata_reference,
        targets_to_train,
        model_path=par["model_output"],
        gpu=par["use_gpu"],
        eval_verbosity=par["verbosity"],
    )

    output_uns_parameters = adata_query.uns.get(par["output_uns_parameters"], {})

    with open(par["model_output"] + "/model_info.json", "r") as f:
        models_info = json.loads(f.read())

    for obs_target, obs_pred, obs_unc in zip(
        par["reference_obs_targets"],
        par["output_obs_predictions"],
        par["output_obs_probability"],
    ):
        logger.info(f"Predicting {obs_target}")

        adata_query = predict(
            query_dataset=adata_query,
            cell_type_classifier_model_path=os.path.join(
                par["model_output"], "classifier_" + obs_target + ".xgb"
            ),
            annotation_column_name=obs_target,
            prediction_column_name=obs_pred,
            probability_column_name=obs_unc,
            models_info=models_info,
            use_gpu=par["use_gpu"],
        )

        if obs_target in targets_to_train:
            # Save information about the transfer to .uns
            output_uns_parameters[obs_target] = {
                "method": "XGBClassifier",
                **training_params,
            }

    adata_query.uns[par["output_uns_parameters"]] = output_uns_parameters

    logger.info("Writing output to %s", par["output"])
    write_h5ad_to_h5mu_with_compression(
        par["output"], par["input"], par["modality"], adata_query, None
    )


if __name__ == "__main__":
    main(par)
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # strip viash automount from file paths
  
  if [ ! -z "$VIASH_PAR_INPUT" ]; then
    VIASH_PAR_INPUT=$(ViashDockerStripAutomount "$VIASH_PAR_INPUT")
  fi
  if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
    VIASH_PAR_REFERENCE=$(ViashDockerStripAutomount "$VIASH_PAR_REFERENCE")
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
    VIASH_PAR_OUTPUT=$(ViashDockerStripAutomount "$VIASH_PAR_OUTPUT")
  fi
  if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ]; then
    VIASH_PAR_MODEL_OUTPUT=$(ViashDockerStripAutomount "$VIASH_PAR_MODEL_OUTPUT")
  fi
  if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
    VIASH_META_RESOURCES_DIR=$(ViashDockerStripAutomount "$VIASH_META_RESOURCES_DIR")
  fi
  if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
    VIASH_META_EXECUTABLE=$(ViashDockerStripAutomount "$VIASH_META_EXECUTABLE")
  fi
  if [ ! -z "$VIASH_META_CONFIG" ]; then
    VIASH_META_CONFIG=$(ViashDockerStripAutomount "$VIASH_META_CONFIG")
  fi
  if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
    VIASH_META_TEMP_DIR=$(ViashDockerStripAutomount "$VIASH_META_TEMP_DIR")
  fi
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ] && [ ! -e "$VIASH_PAR_MODEL_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_MODEL_OUTPUT' does not exist."
  exit 1
fi


exit 0
