name: "htseq_count"
namespace: "mapping"
version: "integration_build"
authors:
- name: "Robrecht Cannoodt"
  roles:
  - "author"
  - "maintainer"
  info:
    role: "Core Team Member"
    links:
      email: "robrecht@data-intuitive.com"
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
      linkedin: "robrechtcannoodt"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Science Engineer"
    - name: "Open Problems"
      href: "https://openproblems.bio"
      role: "Core Member"
- name: "Angela Oliveira Pisco"
  roles:
  - "author"
  info:
    role: "Contributor"
    links:
      github: "aopisco"
      orcid: "0000-0003-0142-2355"
      linkedin: "aopisco"
    organizations:
    - name: "Insitro"
      href: "https://insitro.com"
      role: "Director of Computational Biology"
    - name: "Open Problems"
      href: "https://openproblems.bio"
      role: "Core Member"
argument_groups:
- name: "Input"
  arguments:
  - type: "file"
    name: "--input"
    description: "Path to the SAM/BAM files containing the mapped reads."
    info:
      orig_arg: "samfilenames"
    example:
    - "mysample1.BAM"
    - "mysample2.BAM"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "file"
    name: "--reference"
    description: "Path to the GTF file containing the features."
    info:
      orig_arg: "featurefilename"
    example:
    - "reference.gtf"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Output"
  arguments:
  - type: "file"
    name: "--output"
    description: "Filename to output the counts to."
    info:
      orig_arg: "--counts_output"
    example:
    - "htseq-count.tsv"
    must_exist: true
    create_parent: true
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--output_delimiter"
    description: "Column delimiter in output."
    info:
      orig_arg: "--delimiter"
    example:
    - "\t"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "file"
    name: "--output_sam"
    description: "Write out all SAM alignment records into SAM/BAM files (one per\
      \ input file needed), \nannotating each line with its feature assignment (as\
      \ an optional field with tag 'XF'). \nSee the -p option to use BAM instead of\
      \ SAM.\n"
    info:
      orig_arg: "--samout"
    example:
    - "mysample1_out.BAM"
    - "mysample2_out.BAM"
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: true
    multiple_sep: ";"
  - type: "string"
    name: "--output_sam_format"
    description: "Format to use with the --output_sam argument."
    info:
      orig_arg: "--samout-format"
    required: false
    choices:
    - "sam"
    - "bam"
    direction: "input"
    multiple: false
    multiple_sep: ";"
- name: "Arguments"
  arguments:
  - type: "string"
    name: "--order"
    alternatives:
    - "-r"
    description: "Sorting order of <alignment_file>. Paired-end sequencing data must\
      \ be sorted either by position or\nby read name, and the sorting order must\
      \ be specified. Ignored for single-end data.\n"
    info:
      orig_arg: "--order"
    default:
    - "name"
    required: false
    choices:
    - "pos"
    - "name"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--stranded"
    alternatives:
    - "-s"
    description: "Whether the data is from a strand-specific assay. 'reverse' means\
      \ 'yes' with reversed strand interpretation."
    info:
      orig_arg: "--stranded"
    default:
    - "yes"
    required: false
    choices:
    - "yes"
    - "no"
    - "reverse"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--minimum_alignment_quality"
    alternatives:
    - "-a"
    - "--minaqual"
    description: "Skip all reads with MAPQ alignment quality lower than the given\
      \ minimum value. \nMAPQ is the 5th column of a SAM/BAM file and its usage depends\
      \ on the software \nused to map the reads.\n"
    info:
      orig_arg: "--minaqual"
    default:
    - 10
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--type"
    alternatives:
    - "-t"
    description: "Feature type (3rd column in GTF file) to be used, all features of\
      \ other type are ignored (default, suitable for Ensembl GTF files: exon)"
    info:
      orig_arg: "--type"
    example:
    - "exon"
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--id_attribute"
    alternatives:
    - "-i"
    description: "GTF attribute to be used as feature ID (default, suitable for Ensembl\
      \ GTF files: gene_id).\nAll feature of the right type (see -t option) within\
      \ the same GTF attribute will be added\ntogether. The typical way of using this\
      \ option is to count all exonic reads from each gene\nand add the exons but\
      \ other uses are possible as well. You can call this option multiple\ntimes:\
      \ in that case, the combination of all attributes separated by colons (:) will\
      \ be used\nas a unique identifier, e.g. for exons you might use -i gene_id -i\
      \ exon_number.\n"
    info:
      orig_arg: "--idattr"
    example:
    - "gene_id"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "string"
    name: "--additional_attributes"
    description: "Additional feature attributes (suitable for Ensembl GTF files: gene_name).\
      \ Use multiple times\nfor more than one additional attribute. These attributes\
      \ are only used as annotations in the\noutput, while the determination of how\
      \ the counts are added together is done based on option -i.\n"
    info:
      orig_arg: "--additional-attr"
    example:
    - "gene_name"
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
  - type: "boolean_true"
    name: "--add_chromosome_info"
    description: "Store information about the chromosome of each feature as an additional\
      \ attribute\n(e.g. colunm in the TSV output file).\n"
    info:
      orig_arg: "--add-chromosome-info"
    direction: "input"
  - type: "string"
    name: "--mode"
    alternatives:
    - "-m"
    description: "Mode to handle reads overlapping more than one feature."
    info:
      orig_arg: "--mode"
    default:
    - "union"
    required: false
    choices:
    - "union"
    - "intersection-strict"
    - "intersection-nonempty"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--non_unique"
    description: "Whether and how to score reads that are not uniquely aligned or\
      \ ambiguously assigned to features."
    info:
      orig_arg: "--nonunique"
    default:
    - "none"
    required: false
    choices:
    - "none"
    - "all"
    - "fraction"
    - "random"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--secondary_alignments"
    description: "Whether to score secondary alignments (0x100 flag)."
    info:
      orig_arg: "--secondary-alignments"
    required: false
    choices:
    - "score"
    - "ignore"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "string"
    name: "--supplementary_alignments"
    description: "Whether to score supplementary alignments (0x800 flag)."
    info:
      orig_arg: "--supplementary-alignments"
    required: false
    choices:
    - "score"
    - "ignore"
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean_true"
    name: "--counts_output_sparse"
    description: "Store the counts as a sparse matrix (mtx, h5ad, loom)."
    info:
      orig_arg: "--counts-output-sparse"
    direction: "input"
resources:
- type: "python_script"
  path: "script.py"
  is_executable: true
- type: "file"
  path: "nextflow_labels.config"
  dest: "nextflow_labels.config"
description: "Quantify gene expression for subsequent testing for differential expression.\n\
  \nThis script takes one or more alignment files in SAM/BAM format and a feature\
  \ file in GFF format and calculates for each feature the number of reads mapping\
  \ to it. \n\nSee http://htseq.readthedocs.io/en/master/count.html for details.\n"
test_resources:
- type: "python_script"
  path: "test.py"
  is_executable: true
- type: "file"
  path: "cellranger_tiny_fastq"
info: null
status: "enabled"
scope:
  image: "public"
  target: "public"
license: "MIT"
links:
  repository: "https://github.com/openpipelines-bio/openpipeline"
  docker_registry: "ghcr.io"
runners:
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
- type: "nextflow"
  id: "nextflow"
  directives:
    label:
    - "highmem"
    - "highcpu"
    - "middisk"
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1000000000.B"
      mem2gb: "memory = 2000000000.B"
      mem5gb: "memory = 5000000000.B"
      mem10gb: "memory = 10000000000.B"
      mem20gb: "memory = 20000000000.B"
      mem50gb: "memory = 50000000000.B"
      mem100gb: "memory = 100000000000.B"
      mem200gb: "memory = 200000000000.B"
      mem500gb: "memory = 500000000000.B"
      mem1tb: "memory = 1000000000000.B"
      mem2tb: "memory = 2000000000000.B"
      mem5tb: "memory = 5000000000000.B"
      mem10tb: "memory = 10000000000000.B"
      mem20tb: "memory = 20000000000000.B"
      mem50tb: "memory = 50000000000000.B"
      mem100tb: "memory = 100000000000000.B"
      mem200tb: "memory = 200000000000000.B"
      mem500tb: "memory = 500000000000000.B"
      mem1gib: "memory = 1073741824.B"
      mem2gib: "memory = 2147483648.B"
      mem4gib: "memory = 4294967296.B"
      mem8gib: "memory = 8589934592.B"
      mem16gib: "memory = 17179869184.B"
      mem32gib: "memory = 34359738368.B"
      mem64gib: "memory = 68719476736.B"
      mem128gib: "memory = 137438953472.B"
      mem256gib: "memory = 274877906944.B"
      mem512gib: "memory = 549755813888.B"
      mem1tib: "memory = 1099511627776.B"
      mem2tib: "memory = 2199023255552.B"
      mem4tib: "memory = 4398046511104.B"
      mem8tib: "memory = 8796093022208.B"
      mem16tib: "memory = 17592186044416.B"
      mem32tib: "memory = 35184372088832.B"
      mem64tib: "memory = 70368744177664.B"
      mem128tib: "memory = 140737488355328.B"
      mem256tib: "memory = 281474976710656.B"
      mem512tib: "memory = 562949953421312.B"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
    script:
    - "includeConfig(\"nextflow_labels.config\")"
  debug: false
  container: "docker"
engines:
- type: "docker"
  id: "docker"
  image: "python:3.10-slim"
  target_tag: "integration_build"
  namespace_separator: "/"
  setup:
  - type: "apt"
    packages:
    - "procps"
    interactive: false
  - type: "python"
    user: false
    packages:
    - "HTSeq"
    - "pyyaml"
    - "scipy"
    - "pandas"
    - "numpy<2"
    upgrade: true
  entrypoint: []
  cmd: null
build_info:
  config: "src/mapping/htseq_count/config.vsh.yaml"
  runner: "executable"
  engine: "docker"
  output: "target/executable/mapping/htseq_count"
  executable: "target/executable/mapping/htseq_count/htseq_count"
  viash_version: "0.9.4"
  git_commit: "8b67047dddd3239beb42e49040a1243fd02ff0bf"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
package_config:
  name: "openpipeline"
  summary: "Best-practice workflows for single-cell multi-omics analyses.\n"
  description: "OpenPipelines are extensible single cell analysis pipelines for reproducible\
    \ and large-scale single cell processing using [Viash](https://viash.io) and [Nextflow](https://www.nextflow.io/).\n\
    \nIn terms of workflows, the following has been made available, but keep in mind\
    \ that\nindividual tools and functionality can be executed as standalone components\
    \ as well.\n\n  * Demultiplexing: conversion of raw sequencing data to FASTQ objects.\n\
    \  * Ingestion: Read mapping and generating a count matrix.\n  * Single sample\
    \ processing: cell filtering and doublet detection.\n  * Multisample processing:\
    \ Count transformation, normalization, QC metric calulations.\n  * Integration:\
    \ Clustering, integration and batch correction using single and multimodal methods.\n\
    \  * Downstream analysis workflows\n"
  info:
    test_resources:
    - type: "s3"
      path: "s3://openpipelines-data"
      dest: "resources_test"
    nextflow_labels_ci:
    - path: "src/workflows/utils/labels_ci.config"
      description: "Adds the correct memory and CPU labels when running on the Viash\
        \ Hub CI."
  viash_version: "0.9.4"
  source: "src"
  target: "target"
  config_mods:
  - ".resources += {path: '/src/workflows/utils/labels.config', dest: 'nextflow_labels.config'}\n\
    .runners[.type == 'nextflow'].config.script := 'includeConfig(\"nextflow_labels.config\"\
    )'"
  - ".version := \"integration_build\""
  - ".engines[.type == 'docker'].target_tag := 'integration_build'"
  keywords:
  - "single-cell"
  - "multimodal"
  license: "MIT"
  organization: "openpipelines-bio"
  links:
    repository: "https://github.com/openpipelines-bio/openpipeline"
    docker_registry: "ghcr.io"
    homepage: "https://openpipelines.bio"
    documentation: "https://openpipelines.bio/fundamentals"
    issue_tracker: "https://github.com/openpipelines-bio/openpipeline/issues"
