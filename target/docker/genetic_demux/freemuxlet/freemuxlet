#!/usr/bin/env bash

# freemuxlet 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Xichen Wu (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="freemuxlet"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "freemuxlet 1.0.5"
  echo ""
  echo "Freemuxlet is a software tool to deconvolute sample identity and identify"
  echo "multiplets when"
  echo "multiple samples are pooled by barcoded single cell sequencing. If external"
  echo "genotyping"
  echo "data is not available, the genotyping-free version demuxlet, freemuxlet, would"
  echo "be recommended."
  echo ""
  echo "Input:"
  echo "    --plp"
  echo "        type: string"
  echo "        Prefix of input files generated by dsc-pileup"
  echo ""
  echo "    --init_cluster"
  echo "        type: file, file must exist"
  echo "        Input file containing the initial cluster information."
  echo ""
  echo "    --nsample"
  echo "        type: integer"
  echo "        default: 2"
  echo "        Number of samples multiplexed together"
  echo ""
  echo "    --aux_files"
  echo "        type: boolean_true"
  echo "        Turn on writing auxilary output files"
  echo ""
  echo "    --verbose"
  echo "        type: integer"
  echo "        default: 100"
  echo "        Turn on verbose mode with specific verbosity threshold. 0: fully"
  echo "        verbose, 100 : no verbose messages."
  echo ""
  echo "    --doublet_prior"
  echo "        type: double"
  echo "        default: 0.5"
  echo "        Prior of doublet."
  echo ""
  echo "    --geno_error"
  echo "        type: double"
  echo "        default: 0.1"
  echo "        Genotype error parameter per cluster."
  echo ""
  echo "    --bf_thres"
  echo "        type: double"
  echo "        default: 5.41"
  echo "        Bayes Factor Threshold used in the initial clustering."
  echo ""
  echo "    --frac_init_clust"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Fraction of droplets to be clustered in the very first round of initial"
  echo "        clustering procedure."
  echo ""
  echo "    --iter_init"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Iteration for initial cluster assignment (set to zero to skip the"
  echo "        iterations)."
  echo ""
  echo "    --keep_init_missing"
  echo "        type: boolean_true"
  echo "        Keep missing cluster assignment as missing in the initial iteration."
  echo ""
  echo "    --randomize_singlet_score"
  echo "        type: boolean_true"
  echo "        Randomize the singlet scores to test its effect."
  echo ""
  echo "    --seed"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Seed for random number (use clocks if not set)."
  echo ""
  echo "    --cap_bq"
  echo "        type: integer"
  echo "        default: 20"
  echo "        Maximum base quality (higher BQ will be capped)."
  echo ""
  echo "    --min_bq"
  echo "        type: integer"
  echo "        default: 13"
  echo "        Minimum base quality to consider (lower BQ will be skipped)."
  echo ""
  echo "    --group_list"
  echo "        type: string"
  echo "        List of tag readgroup/cell barcode to consider in this run. All other"
  echo "        barcodes will be ignored. This is useful for parallelized run."
  echo ""
  echo "    --min_total"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of total reads for a droplet/cell to be considered."
  echo ""
  echo "    --min_umi"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of UMIs for a droplet/cell to be considered."
  echo ""
  echo "    --min_snp"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of SNPs with coverage for a droplet/cell to be"
  echo "        considered."
  echo ""
  echo "Output:"
  echo "    -o, --output"
  echo "        type: file, output, file must exist"
  echo "        example: freemux"
  echo "        Output directory"
  echo ""
  echo "    --out"
  echo "        type: string"
  echo "        example: freemuxlet"
  echo "        freemuxlet Output file prefix"
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM ubuntu:20.04

ENTRYPOINT []

 
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y autoconf wget git build-essential libcurl4-openssl-dev cmake libbz2-dev libssl-dev liblzma-dev zlib1g-dev r-base && \
  rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/samtools/htslib.git /tmp/htslib && cd /tmp/htslib && git submodule update --init --recursive && autoreconf -i && ./configure --prefix=/usr/local/ && make && make install
RUN git clone --depth 1 https://github.com/statgen/popscle.git /tmp/popscle && mkdir -p /tmp/popscle/build && cd /tmp/popscle/build && cmake .. && make && cp /tmp/popscle/bin/popscle /usr/local/bin
RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'remotes::install_cran(c("readr", "processx", "dplyr"), repos = "https://cran.rstudio.com")'

LABEL org.opencontainers.image.authors="Xichen Wu"
LABEL org.opencontainers.image.description="Companion container for running component genetic_demux freemuxlet"
LABEL org.opencontainers.image.created="2025-04-24T13:19:34Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="bfe311bb5542f97dfe80b20a3e47a02800708f43"
LABEL org.opencontainers.image.version="1.0.5"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-freemuxlet-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "freemuxlet 1.0.5"
            exit
            ;;
        --plp)
            [ -n "$VIASH_PAR_PLP" ] && ViashError Bad arguments for option \'--plp\': \'$VIASH_PAR_PLP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --plp. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --plp=*)
            [ -n "$VIASH_PAR_PLP" ] && ViashError Bad arguments for option \'--plp=*\': \'$VIASH_PAR_PLP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --init_cluster)
            [ -n "$VIASH_PAR_INIT_CLUSTER" ] && ViashError Bad arguments for option \'--init_cluster\': \'$VIASH_PAR_INIT_CLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INIT_CLUSTER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --init_cluster. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --init_cluster=*)
            [ -n "$VIASH_PAR_INIT_CLUSTER" ] && ViashError Bad arguments for option \'--init_cluster=*\': \'$VIASH_PAR_INIT_CLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INIT_CLUSTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --nsample)
            [ -n "$VIASH_PAR_NSAMPLE" ] && ViashError Bad arguments for option \'--nsample\': \'$VIASH_PAR_NSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NSAMPLE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --nsample. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --nsample=*)
            [ -n "$VIASH_PAR_NSAMPLE" ] && ViashError Bad arguments for option \'--nsample=*\': \'$VIASH_PAR_NSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NSAMPLE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --aux_files)
            [ -n "$VIASH_PAR_AUX_FILES" ] && ViashError Bad arguments for option \'--aux_files\': \'$VIASH_PAR_AUX_FILES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_AUX_FILES=true
            shift 1
            ;;
        --verbose)
            [ -n "$VIASH_PAR_VERBOSE" ] && ViashError Bad arguments for option \'--verbose\': \'$VIASH_PAR_VERBOSE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --verbose. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --verbose=*)
            [ -n "$VIASH_PAR_VERBOSE" ] && ViashError Bad arguments for option \'--verbose=*\': \'$VIASH_PAR_VERBOSE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --doublet_prior)
            [ -n "$VIASH_PAR_DOUBLET_PRIOR" ] && ViashError Bad arguments for option \'--doublet_prior\': \'$VIASH_PAR_DOUBLET_PRIOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DOUBLET_PRIOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --doublet_prior. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --doublet_prior=*)
            [ -n "$VIASH_PAR_DOUBLET_PRIOR" ] && ViashError Bad arguments for option \'--doublet_prior=*\': \'$VIASH_PAR_DOUBLET_PRIOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DOUBLET_PRIOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --geno_error)
            [ -n "$VIASH_PAR_GENO_ERROR" ] && ViashError Bad arguments for option \'--geno_error\': \'$VIASH_PAR_GENO_ERROR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENO_ERROR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --geno_error. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --geno_error=*)
            [ -n "$VIASH_PAR_GENO_ERROR" ] && ViashError Bad arguments for option \'--geno_error=*\': \'$VIASH_PAR_GENO_ERROR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENO_ERROR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bf_thres)
            [ -n "$VIASH_PAR_BF_THRES" ] && ViashError Bad arguments for option \'--bf_thres\': \'$VIASH_PAR_BF_THRES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BF_THRES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bf_thres. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bf_thres=*)
            [ -n "$VIASH_PAR_BF_THRES" ] && ViashError Bad arguments for option \'--bf_thres=*\': \'$VIASH_PAR_BF_THRES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BF_THRES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --frac_init_clust)
            [ -n "$VIASH_PAR_FRAC_INIT_CLUST" ] && ViashError Bad arguments for option \'--frac_init_clust\': \'$VIASH_PAR_FRAC_INIT_CLUST\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FRAC_INIT_CLUST="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --frac_init_clust. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --frac_init_clust=*)
            [ -n "$VIASH_PAR_FRAC_INIT_CLUST" ] && ViashError Bad arguments for option \'--frac_init_clust=*\': \'$VIASH_PAR_FRAC_INIT_CLUST\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FRAC_INIT_CLUST=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --iter_init)
            [ -n "$VIASH_PAR_ITER_INIT" ] && ViashError Bad arguments for option \'--iter_init\': \'$VIASH_PAR_ITER_INIT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ITER_INIT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --iter_init. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --iter_init=*)
            [ -n "$VIASH_PAR_ITER_INIT" ] && ViashError Bad arguments for option \'--iter_init=*\': \'$VIASH_PAR_ITER_INIT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ITER_INIT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --keep_init_missing)
            [ -n "$VIASH_PAR_KEEP_INIT_MISSING" ] && ViashError Bad arguments for option \'--keep_init_missing\': \'$VIASH_PAR_KEEP_INIT_MISSING\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KEEP_INIT_MISSING=true
            shift 1
            ;;
        --randomize_singlet_score)
            [ -n "$VIASH_PAR_RANDOMIZE_SINGLET_SCORE" ] && ViashError Bad arguments for option \'--randomize_singlet_score\': \'$VIASH_PAR_RANDOMIZE_SINGLET_SCORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RANDOMIZE_SINGLET_SCORE=true
            shift 1
            ;;
        --seed)
            [ -n "$VIASH_PAR_SEED" ] && ViashError Bad arguments for option \'--seed\': \'$VIASH_PAR_SEED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SEED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --seed. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --seed=*)
            [ -n "$VIASH_PAR_SEED" ] && ViashError Bad arguments for option \'--seed=*\': \'$VIASH_PAR_SEED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SEED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cap_bq)
            [ -n "$VIASH_PAR_CAP_BQ" ] && ViashError Bad arguments for option \'--cap_bq\': \'$VIASH_PAR_CAP_BQ\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CAP_BQ="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --cap_bq. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --cap_bq=*)
            [ -n "$VIASH_PAR_CAP_BQ" ] && ViashError Bad arguments for option \'--cap_bq=*\': \'$VIASH_PAR_CAP_BQ\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CAP_BQ=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_bq)
            [ -n "$VIASH_PAR_MIN_BQ" ] && ViashError Bad arguments for option \'--min_bq\': \'$VIASH_PAR_MIN_BQ\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_BQ="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_bq. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_bq=*)
            [ -n "$VIASH_PAR_MIN_BQ" ] && ViashError Bad arguments for option \'--min_bq=*\': \'$VIASH_PAR_MIN_BQ\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_BQ=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --group_list)
            [ -n "$VIASH_PAR_GROUP_LIST" ] && ViashError Bad arguments for option \'--group_list\': \'$VIASH_PAR_GROUP_LIST\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GROUP_LIST="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --group_list. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --group_list=*)
            [ -n "$VIASH_PAR_GROUP_LIST" ] && ViashError Bad arguments for option \'--group_list=*\': \'$VIASH_PAR_GROUP_LIST\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GROUP_LIST=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_total)
            [ -n "$VIASH_PAR_MIN_TOTAL" ] && ViashError Bad arguments for option \'--min_total\': \'$VIASH_PAR_MIN_TOTAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_TOTAL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_total. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_total=*)
            [ -n "$VIASH_PAR_MIN_TOTAL" ] && ViashError Bad arguments for option \'--min_total=*\': \'$VIASH_PAR_MIN_TOTAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_TOTAL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_umi)
            [ -n "$VIASH_PAR_MIN_UMI" ] && ViashError Bad arguments for option \'--min_umi\': \'$VIASH_PAR_MIN_UMI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_UMI="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_umi. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_umi=*)
            [ -n "$VIASH_PAR_MIN_UMI" ] && ViashError Bad arguments for option \'--min_umi=*\': \'$VIASH_PAR_MIN_UMI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_UMI=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_snp)
            [ -n "$VIASH_PAR_MIN_SNP" ] && ViashError Bad arguments for option \'--min_snp\': \'$VIASH_PAR_MIN_SNP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_SNP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_snp. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_snp=*)
            [ -n "$VIASH_PAR_MIN_SNP" ] && ViashError Bad arguments for option \'--min_snp=*\': \'$VIASH_PAR_MIN_SNP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_SNP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --out)
            [ -n "$VIASH_PAR_OUT" ] && ViashError Bad arguments for option \'--out\': \'$VIASH_PAR_OUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --out. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --out=*)
            [ -n "$VIASH_PAR_OUT" ] && ViashError Bad arguments for option \'--out=*\': \'$VIASH_PAR_OUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_NSAMPLE+x} ]; then
  VIASH_PAR_NSAMPLE="2"
fi
if [ -z ${VIASH_PAR_AUX_FILES+x} ]; then
  VIASH_PAR_AUX_FILES="false"
fi
if [ -z ${VIASH_PAR_VERBOSE+x} ]; then
  VIASH_PAR_VERBOSE="100"
fi
if [ -z ${VIASH_PAR_DOUBLET_PRIOR+x} ]; then
  VIASH_PAR_DOUBLET_PRIOR="0.5"
fi
if [ -z ${VIASH_PAR_GENO_ERROR+x} ]; then
  VIASH_PAR_GENO_ERROR="0.1"
fi
if [ -z ${VIASH_PAR_BF_THRES+x} ]; then
  VIASH_PAR_BF_THRES="5.41"
fi
if [ -z ${VIASH_PAR_FRAC_INIT_CLUST+x} ]; then
  VIASH_PAR_FRAC_INIT_CLUST="1.0"
fi
if [ -z ${VIASH_PAR_ITER_INIT+x} ]; then
  VIASH_PAR_ITER_INIT="10"
fi
if [ -z ${VIASH_PAR_KEEP_INIT_MISSING+x} ]; then
  VIASH_PAR_KEEP_INIT_MISSING="false"
fi
if [ -z ${VIASH_PAR_RANDOMIZE_SINGLET_SCORE+x} ]; then
  VIASH_PAR_RANDOMIZE_SINGLET_SCORE="false"
fi
if [ -z ${VIASH_PAR_SEED+x} ]; then
  VIASH_PAR_SEED="0"
fi
if [ -z ${VIASH_PAR_CAP_BQ+x} ]; then
  VIASH_PAR_CAP_BQ="20"
fi
if [ -z ${VIASH_PAR_MIN_BQ+x} ]; then
  VIASH_PAR_MIN_BQ="13"
fi
if [ -z ${VIASH_PAR_MIN_TOTAL+x} ]; then
  VIASH_PAR_MIN_TOTAL="0"
fi
if [ -z ${VIASH_PAR_MIN_UMI+x} ]; then
  VIASH_PAR_MIN_UMI="0"
fi
if [ -z ${VIASH_PAR_MIN_SNP+x} ]; then
  VIASH_PAR_MIN_SNP="0"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INIT_CLUSTER" ] && [ ! -e "$VIASH_PAR_INIT_CLUSTER" ]; then
  ViashError "Input file '$VIASH_PAR_INIT_CLUSTER' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_NSAMPLE" ]]; then
  if ! [[ "$VIASH_PAR_NSAMPLE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--nsample' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_AUX_FILES" ]]; then
  if ! [[ "$VIASH_PAR_AUX_FILES" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--aux_files' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_VERBOSE" ]]; then
  if ! [[ "$VIASH_PAR_VERBOSE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--verbose' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_DOUBLET_PRIOR" ]]; then
  if ! [[ "$VIASH_PAR_DOUBLET_PRIOR" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--doublet_prior' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GENO_ERROR" ]]; then
  if ! [[ "$VIASH_PAR_GENO_ERROR" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--geno_error' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BF_THRES" ]]; then
  if ! [[ "$VIASH_PAR_BF_THRES" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--bf_thres' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_FRAC_INIT_CLUST" ]]; then
  if ! [[ "$VIASH_PAR_FRAC_INIT_CLUST" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--frac_init_clust' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_ITER_INIT" ]]; then
  if ! [[ "$VIASH_PAR_ITER_INIT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--iter_init' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_KEEP_INIT_MISSING" ]]; then
  if ! [[ "$VIASH_PAR_KEEP_INIT_MISSING" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--keep_init_missing' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_RANDOMIZE_SINGLET_SCORE" ]]; then
  if ! [[ "$VIASH_PAR_RANDOMIZE_SINGLET_SCORE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--randomize_singlet_score' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SEED" ]]; then
  if ! [[ "$VIASH_PAR_SEED" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--seed' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_CAP_BQ" ]]; then
  if ! [[ "$VIASH_PAR_CAP_BQ" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--cap_bq' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_BQ" ]]; then
  if ! [[ "$VIASH_PAR_MIN_BQ" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_bq' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_TOTAL" ]]; then
  if ! [[ "$VIASH_PAR_MIN_TOTAL" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_total' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_UMI" ]]; then
  if ! [[ "$VIASH_PAR_MIN_UMI" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_umi' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_SNP" ]]; then
  if ! [[ "$VIASH_PAR_MIN_SNP" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_snp' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INIT_CLUSTER" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_INIT_CLUSTER")" )
  VIASH_PAR_INIT_CLUSTER=$(ViashAutodetectMount "$VIASH_PAR_INIT_CLUSTER")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0 -c "'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/genetic_demux/freemuxlet:1.0.0
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-freemuxlet-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
requireNamespace("processx", quietly = TRUE)
requireNamespace("readr", quietly = TRUE)
library(dplyr, warn.conflicts = FALSE)

## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "plp" = $( if [ ! -z ${VIASH_PAR_PLP+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_PLP" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "init_cluster" = $( if [ ! -z ${VIASH_PAR_INIT_CLUSTER+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INIT_CLUSTER" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "nsample" = $( if [ ! -z ${VIASH_PAR_NSAMPLE+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_NSAMPLE" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "aux_files" = $( if [ ! -z ${VIASH_PAR_AUX_FILES+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_AUX_FILES" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "verbose" = $( if [ ! -z ${VIASH_PAR_VERBOSE+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_VERBOSE" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "doublet_prior" = $( if [ ! -z ${VIASH_PAR_DOUBLET_PRIOR+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_DOUBLET_PRIOR" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "geno_error" = $( if [ ! -z ${VIASH_PAR_GENO_ERROR+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_GENO_ERROR" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "bf_thres" = $( if [ ! -z ${VIASH_PAR_BF_THRES+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_BF_THRES" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "frac_init_clust" = $( if [ ! -z ${VIASH_PAR_FRAC_INIT_CLUST+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_FRAC_INIT_CLUST" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "iter_init" = $( if [ ! -z ${VIASH_PAR_ITER_INIT+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_ITER_INIT" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "keep_init_missing" = $( if [ ! -z ${VIASH_PAR_KEEP_INIT_MISSING+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_KEEP_INIT_MISSING" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "randomize_singlet_score" = $( if [ ! -z ${VIASH_PAR_RANDOMIZE_SINGLET_SCORE+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_RANDOMIZE_SINGLET_SCORE" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "seed" = $( if [ ! -z ${VIASH_PAR_SEED+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_SEED" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "cap_bq" = $( if [ ! -z ${VIASH_PAR_CAP_BQ+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_CAP_BQ" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "min_bq" = $( if [ ! -z ${VIASH_PAR_MIN_BQ+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MIN_BQ" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "group_list" = $( if [ ! -z ${VIASH_PAR_GROUP_LIST+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_GROUP_LIST" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "min_total" = $( if [ ! -z ${VIASH_PAR_MIN_TOTAL+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MIN_TOTAL" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "min_umi" = $( if [ ! -z ${VIASH_PAR_MIN_UMI+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MIN_UMI" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "min_snp" = $( if [ ! -z ${VIASH_PAR_MIN_SNP+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MIN_SNP" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "out" = $( if [ ! -z ${VIASH_PAR_OUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi )
)
meta <- list(
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

## VIASH END

if (!dir.exists(par\$output)) {
  dir.create(par\$output, recursive = TRUE, showWarnings = FALSE)
}

cmd <- c(
  "popscle", "freemuxlet",
  "--out", paste0(par\$output, "/", par\$out)
)

argmap <- c(
  "plp" = "--plp",
  "init_cluster" = "--init-cluster",
  "nsample" = "--nsample",
  "verbose" = "--verbose",
  "doublet_prior" = "--doublet-prior",
  "geno_error" = "--geno-error",
  "bf_thres" = "--bf-thres",
  "frac_init_clust" = "--frac-init-clust",
  "iter_init" = "--iter-init",
  "seed" = "--seed",
  "cap_bq" = "--cap-BQ",
  "min_bq" = "--min-BQ",
  "min_total" = "--min-total",
  "min_umi" = "--min-umi",
  "min_snp" = "--min-snp",
  "group_list" = "--group-list",
  "aux_files" = "--aux-files",
  "keep_init_missing" = "--keep-init-missing",
  "randomize_singlet_score" = "randomize-singlet-score"
)

for (arg in names(argmap)) {
  if (!is.null(par[[arg]])) {
    if (arg %in% c("aux_files", "keep_init_missing", "randomize_singlet_score")) {
      if (toupper(par[[arg]]) == TRUE)
        cmd <- c(cmd, argmap[[arg]])
    }else {
      cmd <- c(cmd, argmap[[arg]], par[[arg]])
    }
  }
}

zzz <- processx::run(
  cmd[[1]],
  args = cmd[-1],
  echo = TRUE,
  echo_cmd = TRUE
)

if (zzz\$status != 0) {
  stop("Command failed with status ", zzz\$status)
}

out_file <- paste0(par\$output, "/", par\$out, ".clust1.samples.gz")
if (!file.exists(out_file)) {
  stop("Output file '", out_file, "' not found")
}

res <- readr::read_tsv(out_file)

res2 <- res %>%
  mutate(
    donor_part1 = gsub("([^,]*),([^,]*)*", "\\\\1", BEST.GUESS),
    donor_part2 = gsub("([^,]*),([^,]*)*", "\\\\2", BEST.GUESS),
    donor_id = case_when(
      donor_part1 == donor_part2 ~ donor_part1,
      TRUE ~ DROPLET.TYPE
    )
  )

freemuxlet_assign <- res2 %>% select(cell = BARCODE, donor_id)

readr::write_csv(
  freemuxlet_assign,
  paste0(par\$output, "/cell_annotation.csv")
)
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_INIT_CLUSTER" ]; then
  VIASH_PAR_INIT_CLUSTER=$(ViashStripAutomount "$VIASH_PAR_INIT_CLUSTER")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
