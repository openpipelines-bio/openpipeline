#!/usr/bin/env bash

# souporcell 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Xichen Wu (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="souporcell"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "souporcell 1.0.5"
  echo ""
  echo "souporcell is a method for clustering mixed-genotype scRNAseq experiments by"
  echo "individual."
  echo ""
  echo "Input:"
  echo "    --fasta"
  echo "        type: file, file must exist"
  echo "        reference fasta file"
  echo ""
  echo "    --bam"
  echo "        type: file, file must exist"
  echo "        cellranger bam"
  echo ""
  echo "    --bam_index"
  echo "        type: file, file must exist"
  echo "        cellranger bam index"
  echo ""
  echo "    --barcodes"
  echo "        type: file, file must exist"
  echo "        barcodes.tsv from cellranger"
  echo ""
  echo "    --clusters"
  echo "        type: integer"
  echo "        number cluster, tbd add easy way to run on a range of k"
  echo ""
  echo "    --ploidy"
  echo "        type: integer"
  echo "        default: 2"
  echo "        ploidy, must be 1 or 2"
  echo ""
  echo "    --min_alt"
  echo "        type: integer"
  echo "        default: 10"
  echo "        min alt to use locus"
  echo ""
  echo "    --min_ref"
  echo "        type: integer"
  echo "        default: 10"
  echo "        min ref to use locus"
  echo ""
  echo "    --max_loci"
  echo "        type: integer"
  echo "        default: 2048"
  echo "        max loci per cell, affects speed"
  echo ""
  echo "    --restarts"
  echo "        type: integer"
  echo "        number of restarts in clustering, when there are > 12 clusters we"
  echo "        recommend increasing this to avoid local minima"
  echo ""
  echo "    --common_variants"
  echo "        type: file, file must exist"
  echo "        common variant loci or known variant loci vcf, must be vs same reference"
  echo "        fasta"
  echo ""
  echo "    --known_genotypes"
  echo "        type: file, file must exist"
  echo "        known variants per clone in population vcf mode, must be .vcf right now"
  echo "        we dont accept gzip or bcf sorry"
  echo ""
  echo "    --known_genotypes_sample_names"
  echo "        type: string"
  echo "        which samples in population vcf from known genotypes option represent"
  echo "        the donors in your sample"
  echo ""
  echo "    --skip_remap"
  echo "        type: boolean_true"
  echo "        dont remap with minimap2 (not recommended unless in conjunction with"
  echo "        --common_variants"
  echo ""
  echo "    --ignore"
  echo "        type: boolean_true"
  echo "        set to True to ignore data error assertions"
  echo ""
  echo "Output:"
  echo "    -o, --output"
  echo "        type: file, output, file must exist"
  echo "        example: souporcell_out"
  echo "        name of directory to place souporcell files"
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM cumulusprod/souporcell:2022.12

ENTRYPOINT []

 
RUN :
LABEL org.opencontainers.image.authors="Xichen Wu"
LABEL org.opencontainers.image.description="Companion container for running component genetic_demux souporcell"
LABEL org.opencontainers.image.created="2025-04-24T13:19:33Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="bfe311bb5542f97dfe80b20a3e47a02800708f43"
LABEL org.opencontainers.image.version="1.0.5"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-souporcell-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "souporcell 1.0.5"
            exit
            ;;
        --fasta)
            [ -n "$VIASH_PAR_FASTA" ] && ViashError Bad arguments for option \'--fasta\': \'$VIASH_PAR_FASTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FASTA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fasta. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fasta=*)
            [ -n "$VIASH_PAR_FASTA" ] && ViashError Bad arguments for option \'--fasta=*\': \'$VIASH_PAR_FASTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FASTA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bam)
            [ -n "$VIASH_PAR_BAM" ] && ViashError Bad arguments for option \'--bam\': \'$VIASH_PAR_BAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BAM="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bam. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bam=*)
            [ -n "$VIASH_PAR_BAM" ] && ViashError Bad arguments for option \'--bam=*\': \'$VIASH_PAR_BAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BAM=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bam_index)
            [ -n "$VIASH_PAR_BAM_INDEX" ] && ViashError Bad arguments for option \'--bam_index\': \'$VIASH_PAR_BAM_INDEX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BAM_INDEX="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bam_index. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bam_index=*)
            [ -n "$VIASH_PAR_BAM_INDEX" ] && ViashError Bad arguments for option \'--bam_index=*\': \'$VIASH_PAR_BAM_INDEX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BAM_INDEX=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --barcodes)
            [ -n "$VIASH_PAR_BARCODES" ] && ViashError Bad arguments for option \'--barcodes\': \'$VIASH_PAR_BARCODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BARCODES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --barcodes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --barcodes=*)
            [ -n "$VIASH_PAR_BARCODES" ] && ViashError Bad arguments for option \'--barcodes=*\': \'$VIASH_PAR_BARCODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BARCODES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --clusters)
            [ -n "$VIASH_PAR_CLUSTERS" ] && ViashError Bad arguments for option \'--clusters\': \'$VIASH_PAR_CLUSTERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CLUSTERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --clusters. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --clusters=*)
            [ -n "$VIASH_PAR_CLUSTERS" ] && ViashError Bad arguments for option \'--clusters=*\': \'$VIASH_PAR_CLUSTERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CLUSTERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ploidy)
            [ -n "$VIASH_PAR_PLOIDY" ] && ViashError Bad arguments for option \'--ploidy\': \'$VIASH_PAR_PLOIDY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLOIDY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ploidy. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ploidy=*)
            [ -n "$VIASH_PAR_PLOIDY" ] && ViashError Bad arguments for option \'--ploidy=*\': \'$VIASH_PAR_PLOIDY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLOIDY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_alt)
            [ -n "$VIASH_PAR_MIN_ALT" ] && ViashError Bad arguments for option \'--min_alt\': \'$VIASH_PAR_MIN_ALT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_ALT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_alt. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_alt=*)
            [ -n "$VIASH_PAR_MIN_ALT" ] && ViashError Bad arguments for option \'--min_alt=*\': \'$VIASH_PAR_MIN_ALT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_ALT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_ref)
            [ -n "$VIASH_PAR_MIN_REF" ] && ViashError Bad arguments for option \'--min_ref\': \'$VIASH_PAR_MIN_REF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_REF="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_ref. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_ref=*)
            [ -n "$VIASH_PAR_MIN_REF" ] && ViashError Bad arguments for option \'--min_ref=*\': \'$VIASH_PAR_MIN_REF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_REF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_loci)
            [ -n "$VIASH_PAR_MAX_LOCI" ] && ViashError Bad arguments for option \'--max_loci\': \'$VIASH_PAR_MAX_LOCI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_LOCI="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_loci. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_loci=*)
            [ -n "$VIASH_PAR_MAX_LOCI" ] && ViashError Bad arguments for option \'--max_loci=*\': \'$VIASH_PAR_MAX_LOCI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_LOCI=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --restarts)
            [ -n "$VIASH_PAR_RESTARTS" ] && ViashError Bad arguments for option \'--restarts\': \'$VIASH_PAR_RESTARTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RESTARTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --restarts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --restarts=*)
            [ -n "$VIASH_PAR_RESTARTS" ] && ViashError Bad arguments for option \'--restarts=*\': \'$VIASH_PAR_RESTARTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RESTARTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --common_variants)
            [ -n "$VIASH_PAR_COMMON_VARIANTS" ] && ViashError Bad arguments for option \'--common_variants\': \'$VIASH_PAR_COMMON_VARIANTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COMMON_VARIANTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --common_variants. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --common_variants=*)
            [ -n "$VIASH_PAR_COMMON_VARIANTS" ] && ViashError Bad arguments for option \'--common_variants=*\': \'$VIASH_PAR_COMMON_VARIANTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COMMON_VARIANTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --known_genotypes)
            [ -n "$VIASH_PAR_KNOWN_GENOTYPES" ] && ViashError Bad arguments for option \'--known_genotypes\': \'$VIASH_PAR_KNOWN_GENOTYPES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KNOWN_GENOTYPES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --known_genotypes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --known_genotypes=*)
            [ -n "$VIASH_PAR_KNOWN_GENOTYPES" ] && ViashError Bad arguments for option \'--known_genotypes=*\': \'$VIASH_PAR_KNOWN_GENOTYPES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KNOWN_GENOTYPES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --known_genotypes_sample_names)
            [ -n "$VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES" ] && ViashError Bad arguments for option \'--known_genotypes_sample_names\': \'$VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --known_genotypes_sample_names. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --known_genotypes_sample_names=*)
            [ -n "$VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES" ] && ViashError Bad arguments for option \'--known_genotypes_sample_names=*\': \'$VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --skip_remap)
            [ -n "$VIASH_PAR_SKIP_REMAP" ] && ViashError Bad arguments for option \'--skip_remap\': \'$VIASH_PAR_SKIP_REMAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SKIP_REMAP=true
            shift 1
            ;;
        --ignore)
            [ -n "$VIASH_PAR_IGNORE" ] && ViashError Bad arguments for option \'--ignore\': \'$VIASH_PAR_IGNORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_IGNORE=true
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_PLOIDY+x} ]; then
  VIASH_PAR_PLOIDY="2"
fi
if [ -z ${VIASH_PAR_MIN_ALT+x} ]; then
  VIASH_PAR_MIN_ALT="10"
fi
if [ -z ${VIASH_PAR_MIN_REF+x} ]; then
  VIASH_PAR_MIN_REF="10"
fi
if [ -z ${VIASH_PAR_MAX_LOCI+x} ]; then
  VIASH_PAR_MAX_LOCI="2048"
fi
if [ -z ${VIASH_PAR_SKIP_REMAP+x} ]; then
  VIASH_PAR_SKIP_REMAP="false"
fi
if [ -z ${VIASH_PAR_IGNORE+x} ]; then
  VIASH_PAR_IGNORE="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_FASTA" ] && [ ! -e "$VIASH_PAR_FASTA" ]; then
  ViashError "Input file '$VIASH_PAR_FASTA' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_BAM" ] && [ ! -e "$VIASH_PAR_BAM" ]; then
  ViashError "Input file '$VIASH_PAR_BAM' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_BAM_INDEX" ] && [ ! -e "$VIASH_PAR_BAM_INDEX" ]; then
  ViashError "Input file '$VIASH_PAR_BAM_INDEX' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_BARCODES" ] && [ ! -e "$VIASH_PAR_BARCODES" ]; then
  ViashError "Input file '$VIASH_PAR_BARCODES' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_COMMON_VARIANTS" ] && [ ! -e "$VIASH_PAR_COMMON_VARIANTS" ]; then
  ViashError "Input file '$VIASH_PAR_COMMON_VARIANTS' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_KNOWN_GENOTYPES" ] && [ ! -e "$VIASH_PAR_KNOWN_GENOTYPES" ]; then
  ViashError "Input file '$VIASH_PAR_KNOWN_GENOTYPES' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_CLUSTERS" ]]; then
  if ! [[ "$VIASH_PAR_CLUSTERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--clusters' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PLOIDY" ]]; then
  if ! [[ "$VIASH_PAR_PLOIDY" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--ploidy' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_ALT" ]]; then
  if ! [[ "$VIASH_PAR_MIN_ALT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_alt' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_REF" ]]; then
  if ! [[ "$VIASH_PAR_MIN_REF" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_ref' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MAX_LOCI" ]]; then
  if ! [[ "$VIASH_PAR_MAX_LOCI" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_loci' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_RESTARTS" ]]; then
  if ! [[ "$VIASH_PAR_RESTARTS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--restarts' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SKIP_REMAP" ]]; then
  if ! [[ "$VIASH_PAR_SKIP_REMAP" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--skip_remap' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_IGNORE" ]]; then
  if ! [[ "$VIASH_PAR_IGNORE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--ignore' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_FASTA" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_FASTA")" )
  VIASH_PAR_FASTA=$(ViashAutodetectMount "$VIASH_PAR_FASTA")
fi
if [ ! -z "$VIASH_PAR_BAM" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_BAM")" )
  VIASH_PAR_BAM=$(ViashAutodetectMount "$VIASH_PAR_BAM")
fi
if [ ! -z "$VIASH_PAR_BAM_INDEX" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_BAM_INDEX")" )
  VIASH_PAR_BAM_INDEX=$(ViashAutodetectMount "$VIASH_PAR_BAM_INDEX")
fi
if [ ! -z "$VIASH_PAR_BARCODES" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_BARCODES")" )
  VIASH_PAR_BARCODES=$(ViashAutodetectMount "$VIASH_PAR_BARCODES")
fi
if [ ! -z "$VIASH_PAR_COMMON_VARIANTS" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_COMMON_VARIANTS")" )
  VIASH_PAR_COMMON_VARIANTS=$(ViashAutodetectMount "$VIASH_PAR_COMMON_VARIANTS")
fi
if [ ! -z "$VIASH_PAR_KNOWN_GENOTYPES" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_KNOWN_GENOTYPES")" )
  VIASH_PAR_KNOWN_GENOTYPES=$(ViashAutodetectMount "$VIASH_PAR_KNOWN_GENOTYPES")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0 -c "'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/genetic_demux/souporcell:1.0.0
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-souporcell-XXXXXX").sh
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_FASTA+x} ]; then echo "${VIASH_PAR_FASTA}" | sed "s#'#'\"'\"'#g;s#.*#par_fasta='&'#" ; else echo "# par_fasta="; fi )
$( if [ ! -z ${VIASH_PAR_BAM+x} ]; then echo "${VIASH_PAR_BAM}" | sed "s#'#'\"'\"'#g;s#.*#par_bam='&'#" ; else echo "# par_bam="; fi )
$( if [ ! -z ${VIASH_PAR_BAM_INDEX+x} ]; then echo "${VIASH_PAR_BAM_INDEX}" | sed "s#'#'\"'\"'#g;s#.*#par_bam_index='&'#" ; else echo "# par_bam_index="; fi )
$( if [ ! -z ${VIASH_PAR_BARCODES+x} ]; then echo "${VIASH_PAR_BARCODES}" | sed "s#'#'\"'\"'#g;s#.*#par_barcodes='&'#" ; else echo "# par_barcodes="; fi )
$( if [ ! -z ${VIASH_PAR_CLUSTERS+x} ]; then echo "${VIASH_PAR_CLUSTERS}" | sed "s#'#'\"'\"'#g;s#.*#par_clusters='&'#" ; else echo "# par_clusters="; fi )
$( if [ ! -z ${VIASH_PAR_PLOIDY+x} ]; then echo "${VIASH_PAR_PLOIDY}" | sed "s#'#'\"'\"'#g;s#.*#par_ploidy='&'#" ; else echo "# par_ploidy="; fi )
$( if [ ! -z ${VIASH_PAR_MIN_ALT+x} ]; then echo "${VIASH_PAR_MIN_ALT}" | sed "s#'#'\"'\"'#g;s#.*#par_min_alt='&'#" ; else echo "# par_min_alt="; fi )
$( if [ ! -z ${VIASH_PAR_MIN_REF+x} ]; then echo "${VIASH_PAR_MIN_REF}" | sed "s#'#'\"'\"'#g;s#.*#par_min_ref='&'#" ; else echo "# par_min_ref="; fi )
$( if [ ! -z ${VIASH_PAR_MAX_LOCI+x} ]; then echo "${VIASH_PAR_MAX_LOCI}" | sed "s#'#'\"'\"'#g;s#.*#par_max_loci='&'#" ; else echo "# par_max_loci="; fi )
$( if [ ! -z ${VIASH_PAR_RESTARTS+x} ]; then echo "${VIASH_PAR_RESTARTS}" | sed "s#'#'\"'\"'#g;s#.*#par_restarts='&'#" ; else echo "# par_restarts="; fi )
$( if [ ! -z ${VIASH_PAR_COMMON_VARIANTS+x} ]; then echo "${VIASH_PAR_COMMON_VARIANTS}" | sed "s#'#'\"'\"'#g;s#.*#par_common_variants='&'#" ; else echo "# par_common_variants="; fi )
$( if [ ! -z ${VIASH_PAR_KNOWN_GENOTYPES+x} ]; then echo "${VIASH_PAR_KNOWN_GENOTYPES}" | sed "s#'#'\"'\"'#g;s#.*#par_known_genotypes='&'#" ; else echo "# par_known_genotypes="; fi )
$( if [ ! -z ${VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES+x} ]; then echo "${VIASH_PAR_KNOWN_GENOTYPES_SAMPLE_NAMES}" | sed "s#'#'\"'\"'#g;s#.*#par_known_genotypes_sample_names='&'#" ; else echo "# par_known_genotypes_sample_names="; fi )
$( if [ ! -z ${VIASH_PAR_SKIP_REMAP+x} ]; then echo "${VIASH_PAR_SKIP_REMAP}" | sed "s#'#'\"'\"'#g;s#.*#par_skip_remap='&'#" ; else echo "# par_skip_remap="; fi )
$( if [ ! -z ${VIASH_PAR_IGNORE+x} ]; then echo "${VIASH_PAR_IGNORE}" | sed "s#'#'\"'\"'#g;s#.*#par_ignore='&'#" ; else echo "# par_ignore="; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "${VIASH_PAR_OUTPUT}" | sed "s#'#'\"'\"'#g;s#.*#par_output='&'#" ; else echo "# par_output="; fi )
$( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "${VIASH_META_FUNCTIONALITY_NAME}" | sed "s#'#'\"'\"'#g;s#.*#meta_functionality_name='&'#" ; else echo "# meta_functionality_name="; fi )
$( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "${VIASH_META_RESOURCES_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_resources_dir='&'#" ; else echo "# meta_resources_dir="; fi )
$( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "${VIASH_META_EXECUTABLE}" | sed "s#'#'\"'\"'#g;s#.*#meta_executable='&'#" ; else echo "# meta_executable="; fi )
$( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "${VIASH_META_CONFIG}" | sed "s#'#'\"'\"'#g;s#.*#meta_config='&'#" ; else echo "# meta_config="; fi )
$( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "${VIASH_META_TEMP_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_temp_dir='&'#" ; else echo "# meta_temp_dir="; fi )
$( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "${VIASH_META_CPUS}" | sed "s#'#'\"'\"'#g;s#.*#meta_cpus='&'#" ; else echo "# meta_cpus="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "${VIASH_META_MEMORY_B}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_b='&'#" ; else echo "# meta_memory_b="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "${VIASH_META_MEMORY_KB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_kb='&'#" ; else echo "# meta_memory_kb="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "${VIASH_META_MEMORY_MB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_mb='&'#" ; else echo "# meta_memory_mb="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "${VIASH_META_MEMORY_GB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_gb='&'#" ; else echo "# meta_memory_gb="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "${VIASH_META_MEMORY_TB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_tb='&'#" ; else echo "# meta_memory_tb="; fi )
$( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "${VIASH_META_MEMORY_PB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_pb='&'#" ; else echo "# meta_memory_pb="; fi )

## VIASH END
#!/bin/bash

set -eo pipefail

# Unset flags if they equal 'false'
[[ "\$par_skip_remap" == "false" ]] && unset par_skip_remap
[[ "\$par_ignore" == "false" ]] && unset par_ignore

if [ ! -d "\$par_output" ]; then
  mkdir -p "\$par_output"
fi

/opt/souporcell/souporcell_pipeline.py \\
  --bam \$par_bam \\
  --fasta \$par_fasta \\
  --barcodes \$par_barcodes \\
  --clusters \$par_clusters \\
  --ploidy \$par_ploidy \\
  --min_alt \$par_min_alt \\
  --min_ref \$par_min_ref \\
  --max_loci \$par_max_loci \\
  --out_dir \$par_output \\
  --threads \${par_threads:=1} \\
  \${par_restarts:+--restarts \$par_restarts} \\
  \${par_common_variants:+--common_variants \$par_common_variants} \\
  \${par_known_genotypes:+--known_genotypes \$par_known_genotypes} \\
  \${par_known_genotypes_sample_names:+--known_genotypes_sample_names \$par_known_genotypes_sample_names} \\
  \${par_skip_remap:+--skip_remap True} \\
  \${par_ignore:+--ignore True}

cut -d\$'\\t' -f 1-3 "\$par_output/clusters.tsv" | 
sed 's/\\t/,/g' | 
awk 'BEGIN{FS=OFS=","} {\$2=(\$2=="singlet")?\$3:\$2; NF=NF-1; print}' | 
sed '1s/barcode,status/cell,donor_id/' > "\$par_output/cell_annotation.csv"
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_FASTA" ]; then
  VIASH_PAR_FASTA=$(ViashStripAutomount "$VIASH_PAR_FASTA")
fi
if [ ! -z "$VIASH_PAR_BAM" ]; then
  VIASH_PAR_BAM=$(ViashStripAutomount "$VIASH_PAR_BAM")
fi
if [ ! -z "$VIASH_PAR_BAM_INDEX" ]; then
  VIASH_PAR_BAM_INDEX=$(ViashStripAutomount "$VIASH_PAR_BAM_INDEX")
fi
if [ ! -z "$VIASH_PAR_BARCODES" ]; then
  VIASH_PAR_BARCODES=$(ViashStripAutomount "$VIASH_PAR_BARCODES")
fi
if [ ! -z "$VIASH_PAR_COMMON_VARIANTS" ]; then
  VIASH_PAR_COMMON_VARIANTS=$(ViashStripAutomount "$VIASH_PAR_COMMON_VARIANTS")
fi
if [ ! -z "$VIASH_PAR_KNOWN_GENOTYPES" ]; then
  VIASH_PAR_KNOWN_GENOTYPES=$(ViashStripAutomount "$VIASH_PAR_KNOWN_GENOTYPES")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
