#!/usr/bin/env bash

# scvi 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Malte D. Luecken (author)
#  * Dries Schaumont (maintainer)
#  * Matthias Beyens (contributor)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="scvi"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "scvi 1.0.5"
  echo ""
  echo "Performs scvi integration as done in the human lung cell atlas"
  echo "https://github.com/LungCellAtlas/HLCA"
  echo ""
  echo "Inputs:"
  echo "    -i, --input"
  echo "        type: file, required parameter, file must exist"
  echo "        Input h5mu file"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo ""
  echo "    --input_layer"
  echo "        type: string"
  echo "        Input layer to use. If None, X is used"
  echo ""
  echo "    --obs_batch"
  echo "        type: string"
  echo "        default: sample_id"
  echo "        Column name discriminating between your batches."
  echo ""
  echo "    --var_input"
  echo "        type: string"
  echo "        .var column containing highly variable genes. By default, do not subset"
  echo "        genes."
  echo ""
  echo "    --obs_labels"
  echo "        type: string"
  echo "        Key in adata.obs for label information. Categories will automatically be"
  echo "        converted into integer categories and saved to"
  echo "        adata.obs['_scvi_labels']."
  echo "        If None, assigns the same label to all the data."
  echo ""
  echo "    --obs_size_factor"
  echo "        type: string"
  echo "        Key in adata.obs for size factor information. Instead of using library"
  echo "        size as a size factor,"
  echo "        the provided size factor column will be used as offset in the mean of"
  echo "        the likelihood."
  echo "        Assumed to be on linear scale."
  echo ""
  echo "    --obs_categorical_covariate"
  echo "        type: string, multiple values allowed"
  echo "        Keys in adata.obs that correspond to categorical data. These covariates"
  echo "        can be added in"
  echo "        addition to the batch covariate and are also treated as nuisance factors"
  echo "        (i.e., the model tries to minimize their effects on the latent space)."
  echo "        Thus, these should not be used for biologically-relevant factors that"
  echo "        you do _not_ want to correct for."
  echo ""
  echo "    --obs_continuous_covariate"
  echo "        type: string, multiple values allowed"
  echo "        Keys in adata.obs that correspond to continuous data. These covariates"
  echo "        can be added in"
  echo "        addition to the batch covariate and are also treated as nuisance factors"
  echo "        (i.e., the model tries to minimize their effects on the latent space)."
  echo "        Thus, these should not be"
  echo "        used for biologically-relevant factors that you do _not_ want to correct"
  echo "        for."
  echo ""
  echo "Outputs:"
  echo "    -o, --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        Output h5mu file."
  echo ""
  echo "    --output_model"
  echo "        type: file, output, file must exist"
  echo "        Folder where the state of the trained model will be saved to."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        The compression format to be used on the output h5mu object."
  echo ""
  echo "    --obsm_output"
  echo "        type: string"
  echo "        default: X_scvi_integrated"
  echo "        In which .obsm slot to store the resulting integrated embedding."
  echo ""
  echo "SCVI options:"
  echo "    --n_hidden_nodes"
  echo "        type: integer"
  echo "        default: 128"
  echo "        Number of nodes per hidden layer."
  echo ""
  echo "    --n_dimensions_latent_space"
  echo "        type: integer"
  echo "        default: 30"
  echo "        Dimensionality of the latent space."
  echo ""
  echo "    --n_hidden_layers"
  echo "        type: integer"
  echo "        default: 2"
  echo "        Number of hidden layers used for encoder and decoder neural-networks."
  echo ""
  echo "    --dropout_rate"
  echo "        type: double"
  echo "        default: 0.1"
  echo "        Dropout rate for the neural networks."
  echo ""
  echo "    --dispersion"
  echo "        type: string"
  echo "        default: gene"
  echo "        choices: [ gene, gene-batch, gene-label, gene-cell ]"
  echo "        Set the behavior for the dispersion for negative binomial distributions:"
  echo "        - gene: dispersion parameter of negative binomial is constant per gene"
  echo "        across cells"
  echo "        - gene-batch: dispersion can differ between different batches"
  echo "        - gene-label: dispersion can differ between different labels"
  echo "        - gene-cell:  dispersion can differ for every gene in every cell"
  echo ""
  echo "    --gene_likelihood"
  echo "        type: string"
  echo "        default: nb"
  echo "        choices: [ nb, zinb, poisson ]"
  echo "        Model used to generate the expression data from a count-based likelihood"
  echo "        distribution."
  echo "        - nb: Negative binomial distribution"
  echo "        - zinb: Zero-inflated negative binomial distribution"
  echo "        - poisson: Poisson distribution"
  echo ""
  echo "Variational auto-encoder model options:"
  echo "    --use_layer_normalization"
  echo "        type: string"
  echo "        default: both"
  echo "        choices: [ encoder, decoder, none, both ]"
  echo "        Neural networks for which to enable layer normalization."
  echo ""
  echo "    --use_batch_normalization"
  echo "        type: string"
  echo "        default: none"
  echo "        choices: [ encoder, decoder, none, both ]"
  echo "        Neural networks for which to enable batch normalization."
  echo ""
  echo "    --encode_covariates"
  echo "        type: boolean_false"
  echo "        Whether to concatenate covariates to expression in encoder"
  echo ""
  echo "    --deeply_inject_covariates"
  echo "        type: boolean_true"
  echo "        Whether to concatenate covariates into output of hidden layers in"
  echo "        encoder/decoder."
  echo "        This option only applies when n_layers > 1. The covariates are"
  echo "        concatenated to"
  echo "        the input of subsequent hidden layers."
  echo ""
  echo "    --use_observed_lib_size"
  echo "        type: boolean_true"
  echo "        Use observed library size for RNA as scaling factor in mean of"
  echo "        conditional distribution."
  echo ""
  echo "Early stopping arguments:"
  echo "    --early_stopping"
  echo "        type: boolean"
  echo "        Whether to perform early stopping with respect to the validation set."
  echo ""
  echo "    --early_stopping_monitor"
  echo "        type: string"
  echo "        default: elbo_validation"
  echo "        choices: [ elbo_validation, reconstruction_loss_validation,"
  echo "kl_local_validation ]"
  echo "        Metric logged during validation set epoch."
  echo ""
  echo "    --early_stopping_patience"
  echo "        type: integer"
  echo "        default: 45"
  echo "        min: 1"
  echo "        Number of validation epochs with no improvement after which training"
  echo "        will be stopped."
  echo ""
  echo "    --early_stopping_min_delta"
  echo "        type: double"
  echo "        default: 0.0"
  echo "        min: 0.0"
  echo "        Minimum change in the monitored quantity to qualify as an improvement,"
  echo "        i.e. an absolute change of less than min_delta, will count as no"
  echo "        improvement."
  echo ""
  echo "Learning parameters:"
  echo "    --max_epochs"
  echo "        type: integer"
  echo "        Number of passes through the dataset, defaults to (20000 / number of"
  echo "        cells) * 400 or 400; whichever is smallest."
  echo ""
  echo "    --reduce_lr_on_plateau"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether to monitor validation loss and reduce learning rate when"
  echo "        validation set \`lr_scheduler_metric\` plateaus."
  echo ""
  echo "    --lr_factor"
  echo "        type: double"
  echo "        default: 0.6"
  echo "        min: 0.0"
  echo "        Factor to reduce learning rate."
  echo ""
  echo "    --lr_patience"
  echo "        type: double"
  echo "        default: 30.0"
  echo "        min: 0.0"
  echo "        Number of epochs with no improvement after which learning rate will be"
  echo "        reduced."
  echo ""
  echo "Data validition:"
  echo "    --n_obs_min_count"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of cells threshold ensuring that every obs_batch category"
  echo "        has sufficient observations (cells) for model training."
  echo ""
  echo "    --n_var_min_count"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of genes threshold ensuring that every var_input filter"
  echo "        has sufficient observations (genes) for model training."
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM nvcr.io/nvidia/pytorch:23.09-py3

ENTRYPOINT []

 
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y libpng-dev libjpeg-dev && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "anndata~=0.9.1" "mudata~=0.2.3" "pandas!=2.1.2" "scanpy~=1.9.5" "statsmodels==0.14.0"

RUN pip install --upgrade pip && \
  pip install --no-cache-dir "scvi-tools~=1.0.3" "jaxlib<0.4.23" "jax<0.4.23"

LABEL org.opencontainers.image.authors="Malte D. Luecken, Dries Schaumont, Matthias Beyens"
LABEL org.opencontainers.image.description="Companion container for running component integrate scvi"
LABEL org.opencontainers.image.created="2025-04-24T13:19:35Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="bfe311bb5542f97dfe80b20a3e47a02800708f43"
LABEL org.opencontainers.image.version="1.0.5"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-scvi-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "scvi 1.0.5"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'-i\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_layer)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_layer=*)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer=*\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_batch)
            [ -n "$VIASH_PAR_OBS_BATCH" ] && ViashError Bad arguments for option \'--obs_batch\': \'$VIASH_PAR_OBS_BATCH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_BATCH="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_batch. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_batch=*)
            [ -n "$VIASH_PAR_OBS_BATCH" ] && ViashError Bad arguments for option \'--obs_batch=*\': \'$VIASH_PAR_OBS_BATCH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_BATCH=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --var_input)
            [ -n "$VIASH_PAR_VAR_INPUT" ] && ViashError Bad arguments for option \'--var_input\': \'$VIASH_PAR_VAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --var_input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --var_input=*)
            [ -n "$VIASH_PAR_VAR_INPUT" ] && ViashError Bad arguments for option \'--var_input=*\': \'$VIASH_PAR_VAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_labels)
            [ -n "$VIASH_PAR_OBS_LABELS" ] && ViashError Bad arguments for option \'--obs_labels\': \'$VIASH_PAR_OBS_LABELS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_LABELS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_labels. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_labels=*)
            [ -n "$VIASH_PAR_OBS_LABELS" ] && ViashError Bad arguments for option \'--obs_labels=*\': \'$VIASH_PAR_OBS_LABELS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_LABELS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_size_factor)
            [ -n "$VIASH_PAR_OBS_SIZE_FACTOR" ] && ViashError Bad arguments for option \'--obs_size_factor\': \'$VIASH_PAR_OBS_SIZE_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_SIZE_FACTOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_size_factor. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_size_factor=*)
            [ -n "$VIASH_PAR_OBS_SIZE_FACTOR" ] && ViashError Bad arguments for option \'--obs_size_factor=*\': \'$VIASH_PAR_OBS_SIZE_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_SIZE_FACTOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_categorical_covariate)
            if [ -z "$VIASH_PAR_OBS_CATEGORICAL_COVARIATE" ]; then
              VIASH_PAR_OBS_CATEGORICAL_COVARIATE="$2"
            else
              VIASH_PAR_OBS_CATEGORICAL_COVARIATE="$VIASH_PAR_OBS_CATEGORICAL_COVARIATE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_categorical_covariate. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_categorical_covariate=*)
            if [ -z "$VIASH_PAR_OBS_CATEGORICAL_COVARIATE" ]; then
              VIASH_PAR_OBS_CATEGORICAL_COVARIATE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OBS_CATEGORICAL_COVARIATE="$VIASH_PAR_OBS_CATEGORICAL_COVARIATE;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --obs_continuous_covariate)
            if [ -z "$VIASH_PAR_OBS_CONTINUOUS_COVARIATE" ]; then
              VIASH_PAR_OBS_CONTINUOUS_COVARIATE="$2"
            else
              VIASH_PAR_OBS_CONTINUOUS_COVARIATE="$VIASH_PAR_OBS_CONTINUOUS_COVARIATE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_continuous_covariate. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_continuous_covariate=*)
            if [ -z "$VIASH_PAR_OBS_CONTINUOUS_COVARIATE" ]; then
              VIASH_PAR_OBS_CONTINUOUS_COVARIATE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OBS_CONTINUOUS_COVARIATE="$VIASH_PAR_OBS_CONTINUOUS_COVARIATE;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_model)
            [ -n "$VIASH_PAR_OUTPUT_MODEL" ] && ViashError Bad arguments for option \'--output_model\': \'$VIASH_PAR_OUTPUT_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_MODEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_model. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_model=*)
            [ -n "$VIASH_PAR_OUTPUT_MODEL" ] && ViashError Bad arguments for option \'--output_model=*\': \'$VIASH_PAR_OUTPUT_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_MODEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obsm_output)
            [ -n "$VIASH_PAR_OBSM_OUTPUT" ] && ViashError Bad arguments for option \'--obsm_output\': \'$VIASH_PAR_OBSM_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obsm_output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obsm_output=*)
            [ -n "$VIASH_PAR_OBSM_OUTPUT" ] && ViashError Bad arguments for option \'--obsm_output=*\': \'$VIASH_PAR_OBSM_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_hidden_nodes)
            [ -n "$VIASH_PAR_N_HIDDEN_NODES" ] && ViashError Bad arguments for option \'--n_hidden_nodes\': \'$VIASH_PAR_N_HIDDEN_NODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_HIDDEN_NODES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_hidden_nodes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_hidden_nodes=*)
            [ -n "$VIASH_PAR_N_HIDDEN_NODES" ] && ViashError Bad arguments for option \'--n_hidden_nodes=*\': \'$VIASH_PAR_N_HIDDEN_NODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_HIDDEN_NODES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_dimensions_latent_space)
            [ -n "$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE" ] && ViashError Bad arguments for option \'--n_dimensions_latent_space\': \'$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_DIMENSIONS_LATENT_SPACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_dimensions_latent_space. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_dimensions_latent_space=*)
            [ -n "$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE" ] && ViashError Bad arguments for option \'--n_dimensions_latent_space=*\': \'$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_DIMENSIONS_LATENT_SPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_hidden_layers)
            [ -n "$VIASH_PAR_N_HIDDEN_LAYERS" ] && ViashError Bad arguments for option \'--n_hidden_layers\': \'$VIASH_PAR_N_HIDDEN_LAYERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_HIDDEN_LAYERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_hidden_layers. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_hidden_layers=*)
            [ -n "$VIASH_PAR_N_HIDDEN_LAYERS" ] && ViashError Bad arguments for option \'--n_hidden_layers=*\': \'$VIASH_PAR_N_HIDDEN_LAYERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_HIDDEN_LAYERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dropout_rate)
            [ -n "$VIASH_PAR_DROPOUT_RATE" ] && ViashError Bad arguments for option \'--dropout_rate\': \'$VIASH_PAR_DROPOUT_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DROPOUT_RATE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dropout_rate. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dropout_rate=*)
            [ -n "$VIASH_PAR_DROPOUT_RATE" ] && ViashError Bad arguments for option \'--dropout_rate=*\': \'$VIASH_PAR_DROPOUT_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DROPOUT_RATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dispersion)
            [ -n "$VIASH_PAR_DISPERSION" ] && ViashError Bad arguments for option \'--dispersion\': \'$VIASH_PAR_DISPERSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DISPERSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dispersion. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dispersion=*)
            [ -n "$VIASH_PAR_DISPERSION" ] && ViashError Bad arguments for option \'--dispersion=*\': \'$VIASH_PAR_DISPERSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DISPERSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --gene_likelihood)
            [ -n "$VIASH_PAR_GENE_LIKELIHOOD" ] && ViashError Bad arguments for option \'--gene_likelihood\': \'$VIASH_PAR_GENE_LIKELIHOOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENE_LIKELIHOOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --gene_likelihood. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --gene_likelihood=*)
            [ -n "$VIASH_PAR_GENE_LIKELIHOOD" ] && ViashError Bad arguments for option \'--gene_likelihood=*\': \'$VIASH_PAR_GENE_LIKELIHOOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENE_LIKELIHOOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --use_layer_normalization)
            [ -n "$VIASH_PAR_USE_LAYER_NORMALIZATION" ] && ViashError Bad arguments for option \'--use_layer_normalization\': \'$VIASH_PAR_USE_LAYER_NORMALIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_LAYER_NORMALIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --use_layer_normalization. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --use_layer_normalization=*)
            [ -n "$VIASH_PAR_USE_LAYER_NORMALIZATION" ] && ViashError Bad arguments for option \'--use_layer_normalization=*\': \'$VIASH_PAR_USE_LAYER_NORMALIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_LAYER_NORMALIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --use_batch_normalization)
            [ -n "$VIASH_PAR_USE_BATCH_NORMALIZATION" ] && ViashError Bad arguments for option \'--use_batch_normalization\': \'$VIASH_PAR_USE_BATCH_NORMALIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_BATCH_NORMALIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --use_batch_normalization. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --use_batch_normalization=*)
            [ -n "$VIASH_PAR_USE_BATCH_NORMALIZATION" ] && ViashError Bad arguments for option \'--use_batch_normalization=*\': \'$VIASH_PAR_USE_BATCH_NORMALIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_BATCH_NORMALIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --encode_covariates)
            [ -n "$VIASH_PAR_ENCODE_COVARIATES" ] && ViashError Bad arguments for option \'--encode_covariates\': \'$VIASH_PAR_ENCODE_COVARIATES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ENCODE_COVARIATES=false
            shift 1
            ;;
        --deeply_inject_covariates)
            [ -n "$VIASH_PAR_DEEPLY_INJECT_COVARIATES" ] && ViashError Bad arguments for option \'--deeply_inject_covariates\': \'$VIASH_PAR_DEEPLY_INJECT_COVARIATES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DEEPLY_INJECT_COVARIATES=true
            shift 1
            ;;
        --use_observed_lib_size)
            [ -n "$VIASH_PAR_USE_OBSERVED_LIB_SIZE" ] && ViashError Bad arguments for option \'--use_observed_lib_size\': \'$VIASH_PAR_USE_OBSERVED_LIB_SIZE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USE_OBSERVED_LIB_SIZE=true
            shift 1
            ;;
        --early_stopping)
            [ -n "$VIASH_PAR_EARLY_STOPPING" ] && ViashError Bad arguments for option \'--early_stopping\': \'$VIASH_PAR_EARLY_STOPPING\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING" ] && ViashError Bad arguments for option \'--early_stopping=*\': \'$VIASH_PAR_EARLY_STOPPING\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_monitor)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MONITOR" ] && ViashError Bad arguments for option \'--early_stopping_monitor\': \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MONITOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_monitor. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_monitor=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MONITOR" ] && ViashError Bad arguments for option \'--early_stopping_monitor=*\': \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MONITOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_patience)
            [ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ] && ViashError Bad arguments for option \'--early_stopping_patience\': \'$VIASH_PAR_EARLY_STOPPING_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_PATIENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_patience. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_patience=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ] && ViashError Bad arguments for option \'--early_stopping_patience=*\': \'$VIASH_PAR_EARLY_STOPPING_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_PATIENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_min_delta)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ] && ViashError Bad arguments for option \'--early_stopping_min_delta\': \'$VIASH_PAR_EARLY_STOPPING_MIN_DELTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MIN_DELTA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_min_delta. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_min_delta=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ] && ViashError Bad arguments for option \'--early_stopping_min_delta=*\': \'$VIASH_PAR_EARLY_STOPPING_MIN_DELTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MIN_DELTA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_epochs)
            [ -n "$VIASH_PAR_MAX_EPOCHS" ] && ViashError Bad arguments for option \'--max_epochs\': \'$VIASH_PAR_MAX_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_EPOCHS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_epochs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_epochs=*)
            [ -n "$VIASH_PAR_MAX_EPOCHS" ] && ViashError Bad arguments for option \'--max_epochs=*\': \'$VIASH_PAR_MAX_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_EPOCHS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reduce_lr_on_plateau)
            [ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ] && ViashError Bad arguments for option \'--reduce_lr_on_plateau\': \'$VIASH_PAR_REDUCE_LR_ON_PLATEAU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REDUCE_LR_ON_PLATEAU="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reduce_lr_on_plateau. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reduce_lr_on_plateau=*)
            [ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ] && ViashError Bad arguments for option \'--reduce_lr_on_plateau=*\': \'$VIASH_PAR_REDUCE_LR_ON_PLATEAU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REDUCE_LR_ON_PLATEAU=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lr_factor)
            [ -n "$VIASH_PAR_LR_FACTOR" ] && ViashError Bad arguments for option \'--lr_factor\': \'$VIASH_PAR_LR_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_FACTOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lr_factor. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lr_factor=*)
            [ -n "$VIASH_PAR_LR_FACTOR" ] && ViashError Bad arguments for option \'--lr_factor=*\': \'$VIASH_PAR_LR_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_FACTOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lr_patience)
            [ -n "$VIASH_PAR_LR_PATIENCE" ] && ViashError Bad arguments for option \'--lr_patience\': \'$VIASH_PAR_LR_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_PATIENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lr_patience. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lr_patience=*)
            [ -n "$VIASH_PAR_LR_PATIENCE" ] && ViashError Bad arguments for option \'--lr_patience=*\': \'$VIASH_PAR_LR_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_PATIENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_obs_min_count)
            [ -n "$VIASH_PAR_N_OBS_MIN_COUNT" ] && ViashError Bad arguments for option \'--n_obs_min_count\': \'$VIASH_PAR_N_OBS_MIN_COUNT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_OBS_MIN_COUNT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_obs_min_count. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_obs_min_count=*)
            [ -n "$VIASH_PAR_N_OBS_MIN_COUNT" ] && ViashError Bad arguments for option \'--n_obs_min_count=*\': \'$VIASH_PAR_N_OBS_MIN_COUNT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_OBS_MIN_COUNT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_var_min_count)
            [ -n "$VIASH_PAR_N_VAR_MIN_COUNT" ] && ViashError Bad arguments for option \'--n_var_min_count\': \'$VIASH_PAR_N_VAR_MIN_COUNT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_VAR_MIN_COUNT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_var_min_count. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_var_min_count=*)
            [ -n "$VIASH_PAR_N_VAR_MIN_COUNT" ] && ViashError Bad arguments for option \'--n_var_min_count=*\': \'$VIASH_PAR_N_VAR_MIN_COUNT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_VAR_MIN_COUNT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/integrate/scvi:1.0.0' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/integrate/scvi:1.0.0' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/integrate/scvi:1.0.0'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/integrate/scvi:1.0.0'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_OBS_BATCH+x} ]; then
  VIASH_PAR_OBS_BATCH="sample_id"
fi
if [ -z ${VIASH_PAR_OBSM_OUTPUT+x} ]; then
  VIASH_PAR_OBSM_OUTPUT="X_scvi_integrated"
fi
if [ -z ${VIASH_PAR_N_HIDDEN_NODES+x} ]; then
  VIASH_PAR_N_HIDDEN_NODES="128"
fi
if [ -z ${VIASH_PAR_N_DIMENSIONS_LATENT_SPACE+x} ]; then
  VIASH_PAR_N_DIMENSIONS_LATENT_SPACE="30"
fi
if [ -z ${VIASH_PAR_N_HIDDEN_LAYERS+x} ]; then
  VIASH_PAR_N_HIDDEN_LAYERS="2"
fi
if [ -z ${VIASH_PAR_DROPOUT_RATE+x} ]; then
  VIASH_PAR_DROPOUT_RATE="0.1"
fi
if [ -z ${VIASH_PAR_DISPERSION+x} ]; then
  VIASH_PAR_DISPERSION="gene"
fi
if [ -z ${VIASH_PAR_GENE_LIKELIHOOD+x} ]; then
  VIASH_PAR_GENE_LIKELIHOOD="nb"
fi
if [ -z ${VIASH_PAR_USE_LAYER_NORMALIZATION+x} ]; then
  VIASH_PAR_USE_LAYER_NORMALIZATION="both"
fi
if [ -z ${VIASH_PAR_USE_BATCH_NORMALIZATION+x} ]; then
  VIASH_PAR_USE_BATCH_NORMALIZATION="none"
fi
if [ -z ${VIASH_PAR_ENCODE_COVARIATES+x} ]; then
  VIASH_PAR_ENCODE_COVARIATES="true"
fi
if [ -z ${VIASH_PAR_DEEPLY_INJECT_COVARIATES+x} ]; then
  VIASH_PAR_DEEPLY_INJECT_COVARIATES="false"
fi
if [ -z ${VIASH_PAR_USE_OBSERVED_LIB_SIZE+x} ]; then
  VIASH_PAR_USE_OBSERVED_LIB_SIZE="false"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_MONITOR+x} ]; then
  VIASH_PAR_EARLY_STOPPING_MONITOR="elbo_validation"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_PATIENCE+x} ]; then
  VIASH_PAR_EARLY_STOPPING_PATIENCE="45"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_MIN_DELTA+x} ]; then
  VIASH_PAR_EARLY_STOPPING_MIN_DELTA="0.0"
fi
if [ -z ${VIASH_PAR_REDUCE_LR_ON_PLATEAU+x} ]; then
  VIASH_PAR_REDUCE_LR_ON_PLATEAU="true"
fi
if [ -z ${VIASH_PAR_LR_FACTOR+x} ]; then
  VIASH_PAR_LR_FACTOR="0.6"
fi
if [ -z ${VIASH_PAR_LR_PATIENCE+x} ]; then
  VIASH_PAR_LR_PATIENCE="30.0"
fi
if [ -z ${VIASH_PAR_N_OBS_MIN_COUNT+x} ]; then
  VIASH_PAR_N_OBS_MIN_COUNT="0"
fi
if [ -z ${VIASH_PAR_N_VAR_MIN_COUNT+x} ]; then
  VIASH_PAR_N_VAR_MIN_COUNT="0"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_N_HIDDEN_NODES" ]]; then
  if ! [[ "$VIASH_PAR_N_HIDDEN_NODES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_hidden_nodes' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE" ]]; then
  if ! [[ "$VIASH_PAR_N_DIMENSIONS_LATENT_SPACE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_dimensions_latent_space' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_N_HIDDEN_LAYERS" ]]; then
  if ! [[ "$VIASH_PAR_N_HIDDEN_LAYERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_hidden_layers' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_DROPOUT_RATE" ]]; then
  if ! [[ "$VIASH_PAR_DROPOUT_RATE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--dropout_rate' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_ENCODE_COVARIATES" ]]; then
  if ! [[ "$VIASH_PAR_ENCODE_COVARIATES" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--encode_covariates' has to be a boolean_false. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_DEEPLY_INJECT_COVARIATES" ]]; then
  if ! [[ "$VIASH_PAR_DEEPLY_INJECT_COVARIATES" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--deeply_inject_covariates' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_USE_OBSERVED_LIB_SIZE" ]]; then
  if ! [[ "$VIASH_PAR_USE_OBSERVED_LIB_SIZE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--use_observed_lib_size' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_EARLY_STOPPING" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--early_stopping' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING_PATIENCE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--early_stopping_patience' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if [[ $VIASH_PAR_EARLY_STOPPING_PATIENCE -lt 1 ]]; then
    ViashError '--early_stopping_patience' has be more than or equal to 1. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--early_stopping_min_delta' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_EARLY_STOPPING_MIN_DELTA '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--early_stopping_min_delta' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_EARLY_STOPPING_MIN_DELTA -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--early_stopping_min_delta' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--early_stopping_min_delta' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_MAX_EPOCHS" ]]; then
  if ! [[ "$VIASH_PAR_MAX_EPOCHS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_epochs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ]]; then
  if ! [[ "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--reduce_lr_on_plateau' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_LR_FACTOR" ]]; then
  if ! [[ "$VIASH_PAR_LR_FACTOR" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--lr_factor' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_LR_FACTOR '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--lr_factor' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_LR_FACTOR -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--lr_factor' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--lr_factor' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_LR_PATIENCE" ]]; then
  if ! [[ "$VIASH_PAR_LR_PATIENCE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--lr_patience' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_LR_PATIENCE '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--lr_patience' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_LR_PATIENCE -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--lr_patience' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--lr_patience' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_N_OBS_MIN_COUNT" ]]; then
  if ! [[ "$VIASH_PAR_N_OBS_MIN_COUNT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_obs_min_count' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_N_VAR_MIN_COUNT" ]]; then
  if ! [[ "$VIASH_PAR_N_VAR_MIN_COUNT" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_var_min_count' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip:lzf")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_COMPRESSION:" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_DISPERSION" ]; then
  VIASH_PAR_DISPERSION_CHOICES=("gene:gene-batch:gene-label:gene-cell")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_DISPERSION_CHOICES[*]}:" =~ ":$VIASH_PAR_DISPERSION:" ]]; then
    ViashError '--dispersion' specified value of \'$VIASH_PAR_DISPERSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_GENE_LIKELIHOOD" ]; then
  VIASH_PAR_GENE_LIKELIHOOD_CHOICES=("nb:zinb:poisson")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_GENE_LIKELIHOOD_CHOICES[*]}:" =~ ":$VIASH_PAR_GENE_LIKELIHOOD:" ]]; then
    ViashError '--gene_likelihood' specified value of \'$VIASH_PAR_GENE_LIKELIHOOD\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_USE_LAYER_NORMALIZATION" ]; then
  VIASH_PAR_USE_LAYER_NORMALIZATION_CHOICES=("encoder:decoder:none:both")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_USE_LAYER_NORMALIZATION_CHOICES[*]}:" =~ ":$VIASH_PAR_USE_LAYER_NORMALIZATION:" ]]; then
    ViashError '--use_layer_normalization' specified value of \'$VIASH_PAR_USE_LAYER_NORMALIZATION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_USE_BATCH_NORMALIZATION" ]; then
  VIASH_PAR_USE_BATCH_NORMALIZATION_CHOICES=("encoder:decoder:none:both")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_USE_BATCH_NORMALIZATION_CHOICES[*]}:" =~ ":$VIASH_PAR_USE_BATCH_NORMALIZATION:" ]]; then
    ViashError '--use_batch_normalization' specified value of \'$VIASH_PAR_USE_BATCH_NORMALIZATION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_EARLY_STOPPING_MONITOR" ]; then
  VIASH_PAR_EARLY_STOPPING_MONITOR_CHOICES=("elbo_validation:reconstruction_loss_validation:kl_local_validation")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_EARLY_STOPPING_MONITOR_CHOICES[*]}:" =~ ":$VIASH_PAR_EARLY_STOPPING_MONITOR:" ]]; then
    ViashError '--early_stopping_monitor' specified value of \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi
if [ ! -z "$VIASH_PAR_OUTPUT_MODEL" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT_MODEL")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT_MODEL")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_INPUT")" )
  VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_PAR_OUTPUT_MODEL" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_MODEL")" )
  VIASH_PAR_OUTPUT_MODEL=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_MODEL")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT_MODEL" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/integrate/scvi:1.0.0 -c "'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/integrate/scvi:1.0.0)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/integrate/scvi:1.0.0
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-scvi-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
from scanpy._utils import check_nonnegative_integers
import mudata
import scvi

### VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'input_layer': $( if [ ! -z ${VIASH_PAR_INPUT_LAYER+x} ]; then echo "r'${VIASH_PAR_INPUT_LAYER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_batch': $( if [ ! -z ${VIASH_PAR_OBS_BATCH+x} ]; then echo "r'${VIASH_PAR_OBS_BATCH//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'var_input': $( if [ ! -z ${VIASH_PAR_VAR_INPUT+x} ]; then echo "r'${VIASH_PAR_VAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_labels': $( if [ ! -z ${VIASH_PAR_OBS_LABELS+x} ]; then echo "r'${VIASH_PAR_OBS_LABELS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_size_factor': $( if [ ! -z ${VIASH_PAR_OBS_SIZE_FACTOR+x} ]; then echo "r'${VIASH_PAR_OBS_SIZE_FACTOR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_categorical_covariate': $( if [ ! -z ${VIASH_PAR_OBS_CATEGORICAL_COVARIATE+x} ]; then echo "r'${VIASH_PAR_OBS_CATEGORICAL_COVARIATE//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'obs_continuous_covariate': $( if [ ! -z ${VIASH_PAR_OBS_CONTINUOUS_COVARIATE+x} ]; then echo "r'${VIASH_PAR_OBS_CONTINUOUS_COVARIATE//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_model': $( if [ ! -z ${VIASH_PAR_OUTPUT_MODEL+x} ]; then echo "r'${VIASH_PAR_OUTPUT_MODEL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obsm_output': $( if [ ! -z ${VIASH_PAR_OBSM_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OBSM_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'n_hidden_nodes': $( if [ ! -z ${VIASH_PAR_N_HIDDEN_NODES+x} ]; then echo "int(r'${VIASH_PAR_N_HIDDEN_NODES//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'n_dimensions_latent_space': $( if [ ! -z ${VIASH_PAR_N_DIMENSIONS_LATENT_SPACE+x} ]; then echo "int(r'${VIASH_PAR_N_DIMENSIONS_LATENT_SPACE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'n_hidden_layers': $( if [ ! -z ${VIASH_PAR_N_HIDDEN_LAYERS+x} ]; then echo "int(r'${VIASH_PAR_N_HIDDEN_LAYERS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'dropout_rate': $( if [ ! -z ${VIASH_PAR_DROPOUT_RATE+x} ]; then echo "float(r'${VIASH_PAR_DROPOUT_RATE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'dispersion': $( if [ ! -z ${VIASH_PAR_DISPERSION+x} ]; then echo "r'${VIASH_PAR_DISPERSION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'gene_likelihood': $( if [ ! -z ${VIASH_PAR_GENE_LIKELIHOOD+x} ]; then echo "r'${VIASH_PAR_GENE_LIKELIHOOD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'use_layer_normalization': $( if [ ! -z ${VIASH_PAR_USE_LAYER_NORMALIZATION+x} ]; then echo "r'${VIASH_PAR_USE_LAYER_NORMALIZATION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'use_batch_normalization': $( if [ ! -z ${VIASH_PAR_USE_BATCH_NORMALIZATION+x} ]; then echo "r'${VIASH_PAR_USE_BATCH_NORMALIZATION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'encode_covariates': $( if [ ! -z ${VIASH_PAR_ENCODE_COVARIATES+x} ]; then echo "r'${VIASH_PAR_ENCODE_COVARIATES//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'deeply_inject_covariates': $( if [ ! -z ${VIASH_PAR_DEEPLY_INJECT_COVARIATES+x} ]; then echo "r'${VIASH_PAR_DEEPLY_INJECT_COVARIATES//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'use_observed_lib_size': $( if [ ! -z ${VIASH_PAR_USE_OBSERVED_LIB_SIZE+x} ]; then echo "r'${VIASH_PAR_USE_OBSERVED_LIB_SIZE//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'early_stopping': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING+x} ]; then echo "r'${VIASH_PAR_EARLY_STOPPING//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'early_stopping_monitor': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_MONITOR+x} ]; then echo "r'${VIASH_PAR_EARLY_STOPPING_MONITOR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'early_stopping_patience': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_PATIENCE+x} ]; then echo "int(r'${VIASH_PAR_EARLY_STOPPING_PATIENCE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'early_stopping_min_delta': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_MIN_DELTA+x} ]; then echo "float(r'${VIASH_PAR_EARLY_STOPPING_MIN_DELTA//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'max_epochs': $( if [ ! -z ${VIASH_PAR_MAX_EPOCHS+x} ]; then echo "int(r'${VIASH_PAR_MAX_EPOCHS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'reduce_lr_on_plateau': $( if [ ! -z ${VIASH_PAR_REDUCE_LR_ON_PLATEAU+x} ]; then echo "r'${VIASH_PAR_REDUCE_LR_ON_PLATEAU//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'lr_factor': $( if [ ! -z ${VIASH_PAR_LR_FACTOR+x} ]; then echo "float(r'${VIASH_PAR_LR_FACTOR//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'lr_patience': $( if [ ! -z ${VIASH_PAR_LR_PATIENCE+x} ]; then echo "float(r'${VIASH_PAR_LR_PATIENCE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'n_obs_min_count': $( if [ ! -z ${VIASH_PAR_N_OBS_MIN_COUNT+x} ]; then echo "int(r'${VIASH_PAR_N_OBS_MIN_COUNT//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'n_var_min_count': $( if [ ! -z ${VIASH_PAR_N_VAR_MIN_COUNT+x} ]; then echo "int(r'${VIASH_PAR_N_VAR_MIN_COUNT//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

### VIASH END

import sys
sys.path.append(meta['resources_dir'])

# START TEMPORARY WORKAROUND subset_vars
# reason: resources aren't available when using Nextflow fusion
# from subset_vars import subset_vars
def subset_vars(adata, subset_col):
    return adata[:, adata.var[subset_col]].copy()

# END TEMPORARY WORKAROUND subset_vars

#TODO: optionally, move to qa
# https://github.com/openpipelines-bio/openpipeline/issues/435
def check_validity_anndata(adata, layer, obs_batch,
                           n_obs_min_count, n_var_min_count):
    assert check_nonnegative_integers(
        adata.layers[layer] if layer else adata.X
    ), f"Make sure input adata contains raw_counts"

    assert len(set(adata.var_names)) == len(
        adata.var_names
    ), f"Dataset contains multiple genes with same gene name."

    # Ensure every obs_batch category has sufficient observations
    assert min(adata.obs[[obs_batch]].value_counts()) > n_obs_min_count, \\
        f"Anndata has fewer than {n_obs_min_count} cells."

    assert adata.n_vars > n_var_min_count, \\
        f"Anndata has fewer than {n_var_min_count} genes."



def main():
    mdata = mudata.read(par["input"].strip())
    adata = mdata.mod[par['modality']]

    if par['var_input']:
        # Subset to HVG
        adata_subset = subset_vars(adata, subset_col=par["var_input"]).copy()
    else:
        adata_subset = adata.copy()

    check_validity_anndata(
        adata_subset, par['input_layer'], par['obs_batch'],
        par["n_obs_min_count"], par["n_var_min_count"]
    )
    # Set up the data
    scvi.model.SCVI.setup_anndata(
        adata_subset,
        batch_key=par['obs_batch'],
        layer=par['input_layer'],
        labels_key=par['obs_labels'],
        size_factor_key=par['obs_size_factor'],
        categorical_covariate_keys=par['obs_categorical_covariate'],
        continuous_covariate_keys=par['obs_continuous_covariate'],
    )

    # Set up the model
    vae_uns = scvi.model.SCVI(
        adata_subset,
        n_hidden=par["n_hidden_nodes"],
        n_latent=par["n_dimensions_latent_space"],
        n_layers=par["n_hidden_layers"],
        dropout_rate=par["dropout_rate"],
        dispersion=par["dispersion"],
        gene_likelihood=par["gene_likelihood"],
        use_layer_norm=par["use_layer_normalization"],
        use_batch_norm=par["use_batch_normalization"],
        encode_covariates=par["encode_covariates"], # Default (True) is for better scArches performance -> maybe don't use this always?
        deeply_inject_covariates=par["deeply_inject_covariates"], # Default (False) for better scArches performance -> maybe don't use this always?
        use_observed_lib_size=par["use_observed_lib_size"], # When size_factors are not passed
    )

    plan_kwargs = {
        "reduce_lr_on_plateau": par['reduce_lr_on_plateau'],
        "lr_patience": par['lr_patience'],
        "lr_factor": par['lr_factor'],
    }


    # Train the model
    vae_uns.train(
        max_epochs=par['max_epochs'],
        early_stopping=par['early_stopping'],
        early_stopping_monitor=par['early_stopping_monitor'],
        early_stopping_patience=par['early_stopping_patience'],
        early_stopping_min_delta=par['early_stopping_min_delta'],
        plan_kwargs=plan_kwargs,
        check_val_every_n_epoch=1,
        accelerator="auto",
    )
    # Note: train_size=1.0 should give better results, but then can't do early_stopping on validation set

    # Get the latent output
    adata.obsm[par['obsm_output']] = vae_uns.get_latent_representation()

    mdata.mod[par['modality']] = adata
    mdata.write_h5mu(par['output'].strip(), compression=par["output_compression"])
    if par["output_model"]:
        vae_uns.save(par["output_model"], overwrite=True)

if __name__ == "__main__":
    main()
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_PAR_INPUT=$(ViashStripAutomount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_MODEL" ]; then
  VIASH_PAR_OUTPUT_MODEL=$(ViashStripAutomount "$VIASH_PAR_OUTPUT_MODEL")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_OUTPUT_MODEL" ] && [ ! -e "$VIASH_PAR_OUTPUT_MODEL" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT_MODEL' does not exist."
  exit 1
fi


exit 0
