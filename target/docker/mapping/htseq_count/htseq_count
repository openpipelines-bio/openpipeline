#!/usr/bin/env bash

# htseq_count 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Robrecht Cannoodt (author, maintainer)
#  * Angela Oliveira Pisco (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="htseq_count"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "htseq_count 1.0.5"
  echo ""
  echo "Quantify gene expression for subsequent testing for differential expression."
  echo ""
  echo "This script takes one or more alignment files in SAM/BAM format and a feature"
  echo "file in GFF format and calculates for each feature the number of reads mapping"
  echo "to it."
  echo ""
  echo "See http://htseq.readthedocs.io/en/master/count.html for details."
  echo ""
  echo "Input:"
  echo "    --input"
  echo "        type: file, required parameter, multiple values allowed, file must exist"
  echo "        example: mysample1.BAM;mysample2.BAM"
  echo "        Path to the SAM/BAM files containing the mapped reads."
  echo ""
  echo "    --reference"
  echo "        type: file, required parameter, file must exist"
  echo "        example: reference.gtf"
  echo "        Path to the GTF file containing the features."
  echo ""
  echo "Output:"
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: htseq-count.tsv"
  echo "        Filename to output the counts to."
  echo ""
  echo "    --output_delimiter"
  echo "        type: string"
  echo "        example:"
  echo "        Column delimiter in output."
  echo ""
  echo "    --output_sam"
  echo "        type: file, multiple values allowed, output, file must exist"
  echo "        example: mysample1_out.BAM;mysample2_out.BAM"
  echo "        Write out all SAM alignment records into SAM/BAM files (one per input"
  echo "        file needed),"
  echo "        annotating each line with its feature assignment (as an optional field"
  echo "        with tag 'XF')."
  echo "        See the -p option to use BAM instead of SAM."
  echo ""
  echo "    --output_sam_format"
  echo "        type: string"
  echo "        choices: [ sam, bam ]"
  echo "        Format to use with the --output_sam argument."
  echo ""
  echo "Arguments:"
  echo "    -r, --order"
  echo "        type: string"
  echo "        default: name"
  echo "        choices: [ pos, name ]"
  echo "        Sorting order of <alignment_file>. Paired-end sequencing data must be"
  echo "        sorted either by position or"
  echo "        by read name, and the sorting order must be specified. Ignored for"
  echo "        single-end data."
  echo ""
  echo "    -s, --stranded"
  echo "        type: string"
  echo "        default: yes"
  echo "        choices: [ yes, no, reverse ]"
  echo "        Whether the data is from a strand-specific assay. 'reverse' means 'yes'"
  echo "        with reversed strand interpretation."
  echo ""
  echo "    -a, --minaqual, --minimum_alignment_quality"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Skip all reads with MAPQ alignment quality lower than the given minimum"
  echo "        value."
  echo "        MAPQ is the 5th column of a SAM/BAM file and its usage depends on the"
  echo "        software"
  echo "        used to map the reads."
  echo ""
  echo "    -t, --type"
  echo "        type: string"
  echo "        example: exon"
  echo "        Feature type (3rd column in GTF file) to be used, all features of other"
  echo "        type are ignored (default, suitable for Ensembl GTF files: exon)"
  echo ""
  echo "    -i, --id_attribute"
  echo "        type: string, multiple values allowed"
  echo "        example: gene_id"
  echo "        GTF attribute to be used as feature ID (default, suitable for Ensembl"
  echo "        GTF files: gene_id)."
  echo "        All feature of the right type (see -t option) within the same GTF"
  echo "        attribute will be added"
  echo "        together. The typical way of using this option is to count all exonic"
  echo "        reads from each gene"
  echo "        and add the exons but other uses are possible as well. You can call this"
  echo "        option multiple"
  echo "        times: in that case, the combination of all attributes separated by"
  echo "        colons (:) will be used"
  echo "        as a unique identifier, e.g. for exons you might use -i gene_id -i"
  echo "        exon_number."
  echo ""
  echo "    --additional_attributes"
  echo "        type: string, multiple values allowed"
  echo "        example: gene_name"
  echo "        Additional feature attributes (suitable for Ensembl GTF files:"
  echo "        gene_name). Use multiple times"
  echo "        for more than one additional attribute. These attributes are only used"
  echo "        as annotations in the"
  echo "        output, while the determination of how the counts are added together is"
  echo "        done based on option -i."
  echo ""
  echo "    --add_chromosome_info"
  echo "        type: boolean_true"
  echo "        Store information about the chromosome of each feature as an additional"
  echo "        attribute"
  echo "        (e.g. colunm in the TSV output file)."
  echo ""
  echo "    -m, --mode"
  echo "        type: string"
  echo "        default: union"
  echo "        choices: [ union, intersection-strict, intersection-nonempty ]"
  echo "        Mode to handle reads overlapping more than one feature."
  echo ""
  echo "    --non_unique"
  echo "        type: string"
  echo "        default: none"
  echo "        choices: [ none, all, fraction, random ]"
  echo "        Whether and how to score reads that are not uniquely aligned or"
  echo "        ambiguously assigned to features."
  echo ""
  echo "    --secondary_alignments"
  echo "        type: string"
  echo "        choices: [ score, ignore ]"
  echo "        Whether to score secondary alignments (0x100 flag)."
  echo ""
  echo "    --supplementary_alignments"
  echo "        type: string"
  echo "        choices: [ score, ignore ]"
  echo "        Whether to score supplementary alignments (0x800 flag)."
  echo ""
  echo "    --counts_output_sparse"
  echo "        type: boolean_true"
  echo "        Store the counts as a sparse matrix (mtx, h5ad, loom)."
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM python:3.10-slim

ENTRYPOINT []

 
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y procps && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "HTSeq" "pyyaml" "scipy" "pandas~=2.0.0"

LABEL org.opencontainers.image.authors="Robrecht Cannoodt, Angela Oliveira Pisco"
LABEL org.opencontainers.image.description="Companion container for running component mapping htseq_count"
LABEL org.opencontainers.image.created="2025-04-24T13:19:37Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="bfe311bb5542f97dfe80b20a3e47a02800708f43"
LABEL org.opencontainers.image.version="1.0.5"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-htseq_count-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "htseq_count 1.0.5"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --reference)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference=*)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference=*\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_delimiter)
            [ -n "$VIASH_PAR_OUTPUT_DELIMITER" ] && ViashError Bad arguments for option \'--output_delimiter\': \'$VIASH_PAR_OUTPUT_DELIMITER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_DELIMITER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_delimiter. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_delimiter=*)
            [ -n "$VIASH_PAR_OUTPUT_DELIMITER" ] && ViashError Bad arguments for option \'--output_delimiter=*\': \'$VIASH_PAR_OUTPUT_DELIMITER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_DELIMITER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_sam)
            [ -n "$VIASH_PAR_OUTPUT_SAM" ] && ViashError Bad arguments for option \'--output_sam\': \'$VIASH_PAR_OUTPUT_SAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_SAM="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_sam. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_sam=*)
            [ -n "$VIASH_PAR_OUTPUT_SAM" ] && ViashError Bad arguments for option \'--output_sam=*\': \'$VIASH_PAR_OUTPUT_SAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_SAM=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_sam_format)
            [ -n "$VIASH_PAR_OUTPUT_SAM_FORMAT" ] && ViashError Bad arguments for option \'--output_sam_format\': \'$VIASH_PAR_OUTPUT_SAM_FORMAT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_SAM_FORMAT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_sam_format. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_sam_format=*)
            [ -n "$VIASH_PAR_OUTPUT_SAM_FORMAT" ] && ViashError Bad arguments for option \'--output_sam_format=*\': \'$VIASH_PAR_OUTPUT_SAM_FORMAT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_SAM_FORMAT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --order)
            [ -n "$VIASH_PAR_ORDER" ] && ViashError Bad arguments for option \'--order\': \'$VIASH_PAR_ORDER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORDER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --order. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --order=*)
            [ -n "$VIASH_PAR_ORDER" ] && ViashError Bad arguments for option \'--order=*\': \'$VIASH_PAR_ORDER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORDER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            [ -n "$VIASH_PAR_ORDER" ] && ViashError Bad arguments for option \'-r\': \'$VIASH_PAR_ORDER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORDER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --stranded)
            [ -n "$VIASH_PAR_STRANDED" ] && ViashError Bad arguments for option \'--stranded\': \'$VIASH_PAR_STRANDED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_STRANDED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --stranded. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --stranded=*)
            [ -n "$VIASH_PAR_STRANDED" ] && ViashError Bad arguments for option \'--stranded=*\': \'$VIASH_PAR_STRANDED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_STRANDED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -s)
            [ -n "$VIASH_PAR_STRANDED" ] && ViashError Bad arguments for option \'-s\': \'$VIASH_PAR_STRANDED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_STRANDED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -s. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --minimum_alignment_quality)
            [ -n "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" ] && ViashError Bad arguments for option \'--minimum_alignment_quality\': \'$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --minimum_alignment_quality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --minimum_alignment_quality=*)
            [ -n "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" ] && ViashError Bad arguments for option \'--minimum_alignment_quality=*\': \'$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -a)
            [ -n "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" ] && ViashError Bad arguments for option \'-a\': \'$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -a. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --minaqual)
            [ -n "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" ] && ViashError Bad arguments for option \'--minaqual\': \'$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --minaqual. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --type)
            [ -n "$VIASH_PAR_TYPE" ] && ViashError Bad arguments for option \'--type\': \'$VIASH_PAR_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TYPE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --type. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --type=*)
            [ -n "$VIASH_PAR_TYPE" ] && ViashError Bad arguments for option \'--type=*\': \'$VIASH_PAR_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TYPE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            [ -n "$VIASH_PAR_TYPE" ] && ViashError Bad arguments for option \'-t\': \'$VIASH_PAR_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TYPE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -t. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_attribute)
            if [ -z "$VIASH_PAR_ID_ATTRIBUTE" ]; then
              VIASH_PAR_ID_ATTRIBUTE="$2"
            else
              VIASH_PAR_ID_ATTRIBUTE="$VIASH_PAR_ID_ATTRIBUTE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id_attribute. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_attribute=*)
            if [ -z "$VIASH_PAR_ID_ATTRIBUTE" ]; then
              VIASH_PAR_ID_ATTRIBUTE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_ID_ATTRIBUTE="$VIASH_PAR_ID_ATTRIBUTE;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -i)
            if [ -z "$VIASH_PAR_ID_ATTRIBUTE" ]; then
              VIASH_PAR_ID_ATTRIBUTE="$2"
            else
              VIASH_PAR_ID_ATTRIBUTE="$VIASH_PAR_ID_ATTRIBUTE;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --additional_attributes)
            if [ -z "$VIASH_PAR_ADDITIONAL_ATTRIBUTES" ]; then
              VIASH_PAR_ADDITIONAL_ATTRIBUTES="$2"
            else
              VIASH_PAR_ADDITIONAL_ATTRIBUTES="$VIASH_PAR_ADDITIONAL_ATTRIBUTES;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --additional_attributes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --additional_attributes=*)
            if [ -z "$VIASH_PAR_ADDITIONAL_ATTRIBUTES" ]; then
              VIASH_PAR_ADDITIONAL_ATTRIBUTES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_ADDITIONAL_ATTRIBUTES="$VIASH_PAR_ADDITIONAL_ATTRIBUTES;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --add_chromosome_info)
            [ -n "$VIASH_PAR_ADD_CHROMOSOME_INFO" ] && ViashError Bad arguments for option \'--add_chromosome_info\': \'$VIASH_PAR_ADD_CHROMOSOME_INFO\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ADD_CHROMOSOME_INFO=true
            shift 1
            ;;
        --mode)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'--mode\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --mode. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --mode=*)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'--mode=*\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -m)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'-m\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -m. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --non_unique)
            [ -n "$VIASH_PAR_NON_UNIQUE" ] && ViashError Bad arguments for option \'--non_unique\': \'$VIASH_PAR_NON_UNIQUE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NON_UNIQUE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --non_unique. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --non_unique=*)
            [ -n "$VIASH_PAR_NON_UNIQUE" ] && ViashError Bad arguments for option \'--non_unique=*\': \'$VIASH_PAR_NON_UNIQUE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NON_UNIQUE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --secondary_alignments)
            [ -n "$VIASH_PAR_SECONDARY_ALIGNMENTS" ] && ViashError Bad arguments for option \'--secondary_alignments\': \'$VIASH_PAR_SECONDARY_ALIGNMENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SECONDARY_ALIGNMENTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --secondary_alignments. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --secondary_alignments=*)
            [ -n "$VIASH_PAR_SECONDARY_ALIGNMENTS" ] && ViashError Bad arguments for option \'--secondary_alignments=*\': \'$VIASH_PAR_SECONDARY_ALIGNMENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SECONDARY_ALIGNMENTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --supplementary_alignments)
            [ -n "$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS" ] && ViashError Bad arguments for option \'--supplementary_alignments\': \'$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --supplementary_alignments. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --supplementary_alignments=*)
            [ -n "$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS" ] && ViashError Bad arguments for option \'--supplementary_alignments=*\': \'$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --counts_output_sparse)
            [ -n "$VIASH_PAR_COUNTS_OUTPUT_SPARSE" ] && ViashError Bad arguments for option \'--counts_output_sparse\': \'$VIASH_PAR_COUNTS_OUTPUT_SPARSE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_COUNTS_OUTPUT_SPARSE=true
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REFERENCE+x} ]; then
  ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_ORDER+x} ]; then
  VIASH_PAR_ORDER="name"
fi
if [ -z ${VIASH_PAR_STRANDED+x} ]; then
  VIASH_PAR_STRANDED="yes"
fi
if [ -z ${VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY+x} ]; then
  VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY="10"
fi
if [ -z ${VIASH_PAR_ADD_CHROMOSOME_INFO+x} ]; then
  VIASH_PAR_ADD_CHROMOSOME_INFO="false"
fi
if [ -z ${VIASH_PAR_MODE+x} ]; then
  VIASH_PAR_MODE="union"
fi
if [ -z ${VIASH_PAR_NON_UNIQUE+x} ]; then
  VIASH_PAR_NON_UNIQUE="none"
fi
if [ -z ${VIASH_PAR_COUNTS_OUTPUT_SPARSE+x} ]; then
  VIASH_PAR_COUNTS_OUTPUT_SPARSE="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  IFS=';'
  set -f
  for file in $VIASH_PAR_INPUT; do
    unset IFS
    if [ ! -e "$file" ]; then
      ViashError "Input file '$file' does not exist."
      exit 1
    fi
  done
  set +f
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ] && [ ! -e "$VIASH_PAR_REFERENCE" ]; then
  ViashError "Input file '$VIASH_PAR_REFERENCE' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_OUTPUT_SAM" ]]; then
  if ! [[ "$VIASH_PAR_OUTPUT_SAM" =~ \* ]]; then
    ViashError '--output_sam' has to be a path containing a wildcard, e.g. 'output_*.txt'. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" ]]; then
  if ! [[ "$VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--minimum_alignment_quality' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_ADD_CHROMOSOME_INFO" ]]; then
  if ! [[ "$VIASH_PAR_ADD_CHROMOSOME_INFO" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--add_chromosome_info' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_COUNTS_OUTPUT_SPARSE" ]]; then
  if ! [[ "$VIASH_PAR_COUNTS_OUTPUT_SPARSE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--counts_output_sparse' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_OUTPUT_SAM_FORMAT" ]; then
  VIASH_PAR_OUTPUT_SAM_FORMAT_CHOICES=("sam:bam")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_SAM_FORMAT_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_SAM_FORMAT:" ]]; then
    ViashError '--output_sam_format' specified value of \'$VIASH_PAR_OUTPUT_SAM_FORMAT\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_ORDER" ]; then
  VIASH_PAR_ORDER_CHOICES=("pos:name")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_ORDER_CHOICES[*]}:" =~ ":$VIASH_PAR_ORDER:" ]]; then
    ViashError '--order' specified value of \'$VIASH_PAR_ORDER\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_STRANDED" ]; then
  VIASH_PAR_STRANDED_CHOICES=("yes:no:reverse")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_STRANDED_CHOICES[*]}:" =~ ":$VIASH_PAR_STRANDED:" ]]; then
    ViashError '--stranded' specified value of \'$VIASH_PAR_STRANDED\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_MODE" ]; then
  VIASH_PAR_MODE_CHOICES=("union:intersection-strict:intersection-nonempty")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_MODE_CHOICES[*]}:" =~ ":$VIASH_PAR_MODE:" ]]; then
    ViashError '--mode' specified value of \'$VIASH_PAR_MODE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_NON_UNIQUE" ]; then
  VIASH_PAR_NON_UNIQUE_CHOICES=("none:all:fraction:random")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_NON_UNIQUE_CHOICES[*]}:" =~ ":$VIASH_PAR_NON_UNIQUE:" ]]; then
    ViashError '--non_unique' specified value of \'$VIASH_PAR_NON_UNIQUE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_SECONDARY_ALIGNMENTS" ]; then
  VIASH_PAR_SECONDARY_ALIGNMENTS_CHOICES=("score:ignore")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_SECONDARY_ALIGNMENTS_CHOICES[*]}:" =~ ":$VIASH_PAR_SECONDARY_ALIGNMENTS:" ]]; then
    ViashError '--secondary_alignments' specified value of \'$VIASH_PAR_SECONDARY_ALIGNMENTS\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS" ]; then
  VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS_CHOICES=("score:ignore")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS_CHOICES[*]}:" =~ ":$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS:" ]]; then
    ViashError '--supplementary_alignments' specified value of \'$VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SAM" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT_SAM")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT_SAM")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_TEST_INPUT=()
  IFS=';'
  for var in $VIASH_PAR_INPUT; do
    unset IFS
    VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$var")" )
    var=$(ViashAutodetectMount "$var")
    VIASH_TEST_INPUT+=( "$var" )
  done
  VIASH_PAR_INPUT=$(IFS=';' ; echo "${VIASH_TEST_INPUT[*]}")
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_REFERENCE")" )
  VIASH_PAR_REFERENCE=$(ViashAutodetectMount "$VIASH_PAR_REFERENCE")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SAM" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_SAM")" )
  VIASH_PAR_OUTPUT_SAM=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_SAM")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT_SAM" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0 -c "'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/mapping/htseq_count:1.0.0
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-htseq_count-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import tempfile
import subprocess
from pathlib import Path
import tarfile
import gzip
import shutil
import yaml

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'reference': $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "r'${VIASH_PAR_REFERENCE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_delimiter': $( if [ ! -z ${VIASH_PAR_OUTPUT_DELIMITER+x} ]; then echo "r'${VIASH_PAR_OUTPUT_DELIMITER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_sam': $( if [ ! -z ${VIASH_PAR_OUTPUT_SAM+x} ]; then echo "r'${VIASH_PAR_OUTPUT_SAM//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'output_sam_format': $( if [ ! -z ${VIASH_PAR_OUTPUT_SAM_FORMAT+x} ]; then echo "r'${VIASH_PAR_OUTPUT_SAM_FORMAT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'order': $( if [ ! -z ${VIASH_PAR_ORDER+x} ]; then echo "r'${VIASH_PAR_ORDER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'stranded': $( if [ ! -z ${VIASH_PAR_STRANDED+x} ]; then echo "r'${VIASH_PAR_STRANDED//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'minimum_alignment_quality': $( if [ ! -z ${VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY+x} ]; then echo "int(r'${VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'type': $( if [ ! -z ${VIASH_PAR_TYPE+x} ]; then echo "r'${VIASH_PAR_TYPE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'id_attribute': $( if [ ! -z ${VIASH_PAR_ID_ATTRIBUTE+x} ]; then echo "r'${VIASH_PAR_ID_ATTRIBUTE//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'additional_attributes': $( if [ ! -z ${VIASH_PAR_ADDITIONAL_ATTRIBUTES+x} ]; then echo "r'${VIASH_PAR_ADDITIONAL_ATTRIBUTES//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'add_chromosome_info': $( if [ ! -z ${VIASH_PAR_ADD_CHROMOSOME_INFO+x} ]; then echo "r'${VIASH_PAR_ADD_CHROMOSOME_INFO//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'mode': $( if [ ! -z ${VIASH_PAR_MODE+x} ]; then echo "r'${VIASH_PAR_MODE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'non_unique': $( if [ ! -z ${VIASH_PAR_NON_UNIQUE+x} ]; then echo "r'${VIASH_PAR_NON_UNIQUE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'secondary_alignments': $( if [ ! -z ${VIASH_PAR_SECONDARY_ALIGNMENTS+x} ]; then echo "r'${VIASH_PAR_SECONDARY_ALIGNMENTS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'supplementary_alignments': $( if [ ! -z ${VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS+x} ]; then echo "r'${VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'counts_output_sparse': $( if [ ! -z ${VIASH_PAR_COUNTS_OUTPUT_SPARSE+x} ]; then echo "r'${VIASH_PAR_COUNTS_OUTPUT_SPARSE//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

########################
### Helper functions ###
########################

# helper function for cheching whether something is a gzip
def is_gz_file(path: Path) -> bool:
    with open(path, 'rb') as file:
        return file.read(2) == b'\\x1f\\x8b'

# if {par_value} is a Path, extract it to a temp_dir_path and return the resulting path
def extract_if_need_be(par_value: Path, temp_dir_path: Path) -> Path:
    if par_value.is_file() and tarfile.is_tarfile(par_value):
        # Remove two extensions (if they exist)
        extaction_dir_name = Path(par_value.stem).stem
        unpacked_path = temp_dir_path / extaction_dir_name
        print(f'    Tar detected; extracting {par_value} to {unpacked_path}', flush=True)

        with tarfile.open(par_value, 'r') as open_tar:
            members = open_tar.getmembers()
            root_dirs = [member
                for member in members
                if member.isdir() and member.name != '.' and '/' not in member.name]
            # if there is only one root_dir (and there are files in that directory)
            # strip that directory name from the destination folder
            if len(root_dirs) == 1:
                for mem in members:
                    mem.path = Path(*Path(mem.path).parts[1:])
            members_to_move = [mem for mem in members if mem.path != Path('.')]
            open_tar.extractall(unpacked_path, members=members_to_move)
        return unpacked_path

    elif par_value.is_file() and is_gz_file(par_value):
        # Remove extension (if it exists)
        extaction_file_name = Path(par_value.stem)
        unpacked_path = temp_dir_path / extaction_file_name
        print(f'    Gzip detected; extracting {par_value} to {unpacked_path}', flush=True)

        with gzip.open(par_value, 'rb') as f_in:
            with open(unpacked_path, 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)
        return unpacked_path

    else:
        return par_value

def generate_args(par, config):
    # fetch arguments from config
    arguments = [
        arg
        for group in config["functionality"]["argument_groups"]
        for arg in group["arguments"]
    ]

    cmd_args = []

    for arg in arguments:
        arg_val = par.get(arg["name"].removeprefix("--"))
        orig_arg = arg.get("info", {}).get("orig_arg")
        if arg_val and orig_arg:
            if not arg.get("multiple", False):
                arg_val = [arg_val]

            if arg["type"] in ["boolean_true", "boolean_false"]:
                # if argument is a boolean_true or boolean_false, simply add the flag
                arg_val = [orig_arg]
            elif orig_arg.startswith("-"):
                # if the orig arg flag is not a positional,
                # add the flag in front of each element and flatten
                arg_val = [str(x) for val in arg_val for x in [orig_arg, val]]

            cmd_args.extend(arg_val)

    return cmd_args

########################
###    Main code     ###
########################

# read config arguments
config = yaml.safe_load(Path(meta["config"]).read_text())


with tempfile.TemporaryDirectory(prefix="htseq-", dir=meta["temp_dir"]) as temp_dir:

    # checking for compressed files, ungzip files if need be
    temp_dir_path = Path(temp_dir)
    reference = Path(par["reference"])

    print(f'>> Check compression of --reference with value: {reference}', flush=True)
    par["reference"] = extract_if_need_be(reference, temp_dir_path)

    print(">> Constructing command", flush=True)
    cmd_args = [ "htseq-count" ] + generate_args(par, config)

    # manually process cpus parameter
    if 'cpus' in meta and meta['cpus']:
        cmd_args.extend(["--nprocesses", str(meta["cpus"])])

    print(">> Running htseq-count with command:", flush=True)
    print("+ " + ' '.join([str(x) for x in cmd_args]), flush=True)

    subprocess.run(
        cmd_args,
        check=True
    )
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  unset VIASH_TEST_INPUT
  IFS=';'
  for var in $VIASH_PAR_INPUT; do
    unset IFS
    if [ -z "$VIASH_TEST_INPUT" ]; then
      VIASH_TEST_INPUT="$(ViashStripAutomount "$var")"
    else
      VIASH_TEST_INPUT="$VIASH_TEST_INPUT;""$(ViashStripAutomount "$var")"
    fi
  done
  VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ]; then
  VIASH_PAR_REFERENCE=$(ViashStripAutomount "$VIASH_PAR_REFERENCE")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SAM" ]; then
  unset VIASH_TEST_OUTPUT_SAM
  IFS=';'
  for var in $VIASH_PAR_OUTPUT_SAM; do
    unset IFS
    if [ -z "$VIASH_TEST_OUTPUT_SAM" ]; then
      VIASH_TEST_OUTPUT_SAM="$(ViashStripAutomount "$var")"
    else
      VIASH_TEST_OUTPUT_SAM="$VIASH_TEST_OUTPUT_SAM;""$(ViashStripAutomount "$var")"
    fi
  done
  VIASH_PAR_OUTPUT_SAM="$VIASH_TEST_OUTPUT_SAM"
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_OUTPUT_SAM" ] && ! compgen -G "$VIASH_PAR_OUTPUT_SAM" > /dev/null; then
  ViashError "Output file '$VIASH_PAR_OUTPUT_SAM' does not exist."
  exit 1
fi


exit 0
