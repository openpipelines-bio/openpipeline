#!/usr/bin/env bash

# score_genes_cell_cycle_scanpy 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Robrecht Cannoodt
#  * Dorien Roosen

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="score_genes_cell_cycle_scanpy"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "score_genes_cell_cycle_scanpy 1.0.5"
  echo ""
  echo "Calculates the score associated to S phase and G2M phase and annotates the cell"
  echo "cycle phase for each cell, as implemented by scanpy."
  echo "The score is the average expression of a set of genes subtracted with the"
  echo "average expression of a reference set of genes."
  echo ""
  echo "Inputs:"
  echo "    --input"
  echo "        type: file, required parameter, file must exist"
  echo "        example: input_file.h5mu"
  echo "        Input h5mu file"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo ""
  echo "    --input_layer"
  echo "        type: string"
  echo "        example: log_normalized"
  echo "        The layer of the adata object containing normalized expression values."
  echo "        If not provided, the X attribute of the adata object will be used."
  echo ""
  echo "    --var_gene_names"
  echo "        type: string"
  echo "        example: gene_names"
  echo "        The name of the column in the var attribute of the adata object that"
  echo "        contains the gene names (symbols)."
  echo "        If not provided, the index of the var attribute will be used."
  echo ""
  echo "Gene list inputs:"
  echo "    The gene list inputs can be provided as a list of gene symbols or as a file"
  echo "    containing a list of gene symbols. The gene list file should be formatted as"
  echo "    a single column with gene symbols."
  echo "    Make sure that the gene list inputs are consistent with the gene names in"
  echo "    the adata object as provided by the --var_gene_names argument."
  echo ""
  echo "    --s_genes"
  echo "        type: string, multiple values allowed"
  echo "        example: gene1;gene2;gene3"
  echo "        List of gene symbols for scoring s phase genes."
  echo ""
  echo "    --s_genes_file"
  echo "        type: file, file must exist"
  echo "        example: s_gene_list.txt"
  echo "        Path to a .txt file containing the gene list of s phase genes to be"
  echo "        scored."
  echo "        The gene list file should be formatted as a single column with gene"
  echo "        symbols."
  echo ""
  echo "    --g2m_genes"
  echo "        type: string, multiple values allowed"
  echo "        example: gene1;gene2;gene3"
  echo "        List of gene symbols for scoring g2m phase genes."
  echo ""
  echo "    --g2m_genes_file"
  echo "        type: file, file must exist"
  echo "        example: g2m_gene_list.txt"
  echo "        Path to a .txt file containing the gene list of g2m phase genes to be"
  echo "        scored."
  echo "        The gene list file should be formatted as a single column with gene"
  echo "        symbols."
  echo ""
  echo "    --gene_pool"
  echo "        type: string, multiple values allowed"
  echo "        example: gene1;gene2;gene3"
  echo "        List of gene symbols for sampling the reference set. Default is all"
  echo "        genes."
  echo ""
  echo "    --gene_pool_file"
  echo "        type: file, file must exist"
  echo "        example: gene_pool.txt"
  echo "        File with genes for sampling the reference set. Default is all genes."
  echo "        The gene pool file should be formatted as a single column with gene"
  echo "        symbols."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: output_file.h5mu"
  echo "        Output h5mu file"
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        The compression format to be used on the output h5mu object."
  echo ""
  echo "    --obs_phase"
  echo "        type: string"
  echo "        default: phase"
  echo "        The name of the column in the obs attribute of the adata object that"
  echo "        will store the cell cycle phase annotation."
  echo ""
  echo "    --obs_s_score"
  echo "        type: string"
  echo "        default: S_score"
  echo "        The name of the column in the obs attribute of the adata object that"
  echo "        will store the s phase score."
  echo ""
  echo "    --obs_g2m_score"
  echo "        type: string"
  echo "        default: G2M_score"
  echo "        The name of the column in the obs attribute of the adata object that"
  echo "        will store the g2m phase score."
  echo ""
  echo "Arguments:"
  echo "    --n_bins"
  echo "        type: integer"
  echo "        default: 25"
  echo "        min: 0"
  echo "        Number of expression level bins for sampling."
  echo ""
  echo "    --random_state"
  echo "        type: integer"
  echo "        default: 0"
  echo "        The random seed for sampling."
  echo ""
  echo "    --allow_missing_genes"
  echo "        type: boolean"
  echo "        default: false"
  echo "        If true, missing genes in the gene list will be ignored."
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "score_genes_cell_cycle_scanpy 1.0.5"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_layer)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_layer=*)
            [ -n "$VIASH_PAR_INPUT_LAYER" ] && ViashError Bad arguments for option \'--input_layer=*\': \'$VIASH_PAR_INPUT_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --var_gene_names)
            [ -n "$VIASH_PAR_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--var_gene_names\': \'$VIASH_PAR_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VAR_GENE_NAMES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --var_gene_names. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --var_gene_names=*)
            [ -n "$VIASH_PAR_VAR_GENE_NAMES" ] && ViashError Bad arguments for option \'--var_gene_names=*\': \'$VIASH_PAR_VAR_GENE_NAMES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VAR_GENE_NAMES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --s_genes)
            if [ -z "$VIASH_PAR_S_GENES" ]; then
              VIASH_PAR_S_GENES="$2"
            else
              VIASH_PAR_S_GENES="$VIASH_PAR_S_GENES;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --s_genes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --s_genes=*)
            if [ -z "$VIASH_PAR_S_GENES" ]; then
              VIASH_PAR_S_GENES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_S_GENES="$VIASH_PAR_S_GENES;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --s_genes_file)
            [ -n "$VIASH_PAR_S_GENES_FILE" ] && ViashError Bad arguments for option \'--s_genes_file\': \'$VIASH_PAR_S_GENES_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_S_GENES_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --s_genes_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --s_genes_file=*)
            [ -n "$VIASH_PAR_S_GENES_FILE" ] && ViashError Bad arguments for option \'--s_genes_file=*\': \'$VIASH_PAR_S_GENES_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_S_GENES_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --g2m_genes)
            if [ -z "$VIASH_PAR_G2M_GENES" ]; then
              VIASH_PAR_G2M_GENES="$2"
            else
              VIASH_PAR_G2M_GENES="$VIASH_PAR_G2M_GENES;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --g2m_genes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --g2m_genes=*)
            if [ -z "$VIASH_PAR_G2M_GENES" ]; then
              VIASH_PAR_G2M_GENES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_G2M_GENES="$VIASH_PAR_G2M_GENES;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --g2m_genes_file)
            [ -n "$VIASH_PAR_G2M_GENES_FILE" ] && ViashError Bad arguments for option \'--g2m_genes_file\': \'$VIASH_PAR_G2M_GENES_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_G2M_GENES_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --g2m_genes_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --g2m_genes_file=*)
            [ -n "$VIASH_PAR_G2M_GENES_FILE" ] && ViashError Bad arguments for option \'--g2m_genes_file=*\': \'$VIASH_PAR_G2M_GENES_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_G2M_GENES_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --gene_pool)
            if [ -z "$VIASH_PAR_GENE_POOL" ]; then
              VIASH_PAR_GENE_POOL="$2"
            else
              VIASH_PAR_GENE_POOL="$VIASH_PAR_GENE_POOL;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --gene_pool. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --gene_pool=*)
            if [ -z "$VIASH_PAR_GENE_POOL" ]; then
              VIASH_PAR_GENE_POOL=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_GENE_POOL="$VIASH_PAR_GENE_POOL;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --gene_pool_file)
            [ -n "$VIASH_PAR_GENE_POOL_FILE" ] && ViashError Bad arguments for option \'--gene_pool_file\': \'$VIASH_PAR_GENE_POOL_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENE_POOL_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --gene_pool_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --gene_pool_file=*)
            [ -n "$VIASH_PAR_GENE_POOL_FILE" ] && ViashError Bad arguments for option \'--gene_pool_file=*\': \'$VIASH_PAR_GENE_POOL_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENE_POOL_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_phase)
            [ -n "$VIASH_PAR_OBS_PHASE" ] && ViashError Bad arguments for option \'--obs_phase\': \'$VIASH_PAR_OBS_PHASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_PHASE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_phase. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_phase=*)
            [ -n "$VIASH_PAR_OBS_PHASE" ] && ViashError Bad arguments for option \'--obs_phase=*\': \'$VIASH_PAR_OBS_PHASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_PHASE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_s_score)
            [ -n "$VIASH_PAR_OBS_S_SCORE" ] && ViashError Bad arguments for option \'--obs_s_score\': \'$VIASH_PAR_OBS_S_SCORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_S_SCORE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_s_score. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_s_score=*)
            [ -n "$VIASH_PAR_OBS_S_SCORE" ] && ViashError Bad arguments for option \'--obs_s_score=*\': \'$VIASH_PAR_OBS_S_SCORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_S_SCORE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_g2m_score)
            [ -n "$VIASH_PAR_OBS_G2M_SCORE" ] && ViashError Bad arguments for option \'--obs_g2m_score\': \'$VIASH_PAR_OBS_G2M_SCORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_G2M_SCORE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_g2m_score. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_g2m_score=*)
            [ -n "$VIASH_PAR_OBS_G2M_SCORE" ] && ViashError Bad arguments for option \'--obs_g2m_score=*\': \'$VIASH_PAR_OBS_G2M_SCORE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_G2M_SCORE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_bins)
            [ -n "$VIASH_PAR_N_BINS" ] && ViashError Bad arguments for option \'--n_bins\': \'$VIASH_PAR_N_BINS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_BINS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_bins. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_bins=*)
            [ -n "$VIASH_PAR_N_BINS" ] && ViashError Bad arguments for option \'--n_bins=*\': \'$VIASH_PAR_N_BINS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_BINS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --random_state)
            [ -n "$VIASH_PAR_RANDOM_STATE" ] && ViashError Bad arguments for option \'--random_state\': \'$VIASH_PAR_RANDOM_STATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RANDOM_STATE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --random_state. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --random_state=*)
            [ -n "$VIASH_PAR_RANDOM_STATE" ] && ViashError Bad arguments for option \'--random_state=*\': \'$VIASH_PAR_RANDOM_STATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RANDOM_STATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --allow_missing_genes)
            [ -n "$VIASH_PAR_ALLOW_MISSING_GENES" ] && ViashError Bad arguments for option \'--allow_missing_genes\': \'$VIASH_PAR_ALLOW_MISSING_GENES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ALLOW_MISSING_GENES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --allow_missing_genes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --allow_missing_genes=*)
            [ -n "$VIASH_PAR_ALLOW_MISSING_GENES" ] && ViashError Bad arguments for option \'--allow_missing_genes=*\': \'$VIASH_PAR_ALLOW_MISSING_GENES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ALLOW_MISSING_GENES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_OBS_PHASE+x} ]; then
  VIASH_PAR_OBS_PHASE="phase"
fi
if [ -z ${VIASH_PAR_OBS_S_SCORE+x} ]; then
  VIASH_PAR_OBS_S_SCORE="S_score"
fi
if [ -z ${VIASH_PAR_OBS_G2M_SCORE+x} ]; then
  VIASH_PAR_OBS_G2M_SCORE="G2M_score"
fi
if [ -z ${VIASH_PAR_N_BINS+x} ]; then
  VIASH_PAR_N_BINS="25"
fi
if [ -z ${VIASH_PAR_RANDOM_STATE+x} ]; then
  VIASH_PAR_RANDOM_STATE="0"
fi
if [ -z ${VIASH_PAR_ALLOW_MISSING_GENES+x} ]; then
  VIASH_PAR_ALLOW_MISSING_GENES="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_S_GENES_FILE" ] && [ ! -e "$VIASH_PAR_S_GENES_FILE" ]; then
  ViashError "Input file '$VIASH_PAR_S_GENES_FILE' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_G2M_GENES_FILE" ] && [ ! -e "$VIASH_PAR_G2M_GENES_FILE" ]; then
  ViashError "Input file '$VIASH_PAR_G2M_GENES_FILE' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_GENE_POOL_FILE" ] && [ ! -e "$VIASH_PAR_GENE_POOL_FILE" ]; then
  ViashError "Input file '$VIASH_PAR_GENE_POOL_FILE' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_N_BINS" ]]; then
  if ! [[ "$VIASH_PAR_N_BINS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_bins' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if [[ $VIASH_PAR_N_BINS -lt 0 ]]; then
    ViashError '--n_bins' has be more than or equal to 0. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_RANDOM_STATE" ]]; then
  if ! [[ "$VIASH_PAR_RANDOM_STATE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--random_state' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_ALLOW_MISSING_GENES" ]]; then
  if ! [[ "$VIASH_PAR_ALLOW_MISSING_GENES" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--allow_missing_genes' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip:lzf")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_COMPRESSION:" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-score_genes_cell_cycle_scanpy-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import scanpy as sc
import mudata as mu
import anndata as ad
import pandas as pd
import sys

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'input_layer': $( if [ ! -z ${VIASH_PAR_INPUT_LAYER+x} ]; then echo "r'${VIASH_PAR_INPUT_LAYER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'var_gene_names': $( if [ ! -z ${VIASH_PAR_VAR_GENE_NAMES+x} ]; then echo "r'${VIASH_PAR_VAR_GENE_NAMES//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  's_genes': $( if [ ! -z ${VIASH_PAR_S_GENES+x} ]; then echo "r'${VIASH_PAR_S_GENES//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  's_genes_file': $( if [ ! -z ${VIASH_PAR_S_GENES_FILE+x} ]; then echo "r'${VIASH_PAR_S_GENES_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'g2m_genes': $( if [ ! -z ${VIASH_PAR_G2M_GENES+x} ]; then echo "r'${VIASH_PAR_G2M_GENES//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'g2m_genes_file': $( if [ ! -z ${VIASH_PAR_G2M_GENES_FILE+x} ]; then echo "r'${VIASH_PAR_G2M_GENES_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'gene_pool': $( if [ ! -z ${VIASH_PAR_GENE_POOL+x} ]; then echo "r'${VIASH_PAR_GENE_POOL//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'gene_pool_file': $( if [ ! -z ${VIASH_PAR_GENE_POOL_FILE+x} ]; then echo "r'${VIASH_PAR_GENE_POOL_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_phase': $( if [ ! -z ${VIASH_PAR_OBS_PHASE+x} ]; then echo "r'${VIASH_PAR_OBS_PHASE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_s_score': $( if [ ! -z ${VIASH_PAR_OBS_S_SCORE+x} ]; then echo "r'${VIASH_PAR_OBS_S_SCORE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_g2m_score': $( if [ ! -z ${VIASH_PAR_OBS_G2M_SCORE+x} ]; then echo "r'${VIASH_PAR_OBS_G2M_SCORE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'n_bins': $( if [ ! -z ${VIASH_PAR_N_BINS+x} ]; then echo "int(r'${VIASH_PAR_N_BINS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'random_state': $( if [ ! -z ${VIASH_PAR_RANDOM_STATE+x} ]; then echo "int(r'${VIASH_PAR_RANDOM_STATE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'allow_missing_genes': $( if [ ! -z ${VIASH_PAR_ALLOW_MISSING_GENES+x} ]; then echo "r'${VIASH_PAR_ALLOW_MISSING_GENES//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

# import helper functions
sys.path.append(meta["resources_dir"])

# START TEMPORARY WORKAROUND read_gene_list
# reason: resources aren't available when using Nextflow fusion

# from helper import read_gene_list
from typing import List, Dict, Any, Optional

def read_gene_list(
        par: Dict[str, Any],
        gene_names: List[str],
        list_key: str,
        file_key: str,
        required: bool = True) -> Optional[List[str]]:
    """
    Reads a gene list from the parameters and returns it as a list of strings.
    """

    # check whether one or the other was provided, if required
    if required and not par[list_key] and not par[file_key]:
        raise ValueError(f"Either --{list_key} or --{file_key} must be set")

    # read gene list from parameters
    list_of_genes = par[list_key] if par[list_key] else []

    # read gene list from file
    if par[file_key]:
        with open(par[file_key]) as file:
            file_genes = [x.strip() for x in file]
        list_of_genes.extend(file_genes)

    # check for missing genes
    if not par["allow_missing_genes"] and list_of_genes:
        missing = set(list_of_genes).difference(gene_names)
        if missing:
            raise ValueError(f"The follow genes are missing from the input dataset: {missing}")

    # return gene list
    if list_of_genes:
        return list_of_genes
    elif required:
        raise ValueError(f"No genes detected in --{list_key} or --{file_key}")
    else:
        return None


# END TEMPORARY WORKAROUND read_gene_list

# read data
mdata = mu.read(par["input"])
input_adata = mdata.mod[par["modality"]]

gene_names_index = input_adata.var[par["var_gene_names"]] if par["var_gene_names"] else input_adata.var_names
gene_names = pd.Series(input_adata.var_names, index=gene_names_index)

# check if var index is unique
# input.var[par["var_gene_names"]] is mapped to var index, but may not contain unique values
if not input_adata.var.index.is_unique:
    raise ValueError("var index is not unique")

# read gene lists
s_genes = read_gene_list(par, gene_names.index, "s_genes", "s_genes_file")
g2m_genes = read_gene_list(par, gene_names.index, "g2m_genes", "g2m_genes_file")
gene_pool = read_gene_list(par, gene_names.index, "gene_pool", "gene_pool_file", required=False)

# find matching index names for given genes
g2m_index = gene_names.loc[g2m_genes].tolist()
s_index = gene_names.loc[s_genes].tolist()
gene_pool_index = gene_names.loc[gene_pool].tolist() if gene_pool else None

# create input data for scanpy
if par["input_layer"]:
    X_data = input_adata.layers[par["input_layer"]].copy()
else:
    X_data = input_adata.X.copy()
adata_scanpy = ad.AnnData(
    X=X_data,
    obs=pd.DataFrame(index=input_adata.obs.index),
    var=pd.DataFrame(index=input_adata.var.index)
)

# run score_genes_cell_cycle
sc.tl.score_genes_cell_cycle(
    adata_scanpy,
    s_genes=s_index,
    g2m_genes=g2m_index,
    gene_pool=gene_pool_index,
    n_bins=par["n_bins"],
    random_state=par["random_state"]
)

# copy results to mudata
output_slot_mapping = {
    par["obs_s_score"]: "S_score",
    par["obs_g2m_score"]: "G2M_score",
    par["obs_phase"]: "phase"
}
assert all(adata_scanpy.obs.index == input_adata.obs.index), "index mismatch between input adata and scanpy output adata"
for dest, orig in output_slot_mapping.items():
    input_adata.obs[dest] = adata_scanpy.obs[orig]

# write output to mudata
mdata.write(par["output"], compression=par["output_compression"])
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
