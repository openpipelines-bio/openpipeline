#!/usr/bin/env bash

# scarches 1.0.5
# 
# This wrapper script is auto-generated by viash 0.8.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Vladimir Shitov

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="scarches"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "scarches 1.0.5"
  echo ""
  echo "Performs reference mapping with scArches"
  echo ""
  echo "Inputs:"
  echo "    -i, --input"
  echo "        type: file, required parameter, file must exist"
  echo "        Input h5mu file to use as a query"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo ""
  echo "    -r, --reference"
  echo "        type: file, required parameter, file must exist"
  echo "        Path to the directory with reference model or a web link. For HLCA use"
  echo "        https://zenodo.org/record/6337966/files/HLCA_reference_model.zip"
  echo ""
  echo "    --dataset_name"
  echo "        type: string"
  echo "        default: test_dataset"
  echo "        Name of query dataset to use as a batch name. If not set, name of the"
  echo "        input file is used"
  echo ""
  echo "Outputs:"
  echo "    -o, --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        Output h5mu file."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        The compression format to be used on the output h5mu object."
  echo ""
  echo "    --model_output"
  echo "        type: file, output, file must exist"
  echo "        default: model"
  echo "        Output directory for model"
  echo ""
  echo "    --obsm_output"
  echo "        type: string"
  echo "        default: X_integrated_scanvi"
  echo "        In which .obsm slot to store the resulting integrated embedding."
  echo ""
  echo "Early stopping arguments:"
  echo "    --early_stopping"
  echo "        type: boolean"
  echo "        Whether to perform early stopping with respect to the validation set."
  echo ""
  echo "    --early_stopping_monitor"
  echo "        type: string"
  echo "        default: elbo_validation"
  echo "        choices: [ elbo_validation, reconstruction_loss_validation,"
  echo "kl_local_validation ]"
  echo "        Metric logged during validation set epoch."
  echo ""
  echo "    --early_stopping_patience"
  echo "        type: integer"
  echo "        default: 45"
  echo "        min: 1"
  echo "        Number of validation epochs with no improvement after which training"
  echo "        will be stopped."
  echo ""
  echo "    --early_stopping_min_delta"
  echo "        type: double"
  echo "        default: 0.0"
  echo "        min: 0.0"
  echo "        Minimum change in the monitored quantity to qualify as an improvement,"
  echo "        i.e. an absolute change of less than min_delta, will count as no"
  echo "        improvement."
  echo ""
  echo "Learning parameters:"
  echo "    --max_epochs"
  echo "        type: integer, required parameter"
  echo "        Number of passes through the dataset, defaults to (20000 / number of"
  echo "        cells) * 400 or 400; whichever is smallest."
  echo ""
  echo "    --reduce_lr_on_plateau"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether to monitor validation loss and reduce learning rate when"
  echo "        validation set \`lr_scheduler_metric\` plateaus."
  echo ""
  echo "    --lr_factor"
  echo "        type: double"
  echo "        default: 0.6"
  echo "        min: 0.0"
  echo "        Factor to reduce learning rate."
  echo ""
  echo "    --lr_patience"
  echo "        type: double"
  echo "        default: 30.0"
  echo "        min: 0.0"
  echo "        Number of epochs with no improvement after which learning rate will be"
  echo "        reduced."
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "scarches 1.0.5"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'-i\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reference=*)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'--reference=*\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            [ -n "$VIASH_PAR_REFERENCE" ] && ViashError Bad arguments for option \'-r\': \'$VIASH_PAR_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_name)
            [ -n "$VIASH_PAR_DATASET_NAME" ] && ViashError Bad arguments for option \'--dataset_name\': \'$VIASH_PAR_DATASET_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_name. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_name=*)
            [ -n "$VIASH_PAR_DATASET_NAME" ] && ViashError Bad arguments for option \'--dataset_name=*\': \'$VIASH_PAR_DATASET_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --model_output)
            [ -n "$VIASH_PAR_MODEL_OUTPUT" ] && ViashError Bad arguments for option \'--model_output\': \'$VIASH_PAR_MODEL_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --model_output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model_output=*)
            [ -n "$VIASH_PAR_MODEL_OUTPUT" ] && ViashError Bad arguments for option \'--model_output=*\': \'$VIASH_PAR_MODEL_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obsm_output)
            [ -n "$VIASH_PAR_OBSM_OUTPUT" ] && ViashError Bad arguments for option \'--obsm_output\': \'$VIASH_PAR_OBSM_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obsm_output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obsm_output=*)
            [ -n "$VIASH_PAR_OBSM_OUTPUT" ] && ViashError Bad arguments for option \'--obsm_output=*\': \'$VIASH_PAR_OBSM_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping)
            [ -n "$VIASH_PAR_EARLY_STOPPING" ] && ViashError Bad arguments for option \'--early_stopping\': \'$VIASH_PAR_EARLY_STOPPING\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING" ] && ViashError Bad arguments for option \'--early_stopping=*\': \'$VIASH_PAR_EARLY_STOPPING\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_monitor)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MONITOR" ] && ViashError Bad arguments for option \'--early_stopping_monitor\': \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MONITOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_monitor. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_monitor=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MONITOR" ] && ViashError Bad arguments for option \'--early_stopping_monitor=*\': \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MONITOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_patience)
            [ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ] && ViashError Bad arguments for option \'--early_stopping_patience\': \'$VIASH_PAR_EARLY_STOPPING_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_PATIENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_patience. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_patience=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ] && ViashError Bad arguments for option \'--early_stopping_patience=*\': \'$VIASH_PAR_EARLY_STOPPING_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_PATIENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --early_stopping_min_delta)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ] && ViashError Bad arguments for option \'--early_stopping_min_delta\': \'$VIASH_PAR_EARLY_STOPPING_MIN_DELTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MIN_DELTA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --early_stopping_min_delta. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --early_stopping_min_delta=*)
            [ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ] && ViashError Bad arguments for option \'--early_stopping_min_delta=*\': \'$VIASH_PAR_EARLY_STOPPING_MIN_DELTA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EARLY_STOPPING_MIN_DELTA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_epochs)
            [ -n "$VIASH_PAR_MAX_EPOCHS" ] && ViashError Bad arguments for option \'--max_epochs\': \'$VIASH_PAR_MAX_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_EPOCHS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_epochs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_epochs=*)
            [ -n "$VIASH_PAR_MAX_EPOCHS" ] && ViashError Bad arguments for option \'--max_epochs=*\': \'$VIASH_PAR_MAX_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_EPOCHS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reduce_lr_on_plateau)
            [ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ] && ViashError Bad arguments for option \'--reduce_lr_on_plateau\': \'$VIASH_PAR_REDUCE_LR_ON_PLATEAU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REDUCE_LR_ON_PLATEAU="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reduce_lr_on_plateau. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reduce_lr_on_plateau=*)
            [ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ] && ViashError Bad arguments for option \'--reduce_lr_on_plateau=*\': \'$VIASH_PAR_REDUCE_LR_ON_PLATEAU\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REDUCE_LR_ON_PLATEAU=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lr_factor)
            [ -n "$VIASH_PAR_LR_FACTOR" ] && ViashError Bad arguments for option \'--lr_factor\': \'$VIASH_PAR_LR_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_FACTOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lr_factor. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lr_factor=*)
            [ -n "$VIASH_PAR_LR_FACTOR" ] && ViashError Bad arguments for option \'--lr_factor=*\': \'$VIASH_PAR_LR_FACTOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_FACTOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --lr_patience)
            [ -n "$VIASH_PAR_LR_PATIENCE" ] && ViashError Bad arguments for option \'--lr_patience\': \'$VIASH_PAR_LR_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_PATIENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --lr_patience. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --lr_patience=*)
            [ -n "$VIASH_PAR_LR_PATIENCE" ] && ViashError Bad arguments for option \'--lr_patience=*\': \'$VIASH_PAR_LR_PATIENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LR_PATIENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REFERENCE+x} ]; then
  ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_MAX_EPOCHS+x} ]; then
  ViashError '--max_epochs' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_DATASET_NAME+x} ]; then
  VIASH_PAR_DATASET_NAME="test_dataset"
fi
if [ -z ${VIASH_PAR_MODEL_OUTPUT+x} ]; then
  VIASH_PAR_MODEL_OUTPUT="model"
fi
if [ -z ${VIASH_PAR_OBSM_OUTPUT+x} ]; then
  VIASH_PAR_OBSM_OUTPUT="X_integrated_scanvi"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_MONITOR+x} ]; then
  VIASH_PAR_EARLY_STOPPING_MONITOR="elbo_validation"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_PATIENCE+x} ]; then
  VIASH_PAR_EARLY_STOPPING_PATIENCE="45"
fi
if [ -z ${VIASH_PAR_EARLY_STOPPING_MIN_DELTA+x} ]; then
  VIASH_PAR_EARLY_STOPPING_MIN_DELTA="0.0"
fi
if [ -z ${VIASH_PAR_REDUCE_LR_ON_PLATEAU+x} ]; then
  VIASH_PAR_REDUCE_LR_ON_PLATEAU="true"
fi
if [ -z ${VIASH_PAR_LR_FACTOR+x} ]; then
  VIASH_PAR_LR_FACTOR="0.6"
fi
if [ -z ${VIASH_PAR_LR_PATIENCE+x} ]; then
  VIASH_PAR_LR_PATIENCE="30.0"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_REFERENCE" ] && [ ! -e "$VIASH_PAR_REFERENCE" ]; then
  ViashError "Input file '$VIASH_PAR_REFERENCE' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_EARLY_STOPPING" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--early_stopping' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_EARLY_STOPPING_PATIENCE" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING_PATIENCE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--early_stopping_patience' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if [[ $VIASH_PAR_EARLY_STOPPING_PATIENCE -lt 1 ]]; then
    ViashError '--early_stopping_patience' has be more than or equal to 1. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" ]]; then
  if ! [[ "$VIASH_PAR_EARLY_STOPPING_MIN_DELTA" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--early_stopping_min_delta' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_EARLY_STOPPING_MIN_DELTA '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--early_stopping_min_delta' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_EARLY_STOPPING_MIN_DELTA -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--early_stopping_min_delta' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--early_stopping_min_delta' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_MAX_EPOCHS" ]]; then
  if ! [[ "$VIASH_PAR_MAX_EPOCHS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_epochs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" ]]; then
  if ! [[ "$VIASH_PAR_REDUCE_LR_ON_PLATEAU" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--reduce_lr_on_plateau' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_LR_FACTOR" ]]; then
  if ! [[ "$VIASH_PAR_LR_FACTOR" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--lr_factor' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_LR_FACTOR '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--lr_factor' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_LR_FACTOR -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--lr_factor' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--lr_factor' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_PAR_LR_PATIENCE" ]]; then
  if ! [[ "$VIASH_PAR_LR_PATIENCE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--lr_patience' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
  if command -v bc &> /dev/null; then
    if ! [[ `echo $VIASH_PAR_LR_PATIENCE '>=' 0.0 | bc` -eq 1 ]]; then
      ViashError '--lr_patience' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  elif command -v awk &> /dev/null; then
    if ! [[ `awk -v n1=$VIASH_PAR_LR_PATIENCE -v n2=0.0 'BEGIN { print (n1 >= n2) ? "1" : "0" }'` -eq 1 ]]; then
      ViashError '--lr_patience' has be more than or equal to 0.0. Use "--help" to get more information on the parameters.
      exit 1
    fi
  else
    ViashWarning '--lr_patience' specifies a minimum value but the value was not verified as neither \'bc\' or \`awk\` are present on the system.
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip:lzf")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_COMPRESSION:" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_EARLY_STOPPING_MONITOR" ]; then
  VIASH_PAR_EARLY_STOPPING_MONITOR_CHOICES=("elbo_validation:reconstruction_loss_validation:kl_local_validation")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_EARLY_STOPPING_MONITOR_CHOICES[*]}:" =~ ":$VIASH_PAR_EARLY_STOPPING_MONITOR:" ]]; then
    ViashError '--early_stopping_monitor' specified value of \'$VIASH_PAR_EARLY_STOPPING_MONITOR\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi
if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_MODEL_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_MODEL_OUTPUT")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-scarches-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import sys
import mudata
import scvi
from torch.cuda import is_available as cuda_is_available
try:
    from torch.backends.mps import is_available as mps_is_available
except ModuleNotFoundError:
    # Older pytorch versions
    # MacOS GPUs
    def mps_is_available():
        return False

### VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'reference': $( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "r'${VIASH_PAR_REFERENCE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'dataset_name': $( if [ ! -z ${VIASH_PAR_DATASET_NAME+x} ]; then echo "r'${VIASH_PAR_DATASET_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'model_output': $( if [ ! -z ${VIASH_PAR_MODEL_OUTPUT+x} ]; then echo "r'${VIASH_PAR_MODEL_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obsm_output': $( if [ ! -z ${VIASH_PAR_OBSM_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OBSM_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'early_stopping': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING+x} ]; then echo "r'${VIASH_PAR_EARLY_STOPPING//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'early_stopping_monitor': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_MONITOR+x} ]; then echo "r'${VIASH_PAR_EARLY_STOPPING_MONITOR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'early_stopping_patience': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_PATIENCE+x} ]; then echo "int(r'${VIASH_PAR_EARLY_STOPPING_PATIENCE//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'early_stopping_min_delta': $( if [ ! -z ${VIASH_PAR_EARLY_STOPPING_MIN_DELTA+x} ]; then echo "float(r'${VIASH_PAR_EARLY_STOPPING_MIN_DELTA//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'max_epochs': $( if [ ! -z ${VIASH_PAR_MAX_EPOCHS+x} ]; then echo "int(r'${VIASH_PAR_MAX_EPOCHS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'reduce_lr_on_plateau': $( if [ ! -z ${VIASH_PAR_REDUCE_LR_ON_PLATEAU+x} ]; then echo "r'${VIASH_PAR_REDUCE_LR_ON_PLATEAU//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'lr_factor': $( if [ ! -z ${VIASH_PAR_LR_FACTOR+x} ]; then echo "float(r'${VIASH_PAR_LR_FACTOR//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'lr_patience': $( if [ ! -z ${VIASH_PAR_LR_PATIENCE+x} ]; then echo "float(r'${VIASH_PAR_LR_PATIENCE//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

### VIASH END

sys.path.append(meta["resources_dir"])
# START TEMPORARY WORKAROUND setup_logger
# reason: resources aren't available when using Nextflow fusion
# from setup_logger import setup_logger
def setup_logger():
    import logging
    from sys import stdout

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    console_handler = logging.StreamHandler(stdout)
    logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
    console_handler.setFormatter(logFormatter)
    logger.addHandler(console_handler)

    return logger
# END TEMPORARY WORKAROUND setup_logger
logger = setup_logger()

def _read_model_name_from_registry(model_path) -> str:
    """Read registry with information about the model, return the model name"""
    registry = scvi.model.base.BaseModelClass.load_registry(model_path)
    return registry["model_name"]


def _detect_base_model(model_path):
    """Read from the model's file which scvi_tools model it contains"""

    names_to_models_map = {
        "AUTOZI": scvi.model.AUTOZI,
        "CondSCVI": scvi.model.CondSCVI,
        "DestVI": scvi.model.DestVI,
        "LinearSCVI": scvi.model.LinearSCVI,
        "PEAKVI": scvi.model.PEAKVI,
        "SCANVI": scvi.model.SCANVI,
        "SCVI": scvi.model.SCVI,
        "TOTALVI": scvi.model.TOTALVI,
        "MULTIVI": scvi.model.MULTIVI,
        "AmortizedLDA": scvi.model.AmortizedLDA,
        "JaxSCVI": scvi.model.JaxSCVI,
    }
    
    return names_to_models_map[_read_model_name_from_registry(model_path)]


def extract_file_name(file_path):
    """Return the name of the file from path to this file
    
    Examples
    --------
    >>> extract_file_name("resources_test/pbmc_1k_protein_v3/pbmc_1k_protein_v3_mms.h5mu")
    pbmc_1k_protein_v3_mms
    """
    slash_position = file_path.rfind("/")
    dot_position = file_path.rfind(".")

    return file_path[slash_position + 1: dot_position]


def map_to_existing_reference(adata_query, model_path, check_val_every_n_epoch=1):
    """
    A function to map the query data to the reference atlas

    Input:
        * adata_query: An AnnData object with the query
        * model_path: The reference model directory
    
    Output:
        * vae_query: the trained scvi_tools model
        * adata_query: The AnnData object with the query preprocessed for the mapping to the reference
    """
    model = _detect_base_model(model_path)

    try:
        model.prepare_query_anndata(adata_query, model_path)
    except ValueError:
        logger.warning("ValueError thrown when preparing adata for mapping. Clearing .varm field to prevent it")
        adata_query.varm.clear()
        model.prepare_query_anndata(adata_query, model_path)

    # Load query data into the model
    vae_query = model.load_query_data(
            adata_query,
            model_path,
            freeze_dropout=True
    )

    # Train scArches model for query mapping
    vae_query.train(
            max_epochs=par["max_epochs"],
            early_stopping=par['early_stopping'],
            early_stopping_monitor=par['early_stopping_monitor'],
            early_stopping_patience=par['early_stopping_patience'],
            early_stopping_min_delta=par['early_stopping_min_delta'],
            check_val_every_n_epoch=check_val_every_n_epoch,
            use_gpu=(cuda_is_available() or mps_is_available())
    )

    return vae_query, adata_query


def _convert_object_dtypes_to_strings(adata):
    """Convert object dtypes in .var and .obs to string to prevent error when saving file"""
    def convert_cols(df):
        object_cols = df.columns[df.dtypes == "object"]
        for col in object_cols:
            df[col] = df[col].astype(str) 
        return df 
    
    adata.var = convert_cols(adata.var)
    adata.obs = convert_cols(adata.obs)

    return adata


def _get_model_path(model_path: str):
    """Obtain path to the directory with reference model. If the proposed \`model_path\` is a .zip archive, unzip it. If nesessary, convert model to the new format
    
    Parameters
    ----------
    model_path : str
        Path to a directory, where to search for the model or to a zip file containing the model
    
    Returns
    -------
    Path to a directory with reference model in format of scvi-tools>=0.15
    """
    import os
    import zipfile
    import tempfile
    from pathlib import Path

    if os.path.isdir(model_path) and "model.pt" in os.listdir(model_path):
        # Probably, the \`model_path\` already contains model in the output format of scvi-tools>=0.15
        return model_path
    
    # The model either has old format or is a zip file downloaded from Zenodo
    new_directory = Path(tempfile.TemporaryDirectory().name)

    if zipfile.is_zipfile(model_path):
        with zipfile.ZipFile(model_path) as archive:
            archive.extractall(new_directory)
            model_dir = next(new_directory.glob("**/*.pt")).parent

    else:
        model_dir = next(Path(model_path).glob("**/*.pt")).parent

    if "model_params.pt" in os.listdir(model_dir):
        # The model is in the \`directory\`, but it was generated with scvi-tools<0.15
        # TODO: for new references (that could not be SCANVI based), we need to check the base class somehow. Reading registry does not work with models generated by scvi-tools<0.15
        # Here I assume that the reference model is for HLCA and thus is SCANVI based
        converted_model_path = os.path.join(model_dir, "converted")
        scvi.model.SCANVI.convert_legacy_save(model_dir, converted_model_path)
        return converted_model_path

    elif "model.pt" in os.listdir(model_dir):
        # Archive contained model in the new format, so just return the directory
        return model_dir
    
    else:
        raise ValueError("Cannot find model in the provided reference path. Please, provide a path or a link to the directory with reference model. For HLCA use https://zenodo.org/record/6337966/files/HLCA_reference_model.zip")


def main():

    mdata_query = mudata.read(par["input"].strip())
    adata_query = mdata_query.mod[par["modality"]].copy()

    if "dataset" not in adata_query.obs.columns:
        # Write name of the dataset as batch variable
        if par["dataset_name"] is None:
            logger.info("Detecting dataset name")
            par["dataset_name"] = extract_file_name(par["input"])
            logger.info(f"Detected {par['dataset_name']}")

        adata_query.obs["dataset"] = par["dataset_name"]

    model_path = _get_model_path(par["reference"])
    vae_query, adata_query = map_to_existing_reference(adata_query, model_path=model_path)
    model_name = _read_model_name_from_registry(model_path)

    # Save info about the used model
    mdata_query.mod[par["modality"]].uns["integration_method"] = model_name

    logger.info("Trying to write latent representation")
    output_key = par["obsm_output"].format(model_name=model_name)
    mdata_query.mod[par["modality"]].obsm[output_key] = vae_query.get_latent_representation()

    logger.info("Converting dtypes")
    mdata_query.mod[par["modality"]] = _convert_object_dtypes_to_strings(mdata_query.mod[par["modality"]])

    logger.info("Updating mudata")
    try:
        mdata_query.update()  # Without that error might be thrown during file saving
    except KeyError:
        # Sometimes this error is thrown, but then everything is magically fixed, and the file gets saved normally
        # This is discussed here a bit: https://github.com/scverse/mudata/issues/27
        logger.warning("KeyError was thrown during updating mudata. Probably, the file is fixed after that, but be careful")

    logger.info("Saving h5mu file")
    mdata_query.write_h5mu(par["output"].strip(), compression=par["output_compression"])

    logger.info("Saving model")
    vae_query.save(par["model_output"], overwrite=True)

if __name__ == "__main__":
    main()
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_MODEL_OUTPUT" ] && [ ! -e "$VIASH_PAR_MODEL_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_MODEL_OUTPUT' does not exist."
  exit 1
fi


exit 0
