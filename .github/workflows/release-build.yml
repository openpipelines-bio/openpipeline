name: release build

on: 
  workflow_dispatch:
    inputs:
      version_tag:
        description: Version tag
        required: true

jobs:
  # Build and create containers
  build:
    uses: ./.github/workflows/main-build.yml
    with:
      push_containers: true
      version: ${{ inputs.version_tag }}
      target_tag: ${{ inputs.version_tag }}
      deploy_branch: release
    secrets: inherit

  # Synchronize S3 Bucket and create cache for per-component runs
  sync_s3:
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest

    outputs:
      cache_key: ${{ steps.cache.outputs.cache_key }}
      dest_paths: ${{ steps.cache.outputs.dest_paths }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 
    - uses: viash-io/viash-actions/project/sync-and-cache@v6
      id: cache
  
  # phase 3
  integration_test:
    runs-on: ubuntu-latest
    needs: [ build, sync_s3 ]
    if: "${{ needs.build.outputs.workflow_matrix != '[]' }}"

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.build.outputs.workflow_matrix) }}

    steps:
    # Remove unnecessary files to free up space. Otherwise, we get 'no space left on device.'
    - uses: data-intuitive/reclaim-the-bytes@v2
    
    - name: Keep symlinks as-is
      run: |
        git config --global core.symlinks true

    - uses: actions/checkout@v4
      with:
        ref: 'release'

    - uses: viash-io/viash-actions/setup@v6

    - uses: nf-core/setup-nextflow@v2.1.4

    # use cache
    - name: Cache resources data
      if: ${{ needs.sync_s3.outputs.cache_key != '' }}
      uses: actions/cache/restore@v4
      timeout-minutes: 10
      with:
        path: ${{ needs.sync_s3.outputs.dest_paths }}
        key: ${{ needs.sync_s3.outputs.cache_key }}
        fail-on-cache-miss: true

    - name: Remove unused test resources to save space
      shell: bash
      run: |
        readarray -t resources < <(viash config view --format json "${{ matrix.component.config }}" -c 'del(.dependencies)' | jq -r -c '(.build_info.config | capture("^(?<dir>.*\/)").dir) as $dir | .test_resources | map(select(.type == "file")) | map($dir + .path) | unique | .[]')
        to_not_remove=()
        for resource in "${resources[@]}"; do
          if [[ $resource == *"resources_test"* ]]; then
            relative_path=${resource#*resources_test/}
            relative_path_trailing_slash_removed=${relative_path%/}
            to_not_remove+=("-path" "./resources_test/$relative_path_trailing_slash_removed" "-prune" "-o")
          fi
        done
        # Remove last prune and -o
        if (( ${#errors[@]} )); then
          unset 'to_not_remove[${#to_not_remove[@]}-1]'
          unset 'to_not_remove[${#to_not_remove[@]}-1]'
          to_not_remove+=( "(" "${to_not_remove[@]}" ")" "-prune" "-o")
        fi
        echo "Not removing ${to_not_remove[@]}"
        find ./resources_test/ "${to_not_remove[@]}" -type f -exec rm {} +
        tree ./resources_test/

    - name: Build test dependencies
      run: |
        readarray -t test_dependencies < <(viash ns list --format json "${{ matrix.component.config }}" | jq -r -c '(.[].info.test_dependencies // []) | flatten | .[] | (.namespace + "/" + .name)')
        for dependency in "${test_dependencies[@]}"; do
          echo $dependency
          viash ns build -q "$dependency" -c ".version := 'integration_build'" -c ".engines[.type == 'docker'].target_tag := 'integration_build'" --setup alwayspullelsebuild
        done
  
    - name: Remove docker builder cache
      run: |
        docker builder prune -a -f 
      
    - name: Run integration test
      timeout-minutes: 120
      run: |
        # todo: replace with viash test command
        export NXF_VER=22.04.5
        nextflow run . \
          -main-script "${{ matrix.component.main_script }}" \
          -entry "${{ matrix.component.entry }}" \
          -profile docker,mount_temp,no_publish \
          -c src/workflows/utils/labels_ci.config \
          -c src/workflows/utils/integration_tests.config

  ###################################3
  # phase 4
  component_test:
    needs: [ build, sync_s3 ]
    if: ${{ needs.build.outputs.component_matrix != '[]' && needs.build.outputs.component_matrix != '' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.build.outputs.component_matrix) }}

    steps:
    # Remove unnecessary files to free up space. Otherwise, we get 'no space left on device.'
    - uses: data-intuitive/reclaim-the-bytes@v2

    - uses: actions/checkout@v4

    - uses: viash-io/viash-actions/setup@v6

    # use cache
    - name: Cache resources data
      if: ${{ needs.sync_s3.outputs.cache_key != '' }}
      uses: actions/cache/restore@v4
      timeout-minutes: 10
      with:
        path: ${{ needs.sync_s3.outputs.dest_paths }}
        key: ${{ needs.sync_s3.outputs.cache_key }}
        fail-on-cache-miss: true
    - name: Remove unused test resources to save space
      shell: bash
      run: |
        readarray -t resources < <(viash config view --format json "${{ matrix.component.config }}" -c 'del(.dependencies)' | jq -r -c '(.build_info.config | capture("^(?<dir>.*\/)").dir) as $dir | .test_resources | map(select(.type == "file")) | map($dir + .path) | unique | .[]')
        to_not_remove=()
        for resource in "${resources[@]}"; do
          if [[ $resource == *"resources_test"* ]]; then
            relative_path=${resource#*resources_test/}
            relative_path_trailing_slash_removed=${relative_path%/}
            to_not_remove+=("-path" "./resources_test/$relative_path_trailing_slash_removed" "-prune" "-o")
          fi
        done
        # Remove last prune and -o
        if (( ${#errors[@]} )); then
          unset 'to_not_remove[${#to_not_remove[@]}-1]'
          unset 'to_not_remove[${#to_not_remove[@]}-1]'
          to_not_remove+=( "(" "${to_not_remove[@]}" ")" "-prune" "-o")
        fi
        echo "Not removing ${to_not_remove[@]}"
        find ./resources_test/ "${to_not_remove[@]}" -type f -exec rm {} +
        tree ./resources_test/
    - name: Login to the nvidia container registry
      uses: docker/login-action@v3
      env: 
          NVIDIA_PASSWORD: ${{ secrets.NVIDIA_PASSWORD }}
      if: ${{ env.NVIDIA_PASSWORD != '' }}
      with:
        registry: nvcr.io
        username: $oauthtoken
        password: ${{ env.NVIDIA_PASSWORD }}

    - name: Login to container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ secrets.GTHB_USER }}
        password: ${{ secrets.GTHB_PAT }}

    - name: Test component
      timeout-minutes: 40
      run: |
        viash test \
          "${{ matrix.component.config }}" \
          --config_mod ".engines[.type == 'docker'].image := 'ghcr.io/openpipelines-bio/openpipeline/${{ matrix.component.namespace }}${{matrix.component.namespace_separator}}${{ matrix.component.name }}:${{ github.event.inputs.version_tag }}'" \
          --config_mod ".engines[.type == 'docker'].setup := []" \
          --cpus 4 \
          --memory "14gb" \
          --engine docker \
          --runner executable
